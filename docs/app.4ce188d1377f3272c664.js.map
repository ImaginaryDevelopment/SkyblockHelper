{"version":3,"file":"app.4ce188d1377f3272c664.js","mappings":"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,GAAI,EAAG,IAAK,IAAK,IAAK,IAAK,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,EAAG,IAAK,IAAK,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,IAAK,IAAK,IAAK,EAAG,EAAG,GAAI,IAAK,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,EAAG,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,GAAI,EAAG,IAAK,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,EAAG,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,GAAI,EAAG,IAAK,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,EAAG,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,GAAI,EAAG,IAAK,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,EAAG,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,GAAI,EAAG,IAAK,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG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","sources":["webpack:///./output/.fable/fable-library.3.2.11/Util.js","webpack:///./output/.fable/fable-library.3.2.11/Types.js","webpack:///./output/.fable/fable-library.3.2.11/Reflection.js","webpack:///./output/.fable/fable-library.3.2.11/Int32.js","webpack:///./output/.fable/fable-library.3.2.11/Numeric.js","webpack:///./output/.fable/fable-library.3.2.11/lib/long.js","webpack:///./output/.fable/fable-library.3.2.11/Long.js","webpack:///./output/.fable/fable-library.3.2.11/Date.js","webpack:///./output/.fable/fable-library.3.2.11/RegExp.js","webpack:///./output/.fable/fable-library.3.2.11/String.js","webpack:///./output/.fable/fable-library.3.2.11/Option.js","webpack:///./output/.fable/fable-library.3.2.11/Array.js","webpack:///./output/.fable/fable-library.3.2.11/List.js","webpack:///./output/.fable/fable-library.3.2.11/AsyncBuilder.js","webpack:///./output/.fable/fable-library.3.2.11/Choice.js","webpack:///./output/.fable/Fable.Elmish.3.1.0/cmd.fs","webpack:///./output/.fable/fable-library.3.2.11/FSharp.Core.js","webpack:///./output/.fable/fable-library.3.2.11/FSharp.Collections.js","webpack:///./output/.fable/fable-library.3.2.11/Async.js","webpack:///./output/.fable/fable-library.3.2.11/Seq.js","webpack:///./output/.fable/fable-library.3.2.11/BigInt/n.js","webpack:///./output/.fable/fable-library.3.2.11/lib/big.js","webpack:///./output/.fable/fable-library.3.2.11/Decimal.js","webpack:///./output/.fable/fable-library.3.2.11/BigInt/z.js","webpack:///./output/.fable/fable-library.3.2.11/Range.js","webpack:///./output/.fable/fable-library.3.2.11/BigInt.js","webpack:///./output/.fable/Fable.Elmish.3.1.0/ring.fs","webpack:///./output/.fable/Fable.Elmish.3.1.0/program.fs","webpack:///./output/.fable/Fable.Elmish.HMR.5.2.0/Bundler.fs","webpack:///./output/.fable/Fable.Elmish.HMR.5.2.0/common.fs","webpack:///./output/.fable/fable-library.3.2.11/MapUtil.js","webpack:///./output/.fable/Thoth.Json.7.0.0/Types.fs","webpack:///./output/.fable/fable-library.3.2.11/Guid.js","webpack:///./output/.fable/fable-library.3.2.11/DateOffset.js","webpack:///./output/.fable/fable-library.3.2.11/TimeSpan.js","webpack:///./output/.fable/fable-library.3.2.11/Map.js","webpack:///./output/.fable/fable-library.3.2.11/Set.js","webpack:///./output/.fable/Thoth.Json.7.0.0/Decode.fs","webpack:///./output/.fable/Thoth.Json.7.0.0/Encode.fs","webpack:///./output/.fable/Thoth.Json.7.0.0/Extra.fs","webpack:///./output/.fable/fable-library.3.2.11/Double.js","webpack:///./src/Shared/Shared.fs","webpack:///./src/Client/CodeHelpers/HypixelApi.fs","webpack:///./output/.fable/Fulma.2.16.0/Common.fs","webpack:///./output/.fable/Fulma.2.16.0/Layouts/Columns.fs","webpack:///./output/.fable/Fulma.2.16.0/Layouts/Column.fs","webpack:///./src/Client/CodeHelpers/FableHelpers.fs","webpack:///./output/.fable/Fable.FontAwesome.2.0.0/FontAwesome.fs","webpack:///./src/Client/Components/SharedComponents.fs","webpack:///./output/.fable/Fulma.2.16.0/Elements/Icon.fs","webpack:///./output/.fable/Fable.React.8.0.1/Fable.React.Extensions.fs","webpack:///./output/.fable/Fulma.2.16.0/Elements/Form/Input.fs","webpack:///./src/Client/Components/APIs.fs","webpack:///./output/.fable/Fulma.2.16.0/Elements/Form/Textarea.fs","webpack:///./src/Client/AppDomain/SalesReference.fs","webpack:///./output/.fable/fable-library.3.2.11/MutableSet.js","webpack:///./output/.fable/fable-library.3.2.11/MutableMap.js","webpack:///./output/.fable/fable-library.3.2.11/Seq2.js","webpack:///./src/Client/Components/Bazaar.fs","webpack:///./src/Client/AppDomain/BrewingReference.fs","webpack:///./src/Client/Components/Brewing.fs","webpack:///./src/Client/AppDomain/Skyblock.fs","webpack:///./src/Client/AppDomain/Collections/Weapons.fs","webpack:///./src/Client/Components/Collections/Shared.fs","webpack:///./src/Client/Components/Collections/Weapons.fs","webpack:///./src/Client/AppDomain/Collections/Armor.fs","webpack:///./src/Client/Components/Collections/Armor.fs","webpack:///./src/Client/AppDomain/Damage.fs","webpack:///./output/.fable/Fulma.2.16.0/Elements/Heading.fs","webpack:///./src/Client/AppDomain/Accessories.fs","webpack:///./output/.fable/Fulma.2.16.0/Elements/Form/Select.fs","webpack:///./output/.fable/Fulma.2.16.0/Layouts/Section.fs","webpack:///./src/Client/Components/Damage.fs","webpack:///./output/.fable/Fulma.2.16.0/Elements/Content.fs","webpack:///./src/Client/AppDomain/EnchantingReference.fs","webpack:///./src/Client/Components/Enchanting.fs","webpack:///./src/Client/UIHelpers/BFulma.fs","webpack:///./src/Client/Components/EventCalc.fs","webpack:///./src/Client/Components/Minions.fs","webpack:///./src/Client/AppDomain/Collections/Pets.fs","webpack:///./output/.fable/Fulma.2.16.0/Elements/Form/Label.fs","webpack:///./output/.fable/Fulma.2.16.0/Layouts/Container.fs","webpack:///./src/Client/Components/Pets.fs","webpack:///./src/Client/CodeHelpers/BrowserStorage.fs","webpack:///./src/Client/Index.fs","webpack:///./src/Client/Components/Collections.fs","webpack:///./src/Client/AppDomain/Collections/Collections.fs","webpack:///./output/.fable/Fulma.2.16.0/Elements/Notification.fs","webpack:///./output/.fable/Fable.Elmish.HMR.5.2.0/hmr.fs","webpack:///./src/Client/Client.fs","webpack:///./output/.fable/Fable.Elmish.React.3.0.1/react.fs","webpack:///./output/.fable/Fable.Elmish.3.1.0/prelude.fs"],"sourcesContent":["// tslint:disable:ban-types\nexport function isIterable(x) {\n    return x != null && typeof x === \"object\" && Symbol.iterator in x;\n}\nexport function isArrayLike(x) {\n    return Array.isArray(x) || ArrayBuffer.isView(x);\n}\nfunction isComparer(x) {\n    return typeof x.Compare === \"function\";\n}\nfunction isComparable(x) {\n    return typeof x.CompareTo === \"function\";\n}\nfunction isEquatable(x) {\n    return typeof x.Equals === \"function\";\n}\nfunction isHashable(x) {\n    return typeof x.GetHashCode === \"function\";\n}\nexport function isDisposable(x) {\n    return x != null && typeof x.Dispose === \"function\";\n}\nexport function sameConstructor(x, y) {\n    return Object.getPrototypeOf(x).constructor === Object.getPrototypeOf(y).constructor;\n}\nexport class Enumerator {\n    constructor(iter) {\n        this.iter = iter;\n    }\n    [\"System.Collections.Generic.IEnumerator`1.get_Current\"]() {\n        return this.current;\n    }\n    [\"System.Collections.IEnumerator.get_Current\"]() {\n        return this.current;\n    }\n    [\"System.Collections.IEnumerator.MoveNext\"]() {\n        const cur = this.iter.next();\n        this.current = cur.value;\n        return !cur.done;\n    }\n    [\"System.Collections.IEnumerator.Reset\"]() {\n        throw new Error(\"JS iterators cannot be reset\");\n    }\n    Dispose() {\n        return;\n    }\n}\nexport function getEnumerator(o) {\n    return typeof o.GetEnumerator === \"function\"\n        ? o.GetEnumerator()\n        : new Enumerator(o[Symbol.iterator]());\n}\nexport function toIterator(en) {\n    return {\n        [Symbol.iterator]() { return this; },\n        next() {\n            const hasNext = en[\"System.Collections.IEnumerator.MoveNext\"]();\n            const current = hasNext ? en[\"System.Collections.IEnumerator.get_Current\"]() : undefined;\n            return { done: !hasNext, value: current };\n        },\n    };\n}\nexport class Comparer {\n    constructor(f) {\n        this.Compare = f || compare;\n    }\n}\nexport function comparerFromEqualityComparer(comparer) {\n    // Sometimes IEqualityComparer also implements IComparer\n    if (isComparer(comparer)) {\n        return new Comparer(comparer.Compare);\n    }\n    else {\n        return new Comparer((x, y) => {\n            const xhash = comparer.GetHashCode(x);\n            const yhash = comparer.GetHashCode(y);\n            if (xhash === yhash) {\n                return comparer.Equals(x, y) ? 0 : -1;\n            }\n            else {\n                return xhash < yhash ? -1 : 1;\n            }\n        });\n    }\n}\nexport function assertEqual(actual, expected, msg) {\n    if (!equals(actual, expected)) {\n        throw Object.assign(new Error(msg || `Expected: ${expected} - Actual: ${actual}`), {\n            actual,\n            expected,\n        });\n    }\n}\nexport function assertNotEqual(actual, expected, msg) {\n    if (equals(actual, expected)) {\n        throw Object.assign(new Error(msg || `Expected: ${expected} - Actual: ${actual}`), {\n            actual,\n            expected,\n        });\n    }\n}\nexport class Lazy {\n    constructor(factory) {\n        this.factory = factory;\n        this.isValueCreated = false;\n    }\n    get Value() {\n        if (!this.isValueCreated) {\n            this.createdValue = this.factory();\n            this.isValueCreated = true;\n        }\n        return this.createdValue;\n    }\n    get IsValueCreated() {\n        return this.isValueCreated;\n    }\n}\nexport function lazyFromValue(v) {\n    return new Lazy(() => v);\n}\nexport function padWithZeros(i, length) {\n    let str = i.toString(10);\n    while (str.length < length) {\n        str = \"0\" + str;\n    }\n    return str;\n}\nexport function padLeftAndRightWithZeros(i, lengthLeft, lengthRight) {\n    let str = i.toString(10);\n    while (str.length < lengthLeft) {\n        str = \"0\" + str;\n    }\n    while (str.length < lengthRight) {\n        str = str + \"0\";\n    }\n    return str;\n}\nexport function dateOffset(date) {\n    const date1 = date;\n    return typeof date1.offset === \"number\"\n        ? date1.offset\n        : (date.kind === 1 /* UTC */\n            ? 0 : date.getTimezoneOffset() * -60000);\n}\nexport function int16ToString(i, radix) {\n    i = i < 0 && radix != null && radix !== 10 ? 0xFFFF + i + 1 : i;\n    return i.toString(radix);\n}\nexport function int32ToString(i, radix) {\n    i = i < 0 && radix != null && radix !== 10 ? 0xFFFFFFFF + i + 1 : i;\n    return i.toString(radix);\n}\nexport class ObjectRef {\n    static id(o) {\n        if (!ObjectRef.idMap.has(o)) {\n            ObjectRef.idMap.set(o, ++ObjectRef.count);\n        }\n        return ObjectRef.idMap.get(o);\n    }\n}\nObjectRef.idMap = new WeakMap();\nObjectRef.count = 0;\nexport function stringHash(s) {\n    let i = 0;\n    let h = 5381;\n    const len = s.length;\n    while (i < len) {\n        h = (h * 33) ^ s.charCodeAt(i++);\n    }\n    return h;\n}\nexport function numberHash(x) {\n    return x * 2654435761 | 0;\n}\n// From https://stackoverflow.com/a/37449594\nexport function combineHashCodes(hashes) {\n    if (hashes.length === 0) {\n        return 0;\n    }\n    return hashes.reduce((h1, h2) => {\n        return ((h1 << 5) + h1) ^ h2;\n    });\n}\nexport function physicalHash(x) {\n    if (x == null) {\n        return 0;\n    }\n    switch (typeof x) {\n        case \"boolean\":\n            return x ? 1 : 0;\n        case \"number\":\n            return numberHash(x);\n        case \"string\":\n            return stringHash(x);\n        default:\n            return numberHash(ObjectRef.id(x));\n    }\n}\nexport function identityHash(x) {\n    if (x == null) {\n        return 0;\n    }\n    else if (isHashable(x)) {\n        return x.GetHashCode();\n    }\n    else {\n        return physicalHash(x);\n    }\n}\nexport function dateHash(x) {\n    return x.getTime();\n}\nexport function arrayHash(x) {\n    const len = x.length;\n    const hashes = new Array(len);\n    for (let i = 0; i < len; i++) {\n        hashes[i] = structuralHash(x[i]);\n    }\n    return combineHashCodes(hashes);\n}\nexport function structuralHash(x) {\n    if (x == null) {\n        return 0;\n    }\n    switch (typeof x) {\n        case \"boolean\":\n            return x ? 1 : 0;\n        case \"number\":\n            return numberHash(x);\n        case \"string\":\n            return stringHash(x);\n        default: {\n            if (isHashable(x)) {\n                return x.GetHashCode();\n            }\n            else if (isArrayLike(x)) {\n                return arrayHash(x);\n            }\n            else if (x instanceof Date) {\n                return dateHash(x);\n            }\n            else if (Object.getPrototypeOf(x).constructor === Object) {\n                // TODO: check call-stack to prevent cyclic objects?\n                const hashes = Object.values(x).map((v) => structuralHash(v));\n                return combineHashCodes(hashes);\n            }\n            else {\n                // Classes don't implement GetHashCode by default, but must use identity hashing\n                return numberHash(ObjectRef.id(x));\n                // return stringHash(String(x));\n            }\n        }\n    }\n}\n// Intended for custom numeric types, like long or decimal\nexport function fastStructuralHash(x) {\n    return stringHash(String(x));\n}\n// Intended for declared types that may or may not implement GetHashCode\nexport function safeHash(x) {\n    return x == null ? 0 : isHashable(x) ? x.GetHashCode() : numberHash(ObjectRef.id(x));\n}\nexport function equalArraysWith(x, y, eq) {\n    if (x == null) {\n        return y == null;\n    }\n    if (y == null) {\n        return false;\n    }\n    if (x.length !== y.length) {\n        return false;\n    }\n    for (let i = 0; i < x.length; i++) {\n        if (!eq(x[i], y[i])) {\n            return false;\n        }\n    }\n    return true;\n}\nexport function equalArrays(x, y) {\n    return equalArraysWith(x, y, equals);\n}\nfunction equalObjects(x, y) {\n    const xKeys = Object.keys(x);\n    const yKeys = Object.keys(y);\n    if (xKeys.length !== yKeys.length) {\n        return false;\n    }\n    xKeys.sort();\n    yKeys.sort();\n    for (let i = 0; i < xKeys.length; i++) {\n        if (xKeys[i] !== yKeys[i] || !equals(x[xKeys[i]], y[yKeys[i]])) {\n            return false;\n        }\n    }\n    return true;\n}\nexport function equals(x, y) {\n    if (x === y) {\n        return true;\n    }\n    else if (x == null) {\n        return y == null;\n    }\n    else if (y == null) {\n        return false;\n    }\n    else if (typeof x !== \"object\") {\n        return false;\n    }\n    else if (isEquatable(x)) {\n        return x.Equals(y);\n    }\n    else if (isArrayLike(x)) {\n        return isArrayLike(y) && equalArrays(x, y);\n    }\n    else if (x instanceof Date) {\n        return (y instanceof Date) && compareDates(x, y) === 0;\n    }\n    else {\n        return Object.getPrototypeOf(x).constructor === Object && equalObjects(x, y);\n    }\n}\nexport function compareDates(x, y) {\n    let xtime;\n    let ytime;\n    // DateTimeOffset and DateTime deals with equality differently.\n    if (\"offset\" in x && \"offset\" in y) {\n        xtime = x.getTime();\n        ytime = y.getTime();\n    }\n    else {\n        xtime = x.getTime() + dateOffset(x);\n        ytime = y.getTime() + dateOffset(y);\n    }\n    return xtime === ytime ? 0 : (xtime < ytime ? -1 : 1);\n}\nexport function comparePrimitives(x, y) {\n    return x === y ? 0 : (x < y ? -1 : 1);\n}\nexport function compareArraysWith(x, y, comp) {\n    if (x == null) {\n        return y == null ? 0 : 1;\n    }\n    if (y == null) {\n        return -1;\n    }\n    if (x.length !== y.length) {\n        return x.length < y.length ? -1 : 1;\n    }\n    for (let i = 0, j = 0; i < x.length; i++) {\n        j = comp(x[i], y[i]);\n        if (j !== 0) {\n            return j;\n        }\n    }\n    return 0;\n}\nexport function compareArrays(x, y) {\n    return compareArraysWith(x, y, compare);\n}\nfunction compareObjects(x, y) {\n    const xKeys = Object.keys(x);\n    const yKeys = Object.keys(y);\n    if (xKeys.length !== yKeys.length) {\n        return xKeys.length < yKeys.length ? -1 : 1;\n    }\n    xKeys.sort();\n    yKeys.sort();\n    for (let i = 0, j = 0; i < xKeys.length; i++) {\n        const key = xKeys[i];\n        if (key !== yKeys[i]) {\n            return key < yKeys[i] ? -1 : 1;\n        }\n        else {\n            j = compare(x[key], y[key]);\n            if (j !== 0) {\n                return j;\n            }\n        }\n    }\n    return 0;\n}\nexport function compare(x, y) {\n    if (x === y) {\n        return 0;\n    }\n    else if (x == null) {\n        return y == null ? 0 : -1;\n    }\n    else if (y == null) {\n        return 1;\n    }\n    else if (typeof x !== \"object\") {\n        return x < y ? -1 : 1;\n    }\n    else if (isComparable(x)) {\n        return x.CompareTo(y);\n    }\n    else if (isArrayLike(x)) {\n        return isArrayLike(y) ? compareArrays(x, y) : -1;\n    }\n    else if (x instanceof Date) {\n        return y instanceof Date ? compareDates(x, y) : -1;\n    }\n    else {\n        return Object.getPrototypeOf(x).constructor === Object ? compareObjects(x, y) : -1;\n    }\n}\nexport function min(comparer, x, y) {\n    return comparer(x, y) < 0 ? x : y;\n}\nexport function max(comparer, x, y) {\n    return comparer(x, y) > 0 ? x : y;\n}\nexport function clamp(comparer, value, min, max) {\n    return (comparer(value, min) < 0) ? min : (comparer(value, max) > 0) ? max : value;\n}\nexport function createAtom(value) {\n    let atom = value;\n    return (value, isSetter) => {\n        if (!isSetter) {\n            return atom;\n        }\n        else {\n            atom = value;\n            return void 0;\n        }\n    };\n}\nexport function createObj(fields) {\n    const obj = {};\n    for (const kv of fields) {\n        obj[kv[0]] = kv[1];\n    }\n    return obj;\n}\nexport function jsOptions(mutator) {\n    const opts = {};\n    mutator(opts);\n    return opts;\n}\nexport function round(value, digits = 0) {\n    const m = Math.pow(10, digits);\n    const n = +(digits ? value * m : value).toFixed(8);\n    const i = Math.floor(n);\n    const f = n - i;\n    const e = 1e-8;\n    const r = (f > 0.5 - e && f < 0.5 + e) ? ((i % 2 === 0) ? i : i + 1) : Math.round(n);\n    return digits ? r / m : r;\n}\nexport function sign(x) {\n    return x > 0 ? 1 : x < 0 ? -1 : 0;\n}\nexport function randomNext(min, max) {\n    return Math.floor(Math.random() * (max - min)) + min;\n}\nexport function randomBytes(buffer) {\n    if (buffer == null) {\n        throw new Error(\"Buffer cannot be null\");\n    }\n    for (let i = 0; i < buffer.length; i += 6) {\n        // Pick random 48-bit number. Fill buffer in 2 24-bit chunks to avoid bitwise truncation.\n        let r = Math.floor(Math.random() * 281474976710656); // Low 24 bits = chunk 1.\n        const rhi = Math.floor(r / 16777216); // High 24 bits shifted via division = chunk 2.\n        for (let j = 0; j < 6 && i + j < buffer.length; j++) {\n            if (j === 3) {\n                r = rhi;\n            }\n            buffer[i + j] = r & 255;\n            r >>>= 8;\n        }\n    }\n}\nexport function unescapeDataString(s) {\n    // https://stackoverflow.com/a/4458580/524236\n    return decodeURIComponent((s).replace(/\\+/g, \"%20\"));\n}\nexport function escapeDataString(s) {\n    return encodeURIComponent(s).replace(/!/g, \"%21\")\n        .replace(/'/g, \"%27\")\n        .replace(/\\(/g, \"%28\")\n        .replace(/\\)/g, \"%29\")\n        .replace(/\\*/g, \"%2A\");\n}\nexport function escapeUriString(s) {\n    return encodeURI(s);\n}\n// ICollection.Clear and Count members can be called on Arrays\n// or Dictionaries so we need a runtime check (see #1120)\nexport function count(col) {\n    if (isArrayLike(col)) {\n        return col.length;\n    }\n    else {\n        let count = 0;\n        for (const _ of col) {\n            count++;\n        }\n        return count;\n    }\n}\nexport function clear(col) {\n    if (isArrayLike(col)) {\n        col.splice(0);\n    }\n    else {\n        col.clear();\n    }\n}\nconst CURRIED_KEY = \"__CURRIED__\";\nexport function uncurry(arity, f) {\n    // f may be a function option with None value\n    if (f == null || f.length > 1) {\n        return f;\n    }\n    let uncurriedFn;\n    switch (arity) {\n        case 2:\n            uncurriedFn = (a1, a2) => f(a1)(a2);\n            break;\n        case 3:\n            uncurriedFn = (a1, a2, a3) => f(a1)(a2)(a3);\n            break;\n        case 4:\n            uncurriedFn = (a1, a2, a3, a4) => f(a1)(a2)(a3)(a4);\n            break;\n        case 5:\n            uncurriedFn = (a1, a2, a3, a4, a5) => f(a1)(a2)(a3)(a4)(a5);\n            break;\n        case 6:\n            uncurriedFn = (a1, a2, a3, a4, a5, a6) => f(a1)(a2)(a3)(a4)(a5)(a6);\n            break;\n        case 7:\n            uncurriedFn = (a1, a2, a3, a4, a5, a6, a7) => f(a1)(a2)(a3)(a4)(a5)(a6)(a7);\n            break;\n        case 8:\n            uncurriedFn = (a1, a2, a3, a4, a5, a6, a7, a8) => f(a1)(a2)(a3)(a4)(a5)(a6)(a7)(a8);\n            break;\n        default:\n            throw new Error(\"Uncurrying to more than 8-arity is not supported: \" + arity);\n    }\n    uncurriedFn[CURRIED_KEY] = f;\n    return uncurriedFn;\n}\nexport function curry(arity, f) {\n    if (f == null || f.length === 1) {\n        return f;\n    }\n    if (CURRIED_KEY in f) {\n        return f[CURRIED_KEY];\n    }\n    switch (arity) {\n        case 2:\n            return (a1) => (a2) => f(a1, a2);\n        case 3:\n            return (a1) => (a2) => (a3) => f(a1, a2, a3);\n        case 4:\n            return (a1) => (a2) => (a3) => (a4) => f(a1, a2, a3, a4);\n        case 5:\n            return (a1) => (a2) => (a3) => (a4) => (a5) => f(a1, a2, a3, a4, a5);\n        case 6:\n            return (a1) => (a2) => (a3) => (a4) => (a5) => (a6) => f(a1, a2, a3, a4, a5, a6);\n        case 7:\n            return (a1) => (a2) => (a3) => (a4) => (a5) => (a6) => (a7) => f(a1, a2, a3, a4, a5, a6, a7);\n        case 8:\n            return (a1) => (a2) => (a3) => (a4) => (a5) => (a6) => (a7) => (a8) => f(a1, a2, a3, a4, a5, a6, a7, a8);\n        default:\n            throw new Error(\"Currying to more than 8-arity is not supported: \" + arity);\n    }\n}\nexport function checkArity(arity, f) {\n    return f.length > arity\n        ? (...args1) => (...args2) => f.apply(undefined, args1.concat(args2))\n        : f;\n}\nexport function partialApply(arity, f, args) {\n    if (f == null) {\n        return undefined;\n    }\n    else if (CURRIED_KEY in f) {\n        f = f[CURRIED_KEY];\n        for (let i = 0; i < args.length; i++) {\n            f = f(args[i]);\n        }\n        return f;\n    }\n    else {\n        switch (arity) {\n            case 1:\n                // Wrap arguments to make sure .concat doesn't destruct arrays. Example\n                // [1,2].concat([3,4],5)   --> [1,2,3,4,5]    // fails\n                // [1,2].concat([[3,4],5]) --> [1,2,[3,4],5]  // ok\n                return (a1) => f.apply(undefined, args.concat([a1]));\n            case 2:\n                return (a1) => (a2) => f.apply(undefined, args.concat([a1, a2]));\n            case 3:\n                return (a1) => (a2) => (a3) => f.apply(undefined, args.concat([a1, a2, a3]));\n            case 4:\n                return (a1) => (a2) => (a3) => (a4) => f.apply(undefined, args.concat([a1, a2, a3, a4]));\n            case 5:\n                return (a1) => (a2) => (a3) => (a4) => (a5) => f.apply(undefined, args.concat([a1, a2, a3, a4, a5]));\n            case 6:\n                return (a1) => (a2) => (a3) => (a4) => (a5) => (a6) => f.apply(undefined, args.concat([a1, a2, a3, a4, a5, a6]));\n            case 7:\n                return (a1) => (a2) => (a3) => (a4) => (a5) => (a6) => (a7) => f.apply(undefined, args.concat([a1, a2, a3, a4, a5, a6, a7]));\n            case 8:\n                return (a1) => (a2) => (a3) => (a4) => (a5) => (a6) => (a7) => (a8) => f.apply(undefined, args.concat([a1, a2, a3, a4, a5, a6, a7, a8]));\n            default:\n                throw new Error(\"Partially applying to more than 8-arity is not supported: \" + arity);\n        }\n    }\n}\nexport function mapCurriedArgs(fn, mappings) {\n    function mapArg(fn, arg, mappings, idx) {\n        const mapping = mappings[idx];\n        if (mapping !== 0) {\n            const expectedArity = mapping[0];\n            const actualArity = mapping[1];\n            if (expectedArity > 1) {\n                arg = curry(expectedArity, arg);\n            }\n            if (actualArity > 1) {\n                arg = uncurry(actualArity, arg);\n            }\n        }\n        const res = fn(arg);\n        if (idx + 1 === mappings.length) {\n            return res;\n        }\n        else {\n            return (arg) => mapArg(res, arg, mappings, idx + 1);\n        }\n    }\n    return (arg) => mapArg(fn, arg, mappings, 0);\n}\n","import { combineHashCodes, compare, compareArrays, equalArrays, equals, sameConstructor, numberHash, structuralHash } from \"./Util.js\";\nexport function seqToString(self) {\n    let count = 0;\n    let str = \"[\";\n    for (const x of self) {\n        if (count === 0) {\n            str += toString(x);\n        }\n        else if (count === 100) {\n            str += \"; ...\";\n            break;\n        }\n        else {\n            str += \"; \" + toString(x);\n        }\n        count++;\n    }\n    return str + \"]\";\n}\nexport function toString(x, callStack = 0) {\n    if (x != null && typeof x === \"object\") {\n        if (typeof x.toString === \"function\") {\n            return x.toString();\n        }\n        else if (Symbol.iterator in x) {\n            return seqToString(x);\n        }\n        else { // TODO: Date?\n            const cons = Object.getPrototypeOf(x).constructor;\n            return cons === Object && callStack < 10\n                // Same format as recordToString\n                ? \"{ \" + Object.entries(x).map(([k, v]) => k + \" = \" + toString(v, callStack + 1)).join(\"\\n  \") + \" }\"\n                : cons.name;\n        }\n    }\n    return String(x);\n}\nexport function unionToString(name, fields) {\n    if (fields.length === 0) {\n        return name;\n    }\n    else {\n        let fieldStr = \"\";\n        let withParens = true;\n        if (fields.length === 1) {\n            fieldStr = toString(fields[0]);\n            withParens = fieldStr.indexOf(\" \") >= 0;\n        }\n        else {\n            fieldStr = fields.map((x) => toString(x)).join(\", \");\n        }\n        return name + (withParens ? \" (\" : \" \") + fieldStr + (withParens ? \")\" : \"\");\n    }\n}\nexport class Union {\n    get name() {\n        return this.cases()[this.tag];\n    }\n    toJSON() {\n        return this.fields.length === 0 ? this.name : [this.name].concat(this.fields);\n    }\n    toString() {\n        return unionToString(this.name, this.fields);\n    }\n    GetHashCode() {\n        const hashes = this.fields.map((x) => structuralHash(x));\n        hashes.splice(0, 0, numberHash(this.tag));\n        return combineHashCodes(hashes);\n    }\n    Equals(other) {\n        if (this === other) {\n            return true;\n        }\n        else if (!sameConstructor(this, other)) {\n            return false;\n        }\n        else if (this.tag === other.tag) {\n            return equalArrays(this.fields, other.fields);\n        }\n        else {\n            return false;\n        }\n    }\n    CompareTo(other) {\n        if (this === other) {\n            return 0;\n        }\n        else if (!sameConstructor(this, other)) {\n            return -1;\n        }\n        else if (this.tag === other.tag) {\n            return compareArrays(this.fields, other.fields);\n        }\n        else {\n            return this.tag < other.tag ? -1 : 1;\n        }\n    }\n}\nfunction recordToJSON(self) {\n    const o = {};\n    const keys = Object.keys(self);\n    for (let i = 0; i < keys.length; i++) {\n        o[keys[i]] = self[keys[i]];\n    }\n    return o;\n}\nfunction recordToString(self) {\n    return \"{ \" + Object.entries(self).map(([k, v]) => k + \" = \" + toString(v)).join(\"\\n  \") + \" }\";\n}\nfunction recordGetHashCode(self) {\n    const hashes = Object.values(self).map((v) => structuralHash(v));\n    return combineHashCodes(hashes);\n}\nfunction recordEquals(self, other) {\n    if (self === other) {\n        return true;\n    }\n    else if (!sameConstructor(self, other)) {\n        return false;\n    }\n    else {\n        const thisNames = Object.keys(self);\n        for (let i = 0; i < thisNames.length; i++) {\n            if (!equals(self[thisNames[i]], other[thisNames[i]])) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\nfunction recordCompareTo(self, other) {\n    if (self === other) {\n        return 0;\n    }\n    else if (!sameConstructor(self, other)) {\n        return -1;\n    }\n    else {\n        const thisNames = Object.keys(self);\n        for (let i = 0; i < thisNames.length; i++) {\n            const result = compare(self[thisNames[i]], other[thisNames[i]]);\n            if (result !== 0) {\n                return result;\n            }\n        }\n        return 0;\n    }\n}\nexport class Record {\n    toJSON() { return recordToJSON(this); }\n    toString() { return recordToString(this); }\n    GetHashCode() { return recordGetHashCode(this); }\n    Equals(other) { return recordEquals(this, other); }\n    CompareTo(other) { return recordCompareTo(this, other); }\n}\nexport class FSharpRef {\n    constructor(contentsOrGetter, setter) {\n        if (typeof setter === \"function\") {\n            this.getter = contentsOrGetter;\n            this.setter = setter;\n        }\n        else {\n            this.getter = () => contentsOrGetter;\n            this.setter = (v) => { contentsOrGetter = v; };\n        }\n    }\n    get contents() {\n        return this.getter();\n    }\n    set contents(v) {\n        this.setter(v);\n    }\n}\n// EXCEPTIONS\n// Exception is intentionally not derived from Error, for performance reasons (see #2160)\nexport class Exception {\n    constructor(message) {\n        this.message = message;\n    }\n}\nexport function isException(x) {\n    return x instanceof Exception || x instanceof Error;\n}\nexport class FSharpException extends Exception {\n    toJSON() { return recordToJSON(this); }\n    toString() { return recordToString(this); }\n    GetHashCode() { return recordGetHashCode(this); }\n    Equals(other) { return recordEquals(this, other); }\n    CompareTo(other) { return recordCompareTo(this, other); }\n}\nexport class MatchFailureException extends FSharpException {\n    constructor(arg1, arg2, arg3) {\n        super();\n        this.arg1 = arg1;\n        this.arg2 = arg2 | 0;\n        this.arg3 = arg3 | 0;\n        this.message = \"The match cases were incomplete\";\n    }\n}\nexport class Attribute {\n}\n","import { Record, Union } from \"./Types.js\";\nimport { combineHashCodes, equalArraysWith, stringHash } from \"./Util.js\";\nexport class CaseInfo {\n    constructor(declaringType, tag, name, fields) {\n        this.declaringType = declaringType;\n        this.tag = tag;\n        this.name = name;\n        this.fields = fields;\n    }\n}\nexport class TypeInfo {\n    constructor(fullname, generics, construct, parent, fields, cases, enumCases) {\n        this.fullname = fullname;\n        this.generics = generics;\n        this.construct = construct;\n        this.parent = parent;\n        this.fields = fields;\n        this.cases = cases;\n        this.enumCases = enumCases;\n    }\n    toString() {\n        return fullName(this);\n    }\n    GetHashCode() {\n        return getHashCode(this);\n    }\n    Equals(other) {\n        return equals(this, other);\n    }\n}\nexport function getGenerics(t) {\n    return t.generics != null ? t.generics : [];\n}\nexport function getHashCode(t) {\n    const fullnameHash = stringHash(t.fullname);\n    const genHashes = getGenerics(t).map(getHashCode);\n    return combineHashCodes([fullnameHash, ...genHashes]);\n}\nexport function equals(t1, t2) {\n    if (t1.fullname === \"\") { // Anonymous records\n        return t2.fullname === \"\"\n            && equalArraysWith(getRecordElements(t1), getRecordElements(t2), ([k1, v1], [k2, v2]) => k1 === k2 && equals(v1, v2));\n    }\n    else {\n        return t1.fullname === t2.fullname\n            && equalArraysWith(getGenerics(t1), getGenerics(t2), equals);\n    }\n}\nexport function class_type(fullname, generics, construct, parent) {\n    return new TypeInfo(fullname, generics, construct, parent);\n}\nexport function record_type(fullname, generics, construct, fields) {\n    return new TypeInfo(fullname, generics, construct, undefined, fields);\n}\nexport function anonRecord_type(...fields) {\n    return new TypeInfo(\"\", undefined, undefined, undefined, () => fields);\n}\nexport function union_type(fullname, generics, construct, cases) {\n    const t = new TypeInfo(fullname, generics, construct, undefined, undefined, () => {\n        const caseNames = construct.prototype.cases();\n        return cases().map((fields, i) => new CaseInfo(t, i, caseNames[i], fields));\n    });\n    return t;\n}\nexport function tuple_type(...generics) {\n    return new TypeInfo(\"System.Tuple`\" + generics.length, generics);\n}\nexport function delegate_type(...generics) {\n    return new TypeInfo(\"System.Func`\" + generics.length, generics);\n}\nexport function lambda_type(argType, returnType) {\n    return new TypeInfo(\"Microsoft.FSharp.Core.FSharpFunc`2\", [argType, returnType]);\n}\nexport function option_type(generic) {\n    return new TypeInfo(\"Microsoft.FSharp.Core.FSharpOption`1\", [generic]);\n}\nexport function list_type(generic) {\n    return new TypeInfo(\"Microsoft.FSharp.Collections.FSharpList`1\", [generic]);\n}\nexport function array_type(generic) {\n    return new TypeInfo(generic.fullname + \"[]\", [generic]);\n}\nexport function enum_type(fullname, underlyingType, enumCases) {\n    return new TypeInfo(fullname, [underlyingType], undefined, undefined, undefined, undefined, enumCases);\n}\nexport const obj_type = new TypeInfo(\"System.Object\");\nexport const unit_type = new TypeInfo(\"Microsoft.FSharp.Core.Unit\");\nexport const char_type = new TypeInfo(\"System.Char\");\nexport const string_type = new TypeInfo(\"System.String\");\nexport const bool_type = new TypeInfo(\"System.Boolean\");\nexport const int8_type = new TypeInfo(\"System.SByte\");\nexport const uint8_type = new TypeInfo(\"System.Byte\");\nexport const int16_type = new TypeInfo(\"System.Int16\");\nexport const uint16_type = new TypeInfo(\"System.UInt16\");\nexport const int32_type = new TypeInfo(\"System.Int32\");\nexport const uint32_type = new TypeInfo(\"System.UInt32\");\nexport const float32_type = new TypeInfo(\"System.Single\");\nexport const float64_type = new TypeInfo(\"System.Double\");\nexport const decimal_type = new TypeInfo(\"System.Decimal\");\nexport function name(info) {\n    if (Array.isArray(info)) {\n        return info[0];\n    }\n    else if (info instanceof CaseInfo) {\n        return info.name;\n    }\n    else {\n        const i = info.fullname.lastIndexOf(\".\");\n        return i === -1 ? info.fullname : info.fullname.substr(i + 1);\n    }\n}\nexport function fullName(t) {\n    const gen = t.generics != null && !isArray(t) ? t.generics : [];\n    if (gen.length > 0) {\n        return t.fullname + \"[\" + gen.map((x) => fullName(x)).join(\",\") + \"]\";\n    }\n    else {\n        return t.fullname;\n    }\n}\nexport function namespace(t) {\n    const i = t.fullname.lastIndexOf(\".\");\n    return i === -1 ? \"\" : t.fullname.substr(0, i);\n}\nexport function isArray(t) {\n    return t.fullname.endsWith(\"[]\");\n}\nexport function getElementType(t) {\n    var _a;\n    return isArray(t) ? (_a = t.generics) === null || _a === void 0 ? void 0 : _a[0] : undefined;\n}\nexport function isGenericType(t) {\n    return t.generics != null && t.generics.length > 0;\n}\nexport function isEnum(t) {\n    return t.enumCases != null && t.enumCases.length > 0;\n}\nexport function isSubclassOf(t1, t2) {\n    var _a, _b;\n    return (_b = (_a = t1.parent) === null || _a === void 0 ? void 0 : _a.Equals(t2)) !== null && _b !== void 0 ? _b : false;\n}\n/**\n * This doesn't replace types for fields (records) or cases (unions)\n * but it should be enough for type comparison purposes\n */\nexport function getGenericTypeDefinition(t) {\n    return t.generics == null ? t : new TypeInfo(t.fullname, t.generics.map(() => obj_type));\n}\nexport function getEnumUnderlyingType(t) {\n    var _a;\n    return (_a = t.generics) === null || _a === void 0 ? void 0 : _a[0];\n}\nexport function getEnumValues(t) {\n    if (isEnum(t) && t.enumCases != null) {\n        return t.enumCases.map((kv) => kv[1]);\n    }\n    else {\n        throw new Error(`${t.fullname} is not an enum type`);\n    }\n}\nexport function getEnumNames(t) {\n    if (isEnum(t) && t.enumCases != null) {\n        return t.enumCases.map((kv) => kv[0]);\n    }\n    else {\n        throw new Error(`${t.fullname} is not an enum type`);\n    }\n}\nfunction getEnumCase(t, v) {\n    if (t.enumCases != null) {\n        if (typeof v === \"string\") {\n            for (const kv of t.enumCases) {\n                if (kv[0] === v) {\n                    return kv;\n                }\n            }\n            throw new Error(`'${v}' was not found in ${t.fullname}`);\n        }\n        else {\n            for (const kv of t.enumCases) {\n                if (kv[1] === v) {\n                    return kv;\n                }\n            }\n            // .NET returns the number even if it doesn't match any of the cases\n            return [\"\", v];\n        }\n    }\n    else {\n        throw new Error(`${t.fullname} is not an enum type`);\n    }\n}\nexport function parseEnum(t, str) {\n    // TODO: better int parsing here, parseInt ceils floats: \"4.8\" -> 4\n    const value = parseInt(str, 10);\n    return getEnumCase(t, isNaN(value) ? str : value)[1];\n}\nexport function tryParseEnum(t, str, defValue) {\n    try {\n        defValue.contents = parseEnum(t, str);\n        return true;\n    }\n    catch (_a) {\n        return false;\n    }\n}\nexport function getEnumName(t, v) {\n    return getEnumCase(t, v)[0];\n}\nexport function isEnumDefined(t, v) {\n    try {\n        const kv = getEnumCase(t, v);\n        return kv[0] != null && kv[0] !== \"\";\n    }\n    catch (_a) {\n        // supress error\n    }\n    return false;\n}\n// FSharpType\nexport function getUnionCases(t) {\n    if (t.cases != null) {\n        return t.cases();\n    }\n    else {\n        throw new Error(`${t.fullname} is not an F# union type`);\n    }\n}\nexport function getRecordElements(t) {\n    if (t.fields != null) {\n        return t.fields();\n    }\n    else {\n        throw new Error(`${t.fullname} is not an F# record type`);\n    }\n}\nexport function getTupleElements(t) {\n    if (isTuple(t) && t.generics != null) {\n        return t.generics;\n    }\n    else {\n        throw new Error(`${t.fullname} is not a tuple type`);\n    }\n}\nexport function getFunctionElements(t) {\n    if (isFunction(t) && t.generics != null) {\n        const gen = t.generics;\n        return [gen[0], gen[1]];\n    }\n    else {\n        throw new Error(`${t.fullname} is not an F# function type`);\n    }\n}\nexport function isUnion(t) {\n    return t instanceof TypeInfo ? t.cases != null : t instanceof Union;\n}\nexport function isRecord(t) {\n    return t instanceof TypeInfo ? t.fields != null : t instanceof Record;\n}\nexport function isTuple(t) {\n    return t.fullname.startsWith(\"System.Tuple\") && !isArray(t);\n}\n// In .NET this is false for delegates\nexport function isFunction(t) {\n    return t.fullname === \"Microsoft.FSharp.Core.FSharpFunc`2\";\n}\n// FSharpValue\nexport function getUnionFields(v, t) {\n    const cases = getUnionCases(t);\n    const case_ = cases[v.tag];\n    if (case_ == null) {\n        throw new Error(`Cannot find case ${v.name} in union type`);\n    }\n    return [case_, v.fields];\n}\nexport function getUnionCaseFields(uci) {\n    return uci.fields == null ? [] : uci.fields;\n}\n// This is used as replacement of `FSharpValue.GetRecordFields`\n// For `FSharpTypes.GetRecordFields` see `getRecordElements`\n// Object.keys returns keys in the order they were added to the object\nexport function getRecordFields(v) {\n    return Object.keys(v).map((k) => v[k]);\n}\nexport function getRecordField(v, field) {\n    return v[field[0]];\n}\nexport function getTupleFields(v) {\n    return v;\n}\nexport function getTupleField(v, i) {\n    return v[i];\n}\nexport function makeUnion(uci, values) {\n    const expectedLength = (uci.fields || []).length;\n    if (values.length !== expectedLength) {\n        throw new Error(`Expected an array of length ${expectedLength} but got ${values.length}`);\n    }\n    return uci.declaringType.construct != null\n        ? new uci.declaringType.construct(uci.tag, ...values)\n        : {};\n}\nexport function makeRecord(t, values) {\n    const fields = getRecordElements(t);\n    if (fields.length !== values.length) {\n        throw new Error(`Expected an array of length ${fields.length} but got ${values.length}`);\n    }\n    return t.construct != null\n        ? new t.construct(...values)\n        : fields.reduce((obj, [key, _t], i) => {\n            obj[key] = values[i];\n            return obj;\n        }, {});\n}\nexport function makeTuple(values, _t) {\n    return values;\n}\nexport function makeGenericType(t, generics) {\n    return new TypeInfo(t.fullname, generics, t.construct, t.parent, t.fields, t.cases);\n}\nexport function createInstance(t, consArgs) {\n    // TODO: Check if consArgs length is same as t.construct?\n    // (Arg types can still be different)\n    if (typeof t.construct === \"function\") {\n        return new t.construct(...(consArgs !== null && consArgs !== void 0 ? consArgs : []));\n    }\n    else {\n        throw new Error(`Cannot access constructor of ${t.fullname}`);\n    }\n}\nexport function getValue(propertyInfo, v) {\n    return v[propertyInfo[0]];\n}\n// Fable.Core.Reflection\nfunction assertUnion(x) {\n    if (!(x instanceof Union)) {\n        throw new Error(`Value is not an F# union type`);\n    }\n}\nexport function getCaseTag(x) {\n    assertUnion(x);\n    return x.tag;\n}\nexport function getCaseName(x) {\n    assertUnion(x);\n    return x.cases()[x.tag];\n}\nexport function getCaseFields(x) {\n    assertUnion(x);\n    return x.fields;\n}\n","// export type decimal = Decimal;\nexport var NumberStyles;\n(function (NumberStyles) {\n    // None = 0x00000000,\n    // AllowLeadingWhite = 0x00000001,\n    // AllowTrailingWhite = 0x00000002,\n    // AllowLeadingSign = 0x00000004,\n    // AllowTrailingSign = 0x00000008,\n    // AllowParentheses = 0x00000010,\n    // AllowDecimalPoint = 0x00000020,\n    // AllowThousands = 0x00000040,\n    // AllowExponent = 0x00000080,\n    // AllowCurrencySymbol = 0x00000100,\n    NumberStyles[NumberStyles[\"AllowHexSpecifier\"] = 512] = \"AllowHexSpecifier\";\n    // Integer = AllowLeadingWhite | AllowTrailingWhite | AllowLeadingSign,\n    // HexNumber = AllowLeadingWhite | AllowTrailingWhite | AllowHexSpecifier,\n    // Number = AllowLeadingWhite | AllowTrailingWhite | AllowLeadingSign |\n    //          AllowTrailingSign | AllowDecimalPoint | AllowThousands,\n    // Float = AllowLeadingWhite | AllowTrailingWhite | AllowLeadingSign |\n    //         AllowDecimalPoint | AllowExponent,\n    // Currency = AllowLeadingWhite | AllowTrailingWhite | AllowLeadingSign | AllowTrailingSign |\n    //            AllowParentheses | AllowDecimalPoint | AllowThousands | AllowCurrencySymbol,\n    // Any = AllowLeadingWhite | AllowTrailingWhite | AllowLeadingSign | AllowTrailingSign |\n    //       AllowParentheses | AllowDecimalPoint | AllowThousands | AllowCurrencySymbol | AllowExponent,\n})(NumberStyles || (NumberStyles = {}));\nfunction validResponse(regexMatch, radix) {\n    const [/*all*/ , sign, prefix, digits] = regexMatch;\n    return {\n        sign: sign || \"\",\n        prefix: prefix || \"\",\n        digits,\n        radix,\n    };\n}\nfunction getRange(unsigned, bitsize) {\n    switch (bitsize) {\n        case 8: return unsigned ? [0, 255] : [-128, 127];\n        case 16: return unsigned ? [0, 65535] : [-32768, 32767];\n        case 32: return unsigned ? [0, 4294967295] : [-2147483648, 2147483647];\n        default: throw new Error(\"Invalid bit size.\");\n    }\n}\nfunction getInvalidDigits(radix) {\n    switch (radix) {\n        case 2: return /[^0-1]/;\n        case 8: return /[^0-7]/;\n        case 10: return /[^0-9]/;\n        case 16: return /[^0-9a-fA-F]/;\n        default:\n            throw new Error(\"Invalid Base.\");\n    }\n}\nfunction getRadix(prefix, style) {\n    if (style & NumberStyles.AllowHexSpecifier) {\n        return 16;\n    }\n    else {\n        switch (prefix) {\n            case \"0b\":\n            case \"0B\": return 2;\n            case \"0o\":\n            case \"0O\": return 8;\n            case \"0x\":\n            case \"0X\": return 16;\n            default: return 10;\n        }\n    }\n}\nexport function isValid(str, style, radix) {\n    const integerRegex = /^\\s*([\\+\\-])?(0[xXoObB])?([0-9a-fA-F]+)\\s*$/;\n    const res = integerRegex.exec(str.replace(/_/g, \"\"));\n    if (res != null) {\n        const [/*all*/ , /*sign*/ , prefix, digits] = res;\n        radix = radix || getRadix(prefix, style);\n        const invalidDigits = getInvalidDigits(radix);\n        if (!invalidDigits.test(digits)) {\n            return validResponse(res, radix);\n        }\n    }\n    return null;\n}\nexport function parse(str, style, unsigned, bitsize, radix) {\n    const res = isValid(str, style, radix);\n    if (res != null) {\n        let v = Number.parseInt(res.sign + res.digits, res.radix);\n        if (!Number.isNaN(v)) {\n            const [umin, umax] = getRange(true, bitsize);\n            if (!unsigned && res.radix !== 10 && v >= umin && v <= umax) {\n                v = v << (32 - bitsize) >> (32 - bitsize);\n            }\n            const [min, max] = getRange(unsigned, bitsize);\n            if (v >= min && v <= max) {\n                return v;\n            }\n        }\n    }\n    throw new Error(\"Input string was not in a correct format.\");\n}\nexport function tryParse(str, style, unsigned, bitsize, defValue) {\n    try {\n        defValue.contents = parse(str, style, unsigned, bitsize);\n        return true;\n    }\n    catch (_a) {\n        return false;\n    }\n}\nexport function op_UnaryNegation_Int8(x) {\n    return x === -128 ? x : -x;\n}\nexport function op_UnaryNegation_Int16(x) {\n    return x === -32768 ? x : -x;\n}\nexport function op_UnaryNegation_Int32(x) {\n    return x === -2147483648 ? x : -x;\n}\n","export const symbol = Symbol(\"numeric\");\nexport function isNumeric(x) {\n    return typeof x === \"number\" || (x === null || x === void 0 ? void 0 : x[symbol]);\n}\nexport function compare(x, y) {\n    if (typeof x === \"number\") {\n        return x < y ? -1 : (x > y ? 1 : 0);\n    }\n    else {\n        return x.CompareTo(y);\n    }\n}\nexport function multiply(x, y) {\n    if (typeof x === \"number\") {\n        return x * y;\n    }\n    else {\n        return x[symbol]().multiply(y);\n    }\n}\nexport function toFixed(x, dp) {\n    if (typeof x === \"number\") {\n        return x.toFixed(dp);\n    }\n    else {\n        return x[symbol]().toFixed(dp);\n    }\n}\nexport function toPrecision(x, sd) {\n    if (typeof x === \"number\") {\n        return x.toPrecision(sd);\n    }\n    else {\n        return x[symbol]().toPrecision(sd);\n    }\n}\nexport function toExponential(x, dp) {\n    if (typeof x === \"number\") {\n        return x.toExponential(dp);\n    }\n    else {\n        return x[symbol]().toExponential(dp);\n    }\n}\nexport function toHex(x) {\n    if (typeof x === \"number\") {\n        return (Number(x) >>> 0).toString(16);\n    }\n    else {\n        return x[symbol]().toHex();\n    }\n}\n","// Adapted from: https://github.com/dcodeIO/long.js/blob/master/src/long.js\n// Apache License 2.0: https://github.com/dcodeIO/long.js/blob/master/LICENSE\n/* tslint:disable */\nimport { symbol } from \"../Numeric.js\";\n/**\n * wasm optimizations, to do native i64 multiplication and divide\n */\nvar wasm = null;\ntry {\n    wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\n        0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\n    ])), {}).exports;\n}\ncatch (e) {\n    // no wasm support :(\n}\n/**\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\n *  See the from* functions below for more convenient ways of constructing Longs.\n * @exports Long\n * @class A Long class for representing a 64 bit two's-complement integer value.\n * @param {number} low The low (signed) 32 bits of the long\n * @param {number} high The high (signed) 32 bits of the long\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @constructor\n */\nexport function Long(low, high, unsigned) {\n    /**\n     * The low 32 bits as a signed value.\n     * @type {number}\n     */\n    this.low = low | 0;\n    /**\n     * The high 32 bits as a signed value.\n     * @type {number}\n     */\n    this.high = high | 0;\n    /**\n     * Whether unsigned or not.\n     * @type {boolean}\n     */\n    this.unsigned = !!unsigned;\n}\nLong.prototype.GetHashCode = function () {\n    let h1 = this.unsigned ? 1 : 0;\n    h1 = ((h1 << 5) + h1) ^ this.high;\n    h1 = ((h1 << 5) + h1) ^ this.low;\n    return h1;\n};\nLong.prototype.Equals = function (x) { return equals(this, x); };\nLong.prototype.CompareTo = function (x) { return compare(this, x); };\nLong.prototype.toString = function (radix) { return toString(this, radix); };\nLong.prototype.toJSON = function () { return toString(this); };\nLong.prototype[symbol] = function () {\n    const x = this;\n    return {\n        multiply: y => multiply(x, y),\n        toPrecision: sd => String(x) + (0).toPrecision(sd).substr(1),\n        toExponential: dp => String(x) + (0).toExponential(dp).substr(1),\n        toFixed: dp => String(x) + (0).toFixed(dp).substr(1),\n        toHex: () => toString(x.unsigned ? x : fromBytes(toBytes(x), true), 16),\n    };\n};\n// The internal representation of a long is the two given signed, 32-bit values.\n// We use 32-bit pieces because these are the size of integers on which\n// Javascript performs bit-operations.  For operations like addition and\n// multiplication, we split each number into 16 bit pieces, which can easily be\n// multiplied within Javascript's floating-point representation without overflow\n// or change in sign.\n//\n// In the algorithms below, we frequently reduce the negative case to the\n// positive case by negating the input(s) and then post-processing the result.\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\n// a positive number, it overflows back into a negative).  Not handling this\n// case would often result in infinite recursion.\n//\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\n// methods on which they depend.\n/**\n * An indicator used to reliably determine if an object is a Long or not.\n * @type {boolean}\n * @const\n * @private\n */\nLong.prototype.__isLong__;\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\n/**\n * @function\n * @param {*} obj Object\n * @returns {boolean}\n * @inner\n */\nexport function isLong(obj) {\n    return (obj && obj[\"__isLong__\"]) === true;\n}\n/**\n * Tests if the specified object is a Long.\n * @function\n * @param {*} obj Object\n * @returns {boolean}\n */\n// Long.isLong = isLong;\n/**\n * A cache of the Long representations of small integer values.\n * @type {!Object}\n * @inner\n */\nvar INT_CACHE = {};\n/**\n * A cache of the Long representations of small unsigned integer values.\n * @type {!Object}\n * @inner\n */\nvar UINT_CACHE = {};\n/**\n * @param {number} value\n * @param {boolean=} unsigned\n * @returns {!Long}\n * @inner\n */\nexport function fromInt(value, unsigned) {\n    var obj, cachedObj, cache;\n    if (unsigned) {\n        value >>>= 0;\n        if (cache = (0 <= value && value < 256)) {\n            cachedObj = UINT_CACHE[value];\n            if (cachedObj)\n                return cachedObj;\n        }\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\n        if (cache)\n            UINT_CACHE[value] = obj;\n        return obj;\n    }\n    else {\n        value |= 0;\n        if (cache = (-128 <= value && value < 128)) {\n            cachedObj = INT_CACHE[value];\n            if (cachedObj)\n                return cachedObj;\n        }\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\n        if (cache)\n            INT_CACHE[value] = obj;\n        return obj;\n    }\n}\n/**\n * Returns a Long representing the given 32 bit integer value.\n * @function\n * @param {number} value The 32 bit integer in question\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @returns {!Long} The corresponding Long value\n */\n// Long.fromInt = fromInt;\n/**\n * @param {number} value\n * @param {boolean=} unsigned\n * @returns {!Long}\n * @inner\n */\nexport function fromNumber(value, unsigned) {\n    if (isNaN(value))\n        return unsigned ? UZERO : ZERO;\n    if (unsigned) {\n        if (value < 0)\n            return UZERO;\n        if (value >= TWO_PWR_64_DBL)\n            return MAX_UNSIGNED_VALUE;\n    }\n    else {\n        if (value <= -TWO_PWR_63_DBL)\n            return MIN_VALUE;\n        if (value + 1 >= TWO_PWR_63_DBL)\n            return MAX_VALUE;\n    }\n    if (value < 0)\n        return negate(fromNumber(-value, unsigned));\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\n}\n/**\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\n * @function\n * @param {number} value The number in question\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @returns {!Long} The corresponding Long value\n */\n// Long.fromNumber = fromNumber;\n/**\n * @param {number} lowBits\n * @param {number} highBits\n * @param {boolean=} unsigned\n * @returns {!Long}\n * @inner\n */\nexport function fromBits(lowBits, highBits, unsigned) {\n    return new Long(lowBits, highBits, unsigned);\n}\n/**\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\n *  assumed to use 32 bits.\n * @function\n * @param {number} lowBits The low 32 bits\n * @param {number} highBits The high 32 bits\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @returns {!Long} The corresponding Long value\n */\n// Long.fromBits = fromBits;\n/**\n * @function\n * @param {number} base\n * @param {number} exponent\n * @returns {number}\n * @inner\n */\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\n/**\n * @param {string} str\n * @param {(boolean|number)=} unsigned\n * @param {number=} radix\n * @returns {!Long}\n * @inner\n */\nexport function fromString(str, unsigned, radix) {\n    if (str.length === 0)\n        throw Error('empty string');\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\n        return ZERO;\n    if (typeof unsigned === 'number') {\n        // For goog.math.long compatibility\n        radix = unsigned,\n            unsigned = false;\n    }\n    else {\n        unsigned = !!unsigned;\n    }\n    radix = radix || 10;\n    if (radix < 2 || 36 < radix)\n        throw RangeError('radix');\n    var p = str.indexOf('-');\n    if (p > 0)\n        throw Error('interior hyphen');\n    else if (p === 0) {\n        return negate(fromString(str.substring(1), unsigned, radix));\n    }\n    // Do several (8) digits each time through the loop, so as to\n    // minimize the calls to the very expensive emulated div.\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\n    var result = ZERO;\n    for (var i = 0; i < str.length; i += 8) {\n        var size = Math.min(8, str.length - i), value = parseInt(str.substring(i, i + size), radix);\n        if (size < 8) {\n            var power = fromNumber(pow_dbl(radix, size));\n            result = add(multiply(result, power), fromNumber(value));\n        }\n        else {\n            result = multiply(result, radixToPower);\n            result = add(result, fromNumber(value));\n        }\n    }\n    result.unsigned = unsigned;\n    return result;\n}\n/**\n * Returns a Long representation of the given string, written using the specified radix.\n * @function\n * @param {string} str The textual representation of the Long\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\n * @returns {!Long} The corresponding Long value\n */\n// Long.fromString = fromString;\n/**\n * @function\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\n * @param {boolean=} unsigned\n * @returns {!Long}\n * @inner\n */\nexport function fromValue(val, unsigned) {\n    if (typeof val === 'number')\n        return fromNumber(val, unsigned);\n    if (typeof val === 'string')\n        return fromString(val, unsigned);\n    // Throws for non-objects, converts non-instanceof Long:\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\n}\n/**\n * Converts the specified value to a Long using the appropriate from* function for its type.\n * @function\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @returns {!Long}\n */\n// Long.fromValue = fromValue;\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\n// no runtime penalty for these.\n/**\n * @type {number}\n * @const\n * @inner\n */\nvar TWO_PWR_16_DBL = 1 << 16;\n/**\n * @type {number}\n * @const\n * @inner\n */\nvar TWO_PWR_24_DBL = 1 << 24;\n/**\n * @type {number}\n * @const\n * @inner\n */\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\n/**\n * @type {number}\n * @const\n * @inner\n */\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\n/**\n * @type {number}\n * @const\n * @inner\n */\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\n/**\n * @type {!Long}\n * @const\n * @inner\n */\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\n/**\n * @type {!Long}\n * @inner\n */\nexport var ZERO = fromInt(0);\n/**\n * Signed zero.\n * @type {!Long}\n */\n// Long.ZERO = ZERO;\n/**\n * @type {!Long}\n * @inner\n */\nexport var UZERO = fromInt(0, true);\n/**\n * Unsigned zero.\n * @type {!Long}\n */\n// Long.UZERO = UZERO;\n/**\n * @type {!Long}\n * @inner\n */\nexport var ONE = fromInt(1);\n/**\n * Signed one.\n * @type {!Long}\n */\n// Long.ONE = ONE;\n/**\n * @type {!Long}\n * @inner\n */\nexport var UONE = fromInt(1, true);\n/**\n * Unsigned one.\n * @type {!Long}\n */\n// Long.UONE = UONE;\n/**\n * @type {!Long}\n * @inner\n */\nexport var NEG_ONE = fromInt(-1);\n/**\n * Signed negative one.\n * @type {!Long}\n */\n// Long.NEG_ONE = NEG_ONE;\n/**\n * @type {!Long}\n * @inner\n */\nexport var MAX_VALUE = fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0, false);\n/**\n * Maximum signed value.\n * @type {!Long}\n */\n// Long.MAX_VALUE = MAX_VALUE;\n/**\n * @type {!Long}\n * @inner\n */\nexport var MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF | 0, 0xFFFFFFFF | 0, true);\n/**\n * Maximum unsigned value.\n * @type {!Long}\n */\n// Long.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\n/**\n * @type {!Long}\n * @inner\n */\nexport var MIN_VALUE = fromBits(0, 0x80000000 | 0, false);\n/**\n * Minimum signed value.\n * @type {!Long}\n */\n// Long.MIN_VALUE = MIN_VALUE;\n/**\n * @alias Long.prototype\n * @inner\n */\n// var LongPrototype = Long.prototype;\n/**\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\n * @this {!Long}\n * @returns {number}\n */\nexport function toInt($this) {\n    return $this.unsigned ? $this.low >>> 0 : $this.low;\n}\n;\n/**\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\n * @this {!Long}\n * @returns {number}\n */\nexport function toNumber($this) {\n    if ($this.unsigned)\n        return (($this.high >>> 0) * TWO_PWR_32_DBL) + ($this.low >>> 0);\n    return $this.high * TWO_PWR_32_DBL + ($this.low >>> 0);\n}\n;\n/**\n * Converts the Long to a string written in the specified radix.\n * @this {!Long}\n * @param {number=} radix Radix (2-36), defaults to 10\n * @returns {string}\n * @override\n * @throws {RangeError} If `radix` is out of range\n */\nexport function toString($this, radix) {\n    radix = radix || 10;\n    if (radix < 2 || 36 < radix)\n        throw RangeError('radix');\n    if (isZero($this))\n        return '0';\n    if (isNegative($this)) { // Unsigned Longs are never negative\n        if (equals($this, MIN_VALUE)) {\n            // We need to change the Long value before it can be negated, so we remove\n            // the bottom-most digit in this base and then recurse to do the rest.\n            var radixLong = fromNumber(radix), div = divide($this, radixLong), rem1 = subtract(multiply(div, radixLong), $this);\n            return toString(div, radix) + toInt(rem1).toString(radix);\n        }\n        else\n            return '-' + toString(negate($this), radix);\n    }\n    // Do several (6) digits each time through the loop, so as to\n    // minimize the calls to the very expensive emulated div.\n    var radixToPower = fromNumber(pow_dbl(radix, 6), $this.unsigned), rem = $this;\n    var result = '';\n    while (true) {\n        var remDiv = divide(rem, radixToPower), intval = toInt(subtract(rem, multiply(remDiv, radixToPower))) >>> 0, digits = intval.toString(radix);\n        rem = remDiv;\n        if (isZero(rem))\n            return digits + result;\n        else {\n            while (digits.length < 6)\n                digits = '0' + digits;\n            result = '' + digits + result;\n        }\n    }\n}\n;\n/**\n * Gets the high 32 bits as a signed integer.\n * @this {!Long}\n * @returns {number} Signed high bits\n */\nexport function getHighBits($this) {\n    return $this.high;\n}\n;\n/**\n * Gets the high 32 bits as an unsigned integer.\n * @this {!Long}\n * @returns {number} Unsigned high bits\n */\nexport function getHighBitsUnsigned($this) {\n    return $this.high >>> 0;\n}\n;\n/**\n * Gets the low 32 bits as a signed integer.\n * @this {!Long}\n * @returns {number} Signed low bits\n */\nexport function getLowBits($this) {\n    return $this.low;\n}\n;\n/**\n * Gets the low 32 bits as an unsigned integer.\n * @this {!Long}\n * @returns {number} Unsigned low bits\n */\nexport function getLowBitsUnsigned($this) {\n    return $this.low >>> 0;\n}\n;\n/**\n * Gets the number of bits needed to represent the absolute value of this Long.\n * @this {!Long}\n * @returns {number}\n */\nexport function getNumBitsAbs($this) {\n    if (isNegative($this)) // Unsigned Longs are never negative\n        return equals($this, MIN_VALUE) ? 64 : getNumBitsAbs(negate($this));\n    var val = $this.high != 0 ? $this.high : $this.low;\n    for (var bit = 31; bit > 0; bit--)\n        if ((val & (1 << bit)) != 0)\n            break;\n    return $this.high != 0 ? bit + 33 : bit + 1;\n}\n;\n/**\n * Tests if this Long's value equals zero.\n * @this {!Long}\n * @returns {boolean}\n */\nexport function isZero($this) {\n    return $this.high === 0 && $this.low === 0;\n}\n;\n/**\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\n * @returns {boolean}\n */\n// LongPrototype.eqz = LongPrototype.isZero;\n/**\n * Tests if this Long's value is negative.\n * @this {!Long}\n * @returns {boolean}\n */\nexport function isNegative($this) {\n    return !$this.unsigned && $this.high < 0;\n}\n;\n/**\n * Tests if this Long's value is positive.\n * @this {!Long}\n * @returns {boolean}\n */\nexport function isPositive($this) {\n    return $this.unsigned || $this.high >= 0;\n}\n;\n/**\n * Tests if this Long's value is odd.\n * @this {!Long}\n * @returns {boolean}\n */\nexport function isOdd($this) {\n    return ($this.low & 1) === 1;\n}\n;\n/**\n * Tests if this Long's value is even.\n * @this {!Long}\n * @returns {boolean}\n */\nexport function isEven($this) {\n    return ($this.low & 1) === 0;\n}\n;\n/**\n * Tests if this Long's value equals the specified's.\n * @this {!Long}\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nexport function equals($this, other) {\n    if (!isLong(other))\n        other = fromValue(other);\n    if ($this.unsigned !== other.unsigned && ($this.high >>> 31) === 1 && (other.high >>> 31) === 1)\n        return false;\n    return $this.high === other.high && $this.low === other.low;\n}\n;\n/**\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\n// LongPrototype.eq = LongPrototype.equals;\n/**\n * Tests if this Long's value differs from the specified's.\n * @this {!Long}\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nexport function notEquals($this, other) {\n    return !equals($this, /* validates */ other);\n}\n;\n/**\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\n// LongPrototype.neq = LongPrototype.notEquals;\n/**\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\n// LongPrototype.ne = LongPrototype.notEquals;\n/**\n * Tests if this Long's value is less than the specified's.\n * @this {!Long}\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nexport function lessThan($this, other) {\n    return compare($this, /* validates */ other) < 0;\n}\n;\n/**\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\n// LongPrototype.lt = LongPrototype.lessThan;\n/**\n * Tests if this Long's value is less than or equal the specified's.\n * @this {!Long}\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nexport function lessThanOrEqual($this, other) {\n    return compare($this, /* validates */ other) <= 0;\n}\n;\n/**\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\n// LongPrototype.lte = LongPrototype.lessThanOrEqual;\n/**\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\n// LongPrototype.le = LongPrototype.lessThanOrEqual;\n/**\n * Tests if this Long's value is greater than the specified's.\n * @this {!Long}\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nexport function greaterThan($this, other) {\n    return compare($this, /* validates */ other) > 0;\n}\n;\n/**\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\n// LongPrototype.gt = LongPrototype.greaterThan;\n/**\n * Tests if this Long's value is greater than or equal the specified's.\n * @this {!Long}\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nexport function greaterThanOrEqual($this, other) {\n    return compare($this, /* validates */ other) >= 0;\n}\n;\n/**\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\n// LongPrototype.gte = LongPrototype.greaterThanOrEqual;\n/**\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\n// LongPrototype.ge = LongPrototype.greaterThanOrEqual;\n/**\n * Compares this Long's value with the specified's.\n * @this {!Long}\n * @param {!Long|number|string} other Other value\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\n *  if the given one is greater\n */\nexport function compare($this, other) {\n    if (!isLong(other))\n        other = fromValue(other);\n    if (equals($this, other))\n        return 0;\n    var thisNeg = isNegative($this), otherNeg = isNegative(other);\n    if (thisNeg && !otherNeg)\n        return -1;\n    if (!thisNeg && otherNeg)\n        return 1;\n    // At this point the sign bits are the same\n    if (!$this.unsigned)\n        return isNegative(subtract($this, other)) ? -1 : 1;\n    // Both are positive if at least one is unsigned\n    return (other.high >>> 0) > ($this.high >>> 0) || (other.high === $this.high && (other.low >>> 0) > ($this.low >>> 0)) ? -1 : 1;\n}\n;\n/**\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\n *  if the given one is greater\n */\n// LongPrototype.comp = LongPrototype.compare;\n/**\n * Negates this Long's value.\n * @this {!Long}\n * @returns {!Long} Negated Long\n */\nexport function negate($this) {\n    if (!$this.unsigned && equals($this, MIN_VALUE))\n        return MIN_VALUE;\n    return add(not($this), ONE);\n}\n;\n/**\n * Negates this Long's value. This is an alias of {@link Long#negate}.\n * @function\n * @returns {!Long} Negated Long\n */\n// LongPrototype.neg = LongPrototype.negate;\n/**\n * Returns the sum of this and the specified Long.\n * @this {!Long}\n * @param {!Long|number|string} addend Addend\n * @returns {!Long} Sum\n */\nexport function add($this, addend) {\n    if (!isLong(addend))\n        addend = fromValue(addend);\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\n    var a48 = $this.high >>> 16;\n    var a32 = $this.high & 0xFFFF;\n    var a16 = $this.low >>> 16;\n    var a00 = $this.low & 0xFFFF;\n    var b48 = addend.high >>> 16;\n    var b32 = addend.high & 0xFFFF;\n    var b16 = addend.low >>> 16;\n    var b00 = addend.low & 0xFFFF;\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\n    c00 += a00 + b00;\n    c16 += c00 >>> 16;\n    c00 &= 0xFFFF;\n    c16 += a16 + b16;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c32 += a32 + b32;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c48 += a48 + b48;\n    c48 &= 0xFFFF;\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, $this.unsigned);\n}\n;\n/**\n * Returns the difference of this and the specified Long.\n * @this {!Long}\n * @param {!Long|number|string} subtrahend Subtrahend\n * @returns {!Long} Difference\n */\nexport function subtract($this, subtrahend) {\n    if (!isLong(subtrahend))\n        subtrahend = fromValue(subtrahend);\n    return add($this, negate(subtrahend));\n}\n;\n/**\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\n * @function\n * @param {!Long|number|string} subtrahend Subtrahend\n * @returns {!Long} Difference\n */\n// LongPrototype.sub = LongPrototype.subtract;\n/**\n * Returns the product of this and the specified Long.\n * @this {!Long}\n * @param {!Long|number|string} multiplier Multiplier\n * @returns {!Long} Product\n */\nexport function multiply($this, multiplier) {\n    if (isZero($this))\n        return $this.unsigned ? UZERO : ZERO;\n    if (!isLong(multiplier))\n        multiplier = fromValue(multiplier);\n    // use wasm support if present\n    if (wasm) {\n        var low = wasm.mul($this.low, $this.high, multiplier.low, multiplier.high);\n        return fromBits(low, wasm.get_high(), $this.unsigned);\n    }\n    if (isZero(multiplier))\n        return $this.unsigned ? UZERO : ZERO;\n    if (equals($this, MIN_VALUE))\n        return isOdd(multiplier) ? MIN_VALUE : ZERO;\n    if (equals(multiplier, MIN_VALUE))\n        return isOdd($this) ? MIN_VALUE : ZERO;\n    if (isNegative($this)) {\n        if (isNegative(multiplier))\n            return multiply(negate($this), negate(multiplier));\n        else\n            return negate(multiply(negate($this), multiplier));\n    }\n    else if (isNegative(multiplier))\n        return negate(multiply($this, negate(multiplier)));\n    // If both longs are small, use float multiplication\n    if (lessThan($this, TWO_PWR_24) && lessThan(multiplier, TWO_PWR_24))\n        return fromNumber(toNumber($this) * toNumber(multiplier), $this.unsigned);\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\n    // We can skip products that would overflow.\n    var a48 = $this.high >>> 16;\n    var a32 = $this.high & 0xFFFF;\n    var a16 = $this.low >>> 16;\n    var a00 = $this.low & 0xFFFF;\n    var b48 = multiplier.high >>> 16;\n    var b32 = multiplier.high & 0xFFFF;\n    var b16 = multiplier.low >>> 16;\n    var b00 = multiplier.low & 0xFFFF;\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\n    c00 += a00 * b00;\n    c16 += c00 >>> 16;\n    c00 &= 0xFFFF;\n    c16 += a16 * b00;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c16 += a00 * b16;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c32 += a32 * b00;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c32 += a16 * b16;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c32 += a00 * b32;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\n    c48 &= 0xFFFF;\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, $this.unsigned);\n}\n;\n/**\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\n * @function\n * @param {!Long|number|string} multiplier Multiplier\n * @returns {!Long} Product\n */\n// LongPrototype.mul = LongPrototype.multiply;\n/**\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\n *  unsigned if this Long is unsigned.\n * @this {!Long}\n * @param {!Long|number|string} divisor Divisor\n * @returns {!Long} Quotient\n */\nexport function divide($this, divisor) {\n    if (!isLong(divisor))\n        divisor = fromValue(divisor);\n    if (isZero(divisor))\n        throw Error('division by zero');\n    // use wasm support if present\n    if (wasm) {\n        // guard against signed division overflow: the largest\n        // negative number / -1 would be 1 larger than the largest\n        // positive number, due to two's complement.\n        if (!$this.unsigned &&\n            $this.high === -0x80000000 &&\n            divisor.low === -1 && divisor.high === -1) {\n            // be consistent with non-wasm code path\n            return $this;\n        }\n        var low = ($this.unsigned ? wasm.div_u : wasm.div_s)($this.low, $this.high, divisor.low, divisor.high);\n        return fromBits(low, wasm.get_high(), $this.unsigned);\n    }\n    if (isZero($this))\n        return $this.unsigned ? UZERO : ZERO;\n    var approx, rem, res;\n    if (!$this.unsigned) {\n        // This section is only relevant for signed longs and is derived from the\n        // closure library as a whole.\n        if (equals($this, MIN_VALUE)) {\n            if (equals(divisor, ONE) || equals(divisor, NEG_ONE))\n                return MIN_VALUE; // recall that -MIN_VALUE == MIN_VALUE\n            else if (equals(divisor, MIN_VALUE))\n                return ONE;\n            else {\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\n                var halfThis = shiftRight($this, 1);\n                approx = shiftLeft(divide(halfThis, divisor), 1);\n                if (equals(approx, ZERO)) {\n                    return isNegative(divisor) ? ONE : NEG_ONE;\n                }\n                else {\n                    rem = subtract($this, multiply(divisor, approx));\n                    res = add(approx, divide(rem, divisor));\n                    return res;\n                }\n            }\n        }\n        else if (equals(divisor, MIN_VALUE))\n            return $this.unsigned ? UZERO : ZERO;\n        if (isNegative($this)) {\n            if (isNegative(divisor))\n                return divide(negate($this), negate(divisor));\n            return negate(divide(negate($this), divisor));\n        }\n        else if (isNegative(divisor))\n            return negate(divide($this, negate(divisor)));\n        res = ZERO;\n    }\n    else {\n        // The algorithm below has not been made for unsigned longs. It's therefore\n        // required to take special care of the MSB prior to running it.\n        if (!divisor.unsigned)\n            divisor = toUnsigned(divisor);\n        if (greaterThan(divisor, $this))\n            return UZERO;\n        if (greaterThan(divisor, shiftRightUnsigned($this, 1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\n            return UONE;\n        res = UZERO;\n    }\n    // Repeat the following until the remainder is less than other:  find a\n    // floating-point that approximates remainder / other *from below*, add this\n    // into the result, and subtract it from the remainder.  It is critical that\n    // the approximate value is less than or equal to the real value so that the\n    // remainder never becomes negative.\n    rem = $this;\n    while (greaterThanOrEqual(rem, divisor)) {\n        // Approximate the result of division. This may be a little greater or\n        // smaller than the actual value.\n        approx = Math.max(1, Math.floor(toNumber(rem) / toNumber(divisor)));\n        // We will tweak the approximate result by changing it in the 48-th digit or\n        // the smallest non-fractional digit, whichever is larger.\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2), delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48), \n        // Decrease the approximation until it is smaller than the remainder.  Note\n        // that if it is too large, the product overflows and is negative.\n        approxRes = fromNumber(approx), approxRem = multiply(approxRes, divisor);\n        while (isNegative(approxRem) || greaterThan(approxRem, rem)) {\n            approx -= delta;\n            approxRes = fromNumber(approx, $this.unsigned);\n            approxRem = multiply(approxRes, divisor);\n        }\n        // We know the answer can't be zero... and actually, zero would cause\n        // infinite recursion since we would make no progress.\n        if (isZero(approxRes))\n            approxRes = ONE;\n        res = add(res, approxRes);\n        rem = subtract(rem, approxRem);\n    }\n    return res;\n}\n;\n/**\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\n * @function\n * @param {!Long|number|string} divisor Divisor\n * @returns {!Long} Quotient\n */\n// LongPrototype.div = LongPrototype.divide;\n/**\n * Returns this Long modulo the specified.\n * @this {!Long}\n * @param {!Long|number|string} divisor Divisor\n * @returns {!Long} Remainder\n */\nexport function modulo($this, divisor) {\n    if (!isLong(divisor))\n        divisor = fromValue(divisor);\n    // use wasm support if present\n    if (wasm) {\n        var low = ($this.unsigned ? wasm.rem_u : wasm.rem_s)($this.low, $this.high, divisor.low, divisor.high);\n        return fromBits(low, wasm.get_high(), $this.unsigned);\n    }\n    return subtract($this, multiply(divide($this, divisor), divisor));\n}\n;\n/**\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\n * @function\n * @param {!Long|number|string} divisor Divisor\n * @returns {!Long} Remainder\n */\n// LongPrototype.mod = LongPrototype.modulo;\n/**\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\n * @function\n * @param {!Long|number|string} divisor Divisor\n * @returns {!Long} Remainder\n */\n// LongPrototype.rem = LongPrototype.modulo;\n/**\n * Returns the bitwise NOT of this Long.\n * @this {!Long}\n * @returns {!Long}\n */\nexport function not($this) {\n    return fromBits(~$this.low, ~$this.high, $this.unsigned);\n}\n;\n/**\n * Returns the bitwise AND of this Long and the specified.\n * @this {!Long}\n * @param {!Long|number|string} other Other Long\n * @returns {!Long}\n */\nexport function and($this, other) {\n    if (!isLong(other))\n        other = fromValue(other);\n    return fromBits($this.low & other.low, $this.high & other.high, $this.unsigned);\n}\n;\n/**\n * Returns the bitwise OR of this Long and the specified.\n * @this {!Long}\n * @param {!Long|number|string} other Other Long\n * @returns {!Long}\n */\nexport function or($this, other) {\n    if (!isLong(other))\n        other = fromValue(other);\n    return fromBits($this.low | other.low, $this.high | other.high, $this.unsigned);\n}\n;\n/**\n * Returns the bitwise XOR of this Long and the given one.\n * @this {!Long}\n * @param {!Long|number|string} other Other Long\n * @returns {!Long}\n */\nexport function xor($this, other) {\n    if (!isLong(other))\n        other = fromValue(other);\n    return fromBits($this.low ^ other.low, $this.high ^ other.high, $this.unsigned);\n}\n;\n/**\n * Returns this Long with bits shifted to the left by the given amount.\n * @this {!Long}\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\nexport function shiftLeft($this, numBits) {\n    if (isLong(numBits))\n        numBits = toInt(numBits);\n    if ((numBits &= 63) === 0)\n        return $this;\n    else if (numBits < 32)\n        return fromBits($this.low << numBits, ($this.high << numBits) | ($this.low >>> (32 - numBits)), $this.unsigned);\n    else\n        return fromBits(0, $this.low << (numBits - 32), $this.unsigned);\n}\n;\n/**\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\n * @function\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\n// LongPrototype.shl = LongPrototype.shiftLeft;\n/**\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\n * @this {!Long}\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\nexport function shiftRight($this, numBits) {\n    if (isLong(numBits))\n        numBits = toInt(numBits);\n    if ((numBits &= 63) === 0)\n        return $this;\n    else if (numBits < 32)\n        return fromBits(($this.low >>> numBits) | ($this.high << (32 - numBits)), $this.high >> numBits, $this.unsigned);\n    else\n        return fromBits($this.high >> (numBits - 32), $this.high >= 0 ? 0 : -1, $this.unsigned);\n}\n;\n/**\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\n * @function\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\n// LongPrototype.shr = LongPrototype.shiftRight;\n/**\n * Returns this Long with bits logically shifted to the right by the given amount.\n * @this {!Long}\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\nexport function shiftRightUnsigned($this, numBits) {\n    if (isLong(numBits))\n        numBits = toInt(numBits);\n    numBits &= 63;\n    if (numBits === 0)\n        return $this;\n    else {\n        var high = $this.high;\n        if (numBits < 32) {\n            var low = $this.low;\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, $this.unsigned);\n        }\n        else if (numBits === 32)\n            return fromBits(high, 0, $this.unsigned);\n        else\n            return fromBits(high >>> (numBits - 32), 0, $this.unsigned);\n    }\n}\n;\n/**\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\n * @function\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\n// LongPrototype.shru = LongPrototype.shiftRightUnsigned;\n/**\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\n * @function\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\n// LongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\n/**\n * Returns this Long with bits rotated to the left by the given amount.\n * @this {!Long}\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Rotated Long\n */\nexport const rotateLeft = function rotateLeft(numBits) {\n    var b;\n    if (isLong(numBits))\n        numBits = numBits.toInt();\n    if ((numBits &= 63) === 0)\n        return this;\n    if (numBits === 32)\n        return fromBits(this.high, this.low, this.unsigned);\n    if (numBits < 32) {\n        b = (32 - numBits);\n        return fromBits(((this.low << numBits) | (this.high >>> b)), ((this.high << numBits) | (this.low >>> b)), this.unsigned);\n    }\n    numBits -= 32;\n    b = (32 - numBits);\n    return fromBits(((this.high << numBits) | (this.low >>> b)), ((this.low << numBits) | (this.high >>> b)), this.unsigned);\n};\n/**\n * Returns this Long with bits rotated to the left by the given amount. This is an alias of {@link Long#rotateLeft}.\n * @function\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Rotated Long\n */\n// LongPrototype.rotl = LongPrototype.rotateLeft;\n/**\n * Returns this Long with bits rotated to the right by the given amount.\n * @this {!Long}\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Rotated Long\n */\nexport const rotateRight = function rotateRight(numBits) {\n    var b;\n    if (isLong(numBits))\n        numBits = numBits.toInt();\n    if ((numBits &= 63) === 0)\n        return this;\n    if (numBits === 32)\n        return fromBits(this.high, this.low, this.unsigned);\n    if (numBits < 32) {\n        b = (32 - numBits);\n        return fromBits(((this.high << b) | (this.low >>> numBits)), ((this.low << b) | (this.high >>> numBits)), this.unsigned);\n    }\n    numBits -= 32;\n    b = (32 - numBits);\n    return fromBits(((this.low << b) | (this.high >>> numBits)), ((this.high << b) | (this.low >>> numBits)), this.unsigned);\n};\n/**\n * Returns this Long with bits rotated to the right by the given amount. This is an alias of {@link Long#rotateRight}.\n * @function\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Rotated Long\n */\n// LongPrototype.rotr = LongPrototype.rotateRight;\n/**\n * Converts this Long to signed.\n * @this {!Long}\n * @returns {!Long} Signed long\n */\nexport function toSigned($this) {\n    if (!$this.unsigned)\n        return $this;\n    return fromBits($this.low, $this.high, false);\n}\n;\n/**\n * Converts this Long to unsigned.\n * @this {!Long}\n * @returns {!Long} Unsigned long\n */\nexport function toUnsigned($this) {\n    if ($this.unsigned)\n        return $this;\n    return fromBits($this.low, $this.high, true);\n}\n;\n/**\n * Converts this Long to its byte representation.\n * @param {boolean=} le Whether little or big endian, defaults to big endian\n * @this {!Long}\n * @returns {!Array.<number>} Byte representation\n */\nexport function toBytes($this, le) {\n    return le ? toBytesLE($this) : toBytesBE($this);\n}\n;\n/**\n * Converts this Long to its little endian byte representation.\n * @this {!Long}\n * @returns {!Array.<number>} Little endian byte representation\n */\nexport function toBytesLE($this) {\n    var hi = $this.high, lo = $this.low;\n    return [\n        lo & 0xff,\n        lo >>> 8 & 0xff,\n        lo >>> 16 & 0xff,\n        lo >>> 24,\n        hi & 0xff,\n        hi >>> 8 & 0xff,\n        hi >>> 16 & 0xff,\n        hi >>> 24\n    ];\n}\n;\n/**\n * Converts this Long to its big endian byte representation.\n * @this {!Long}\n * @returns {!Array.<number>} Big endian byte representation\n */\nexport function toBytesBE($this) {\n    var hi = $this.high, lo = $this.low;\n    return [\n        hi >>> 24,\n        hi >>> 16 & 0xff,\n        hi >>> 8 & 0xff,\n        hi & 0xff,\n        lo >>> 24,\n        lo >>> 16 & 0xff,\n        lo >>> 8 & 0xff,\n        lo & 0xff\n    ];\n}\n;\n/**\n * Creates a Long from its byte representation.\n * @param {!Array.<number>} bytes Byte representation\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @param {boolean=} le Whether little or big endian, defaults to big endian\n * @returns {Long} The corresponding Long value\n */\nexport function fromBytes(bytes, unsigned, le) {\n    return le ? fromBytesLE(bytes, unsigned) : fromBytesBE(bytes, unsigned);\n}\n;\n/**\n * Creates a Long from its little endian byte representation.\n * @param {!Array.<number>} bytes Little endian byte representation\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @returns {Long} The corresponding Long value\n */\nexport function fromBytesLE(bytes, unsigned) {\n    return new Long(bytes[0] |\n        bytes[1] << 8 |\n        bytes[2] << 16 |\n        bytes[3] << 24, bytes[4] |\n        bytes[5] << 8 |\n        bytes[6] << 16 |\n        bytes[7] << 24, unsigned);\n}\n;\n/**\n * Creates a Long from its big endian byte representation.\n * @param {!Array.<number>} bytes Big endian byte representation\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @returns {Long} The corresponding Long value\n */\nexport function fromBytesBE(bytes, unsigned) {\n    return new Long(bytes[4] << 24 |\n        bytes[5] << 16 |\n        bytes[6] << 8 |\n        bytes[7], bytes[0] << 24 |\n        bytes[1] << 16 |\n        bytes[2] << 8 |\n        bytes[3], unsigned);\n}\n;\n","import { isValid } from \"./Int32.js\";\nimport * as LongLib from \"./lib/long.js\";\nexport default LongLib.Long;\nexport const get_Zero = LongLib.ZERO;\nexport const get_One = LongLib.ONE;\nexport const op_Addition = LongLib.add;\nexport const op_Subtraction = LongLib.subtract;\nexport const op_Multiply = LongLib.multiply;\nexport const op_Division = LongLib.divide;\nexport const op_Modulus = LongLib.modulo;\nexport const op_UnaryNegation = LongLib.negate;\nexport const op_LeftShift = LongLib.shiftLeft;\nexport const op_RightShift = LongLib.shiftRight;\nexport const op_RightShiftUnsigned = LongLib.shiftRightUnsigned;\nexport const op_BitwiseAnd = LongLib.and;\nexport const op_BitwiseOr = LongLib.or;\nexport const op_ExclusiveOr = LongLib.xor;\nexport const op_LogicalNot = LongLib.not;\nexport const op_LessThan = LongLib.lessThan;\nexport const op_LessThanOrEqual = LongLib.lessThanOrEqual;\nexport const op_GreaterThan = LongLib.greaterThan;\nexport const op_GreaterThanOrEqual = LongLib.greaterThanOrEqual;\nexport const op_Equality = LongLib.equals;\nexport const op_Inequality = LongLib.notEquals;\nexport const equals = LongLib.equals;\nexport const compare = LongLib.compare;\nexport const fromInt = LongLib.fromInt;\nexport const fromBits = LongLib.fromBits;\nexport const fromBytes = LongLib.fromBytes;\nexport const fromNumber = LongLib.fromNumber;\nexport const fromString = LongLib.fromString;\nexport const fromValue = LongLib.fromValue;\nexport const toInt = LongLib.toInt;\nexport const toBytes = LongLib.toBytes;\nexport const toNumber = LongLib.toNumber;\nexport const toString = LongLib.toString;\nexport const getLowBits = LongLib.getLowBits;\nexport const getHighBits = LongLib.getHighBits;\nexport const getLowBitsUnsigned = LongLib.getLowBitsUnsigned;\nexport const getHighBitsUnsigned = LongLib.getHighBitsUnsigned;\nfunction getMaxValue(unsigned, radix, isNegative) {\n    switch (radix) {\n        case 2: return unsigned ?\n            \"1111111111111111111111111111111111111111111111111111111111111111\" :\n            (isNegative ? \"1000000000000000000000000000000000000000000000000000000000000000\"\n                : \"111111111111111111111111111111111111111111111111111111111111111\");\n        case 8: return unsigned ?\n            \"1777777777777777777777\" :\n            (isNegative ? \"1000000000000000000000\" : \"777777777777777777777\");\n        case 10: return unsigned ?\n            \"18446744073709551615\" :\n            (isNegative ? \"9223372036854775808\" : \"9223372036854775807\");\n        case 16: return unsigned ?\n            \"FFFFFFFFFFFFFFFF\" :\n            (isNegative ? \"8000000000000000\" : \"7FFFFFFFFFFFFFFF\");\n        default: throw new Error(\"Invalid radix.\");\n    }\n}\nexport function abs(x) {\n    if (!x.unsigned && LongLib.isNegative(x)) {\n        return op_UnaryNegation(x);\n    }\n    else {\n        return x;\n    }\n}\nexport function fromInteger(value, unsigned, kind) {\n    let x = value;\n    let xh = 0;\n    switch (kind) {\n        case 0:\n            x = value << 24 >> 24;\n            xh = x;\n            break;\n        case 4:\n            x = value << 24 >>> 24;\n            break;\n        case 1:\n            x = value << 16 >> 16;\n            xh = x;\n            break;\n        case 5:\n            x = value << 16 >>> 16;\n            break;\n        case 2:\n            x = value >> 0;\n            xh = x;\n            break;\n        case 6:\n            x = value >>> 0;\n            break;\n    }\n    return LongLib.fromBits(x, xh >> 31, unsigned);\n}\nexport function parse(str, style, unsigned, _bitsize, radix) {\n    const res = isValid(str, style, radix);\n    if (res != null) {\n        const lessOrEqual = (x, y) => {\n            const len = Math.max(x.length, y.length);\n            return x.padStart(len, \"0\") <= y.padStart(len, \"0\");\n        };\n        const isNegative = res.sign === \"-\";\n        const maxValue = getMaxValue(unsigned || res.radix !== 10, res.radix, isNegative);\n        if (lessOrEqual(res.digits.toUpperCase(), maxValue)) {\n            str = isNegative ? res.sign + res.digits : res.digits;\n            return LongLib.fromString(str, unsigned, res.radix);\n        }\n    }\n    throw new Error(\"Input string was not in a correct format.\");\n}\nexport function tryParse(str, style, unsigned, bitsize, defValue) {\n    try {\n        defValue.contents = parse(str, style, unsigned, bitsize);\n        return true;\n    }\n    catch (_a) {\n        return false;\n    }\n}\nexport function unixEpochMillisecondsToTicks(ms, offset) {\n    return op_Multiply(op_Addition(op_Addition(LongLib.fromNumber(ms), 62135596800000), offset), 10000);\n}\nexport function ticksToUnixEpochMilliseconds(ticks) {\n    return LongLib.toNumber(op_Subtraction(op_Division(ticks, 10000), 62135596800000));\n}\n// export function makeRangeStepFunction(step: Long, last: Long, unsigned: boolean) {\n//   const stepComparedWithZero = LongLib.compare(step, unsigned ? LongLib.UZERO : LongLib.ZERO);\n//   if (stepComparedWithZero === 0) {\n//     throw new Error(\"The step of a range cannot be zero\");\n//   }\n//   const stepGreaterThanZero = stepComparedWithZero > 0;\n//   return (x: Long) => {\n//     const comparedWithLast = LongLib.compare(x, last);\n//     if ((stepGreaterThanZero && comparedWithLast <= 0)\n//       || (!stepGreaterThanZero && comparedWithLast >= 0)) {\n//       return [x, op_Addition(x, step)];\n//     } else {\n//       return undefined;\n//     }\n//   };\n// }\n","/**\n * DateTimeOffset functions.\n *\n * Note: Date instances are always DateObjects in local\n * timezone (because JS dates are all kinds of messed up).\n * A local date returns UTC epoc when `.getTime()` is called.\n *\n * Basically; invariant: date.getTime() always return UTC time.\n */\nimport { fromValue, ticksToUnixEpochMilliseconds, unixEpochMillisecondsToTicks } from \"./Long.js\";\nimport { compareDates, dateOffset, padWithZeros } from \"./Util.js\";\nexport const offsetRegex = /(?:Z|[+-](\\d+):?([0-5]?\\d)?)\\s*$/;\nexport function dateOffsetToString(offset) {\n    const isMinus = offset < 0;\n    offset = Math.abs(offset);\n    const hours = ~~(offset / 3600000);\n    const minutes = (offset % 3600000) / 60000;\n    return (isMinus ? \"-\" : \"+\") +\n        padWithZeros(hours, 2) + \":\" +\n        padWithZeros(minutes, 2);\n}\nexport function dateToHalfUTCString(date, half) {\n    const str = date.toISOString();\n    return half === \"first\"\n        ? str.substring(0, str.indexOf(\"T\"))\n        : str.substring(str.indexOf(\"T\") + 1, str.length - 1);\n}\nfunction dateToISOString(d, utc) {\n    if (utc) {\n        return d.toISOString();\n    }\n    else {\n        // JS Date is always local\n        const printOffset = d.kind == null ? true : d.kind === 2 /* Local */;\n        return padWithZeros(d.getFullYear(), 4) + \"-\" +\n            padWithZeros(d.getMonth() + 1, 2) + \"-\" +\n            padWithZeros(d.getDate(), 2) + \"T\" +\n            padWithZeros(d.getHours(), 2) + \":\" +\n            padWithZeros(d.getMinutes(), 2) + \":\" +\n            padWithZeros(d.getSeconds(), 2) + \".\" +\n            padWithZeros(d.getMilliseconds(), 3) +\n            (printOffset ? dateOffsetToString(d.getTimezoneOffset() * -60000) : \"\");\n    }\n}\nfunction dateToISOStringWithOffset(dateWithOffset, offset) {\n    const str = dateWithOffset.toISOString();\n    return str.substring(0, str.length - 1) + dateOffsetToString(offset);\n}\nfunction dateToStringWithCustomFormat(date, format, utc) {\n    return format.replace(/(\\w)\\1*/g, (match) => {\n        let rep = Number.NaN;\n        switch (match.substring(0, 1)) {\n            case \"y\":\n                const y = utc ? date.getUTCFullYear() : date.getFullYear();\n                rep = match.length < 4 ? y % 100 : y;\n                break;\n            case \"M\":\n                rep = (utc ? date.getUTCMonth() : date.getMonth()) + 1;\n                break;\n            case \"d\":\n                rep = utc ? date.getUTCDate() : date.getDate();\n                break;\n            case \"H\":\n                rep = utc ? date.getUTCHours() : date.getHours();\n                break;\n            case \"h\":\n                const h = utc ? date.getUTCHours() : date.getHours();\n                rep = h > 12 ? h % 12 : h;\n                break;\n            case \"m\":\n                rep = utc ? date.getUTCMinutes() : date.getMinutes();\n                break;\n            case \"s\":\n                rep = utc ? date.getUTCSeconds() : date.getSeconds();\n                break;\n            case \"f\":\n                rep = utc ? date.getUTCMilliseconds() : date.getMilliseconds();\n                break;\n        }\n        if (Number.isNaN(rep)) {\n            return match;\n        }\n        else {\n            return (rep < 10 && match.length > 1) ? \"0\" + rep : \"\" + rep;\n        }\n    });\n}\nfunction dateToStringWithOffset(date, format) {\n    var _a, _b, _c;\n    const d = new Date(date.getTime() + ((_a = date.offset) !== null && _a !== void 0 ? _a : 0));\n    if (typeof format !== \"string\") {\n        return d.toISOString().replace(/\\.\\d+/, \"\").replace(/[A-Z]|\\.\\d+/g, \" \") + dateOffsetToString(((_b = date.offset) !== null && _b !== void 0 ? _b : 0));\n    }\n    else if (format.length === 1) {\n        switch (format) {\n            case \"D\":\n            case \"d\": return dateToHalfUTCString(d, \"first\");\n            case \"T\":\n            case \"t\": return dateToHalfUTCString(d, \"second\");\n            case \"O\":\n            case \"o\": return dateToISOStringWithOffset(d, ((_c = date.offset) !== null && _c !== void 0 ? _c : 0));\n            default: throw new Error(\"Unrecognized Date print format\");\n        }\n    }\n    else {\n        return dateToStringWithCustomFormat(d, format, true);\n    }\n}\nfunction dateToStringWithKind(date, format) {\n    const utc = date.kind === 1 /* UTC */;\n    if (typeof format !== \"string\") {\n        return utc ? date.toUTCString() : date.toLocaleString();\n    }\n    else if (format.length === 1) {\n        switch (format) {\n            case \"D\":\n            case \"d\":\n                return utc ? dateToHalfUTCString(date, \"first\") : date.toLocaleDateString();\n            case \"T\":\n            case \"t\":\n                return utc ? dateToHalfUTCString(date, \"second\") : date.toLocaleTimeString();\n            case \"O\":\n            case \"o\":\n                return dateToISOString(date, utc);\n            default:\n                throw new Error(\"Unrecognized Date print format\");\n        }\n    }\n    else {\n        return dateToStringWithCustomFormat(date, format, utc);\n    }\n}\nexport function toString(date, format, _provider) {\n    return date.offset != null\n        ? dateToStringWithOffset(date, format)\n        : dateToStringWithKind(date, format);\n}\nexport function DateTime(value, kind) {\n    const d = new Date(value);\n    d.kind = (kind == null ? 0 /* Unspecified */ : kind) | 0;\n    return d;\n}\nexport function fromTicks(ticks, kind) {\n    ticks = fromValue(ticks);\n    kind = kind != null ? kind : 0 /* Unspecified */;\n    let date = DateTime(ticksToUnixEpochMilliseconds(ticks), kind);\n    // Ticks are local to offset (in this case, either UTC or Local/Unknown).\n    // If kind is anything but UTC, that means that the tick number was not\n    // in utc, thus getTime() cannot return UTC, and needs to be shifted.\n    if (kind !== 1 /* UTC */) {\n        date = DateTime(date.getTime() - dateOffset(date), kind);\n    }\n    return date;\n}\nexport function fromDateTimeOffset(date, kind) {\n    var _a;\n    switch (kind) {\n        case 1 /* UTC */: return DateTime(date.getTime(), 1 /* UTC */);\n        case 2 /* Local */: return DateTime(date.getTime(), 2 /* Local */);\n        default:\n            const d = DateTime(date.getTime() + ((_a = date.offset) !== null && _a !== void 0 ? _a : 0), kind);\n            return DateTime(d.getTime() - dateOffset(d), kind);\n    }\n}\nexport function getTicks(date) {\n    return unixEpochMillisecondsToTicks(date.getTime(), dateOffset(date));\n}\nexport function minValue() {\n    // This is \"0001-01-01T00:00:00.000Z\", actual JS min value is -8640000000000000\n    return DateTime(-62135596800000, 0 /* Unspecified */);\n}\nexport function maxValue() {\n    // This is \"9999-12-31T23:59:59.999Z\", actual JS max value is 8640000000000000\n    return DateTime(253402300799999, 0 /* Unspecified */);\n}\nexport function parseRaw(input) {\n    if (input === null) {\n        throw new Error(\"Value cannot be null when parsing DateTime\");\n    }\n    if (input.trim() === \"\") {\n        throw new Error(\"An empty string is not recognized as a valid DateTime\");\n    }\n    let date = new Date(input);\n    if (isNaN(date.getTime())) {\n        // Try to check strings JS Date cannot parse (see #1045, #1422)\n        // tslint:disable-next-line:max-line-length\n        const m = /^\\s*(\\d+[^\\w\\s:]\\d+[^\\w\\s:]\\d+)?\\s*(\\d+:\\d+(?::\\d+(?:\\.\\d+)?)?)?\\s*([AaPp][Mm])?\\s*([+-]\\d+(?::\\d+)?)?\\s*$/.exec(input);\n        if (m != null) {\n            let baseDate;\n            let timeInSeconds = 0;\n            if (m[2] != null) {\n                const timeParts = m[2].split(\":\");\n                timeInSeconds =\n                    parseInt(timeParts[0], 10) * 3600 +\n                        parseInt(timeParts[1] || \"0\", 10) * 60 +\n                        parseFloat(timeParts[2] || \"0\");\n                if (m[3] != null && m[3].toUpperCase() === \"PM\") {\n                    timeInSeconds += 720;\n                }\n            }\n            if (m[4] != null) { // There's an offset, parse as UTC\n                if (m[1] != null) {\n                    baseDate = new Date(m[1] + \" UTC\");\n                }\n                else {\n                    const d = new Date();\n                    baseDate = new Date(d.getUTCFullYear() + \"/\" + (d.getUTCMonth() + 1) + \"/\" + d.getUTCDate());\n                }\n                const offsetParts = m[4].substr(1).split(\":\");\n                let offsetInMinutes = parseInt(offsetParts[0], 10) * 60 + parseInt(offsetParts[1] || \"0\", 10);\n                if (m[4][0] === \"+\") {\n                    offsetInMinutes *= -1;\n                }\n                timeInSeconds += offsetInMinutes * 60;\n            }\n            else {\n                if (m[1] != null) {\n                    baseDate = new Date(m[1]);\n                }\n                else {\n                    const d = new Date();\n                    baseDate = new Date(d.getFullYear() + \"/\" + (d.getMonth() + 1) + \"/\" + d.getDate());\n                }\n            }\n            date = new Date(baseDate.getTime() + timeInSeconds * 1000);\n            // correct for daylight savings time\n            date = new Date(date.getTime() + (date.getTimezoneOffset() - baseDate.getTimezoneOffset()) * 60000);\n        }\n        else {\n            throw new Error(\"The string is not a valid Date.\");\n        }\n    }\n    return date;\n}\nexport function parse(str, detectUTC = false) {\n    const date = parseRaw(str);\n    const offset = offsetRegex.exec(str);\n    // .NET always parses DateTime as Local if there's offset info (even \"Z\")\n    // Newtonsoft.Json uses UTC if the offset is \"Z\"\n    const kind = offset != null\n        ? (detectUTC && offset[0] === \"Z\" ? 1 /* UTC */ : 2 /* Local */)\n        : 0 /* Unspecified */;\n    return DateTime(date.getTime(), kind);\n}\nexport function tryParse(v, defValue) {\n    try {\n        defValue.contents = parse(v);\n        return true;\n    }\n    catch (_err) {\n        return false;\n    }\n}\nexport function create(year, month, day, h = 0, m = 0, s = 0, ms = 0, kind) {\n    const dateValue = kind === 1 /* UTC */\n        ? Date.UTC(year, month - 1, day, h, m, s, ms)\n        : new Date(year, month - 1, day, h, m, s, ms).getTime();\n    if (isNaN(dateValue)) {\n        throw new Error(\"The parameters describe an unrepresentable Date.\");\n    }\n    const date = DateTime(dateValue, kind);\n    if (year <= 99) {\n        date.setFullYear(year, month - 1, day);\n    }\n    return date;\n}\nexport function now() {\n    return DateTime(Date.now(), 2 /* Local */);\n}\nexport function utcNow() {\n    return DateTime(Date.now(), 1 /* UTC */);\n}\nexport function today() {\n    return date(now());\n}\nexport function isLeapYear(year) {\n    return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;\n}\nexport function daysInMonth(year, month) {\n    return month === 2\n        ? (isLeapYear(year) ? 29 : 28)\n        : (month >= 8 ? (month % 2 === 0 ? 31 : 30) : (month % 2 === 0 ? 30 : 31));\n}\nexport function toUniversalTime(date) {\n    return date.kind === 1 /* UTC */ ? date : DateTime(date.getTime(), 1 /* UTC */);\n}\nexport function toLocalTime(date) {\n    return date.kind === 2 /* Local */ ? date : DateTime(date.getTime(), 2 /* Local */);\n}\nexport function specifyKind(d, kind) {\n    return create(year(d), month(d), day(d), hour(d), minute(d), second(d), millisecond(d), kind);\n}\nexport function timeOfDay(d) {\n    return hour(d) * 3600000\n        + minute(d) * 60000\n        + second(d) * 1000\n        + millisecond(d);\n}\nexport function date(d) {\n    return create(year(d), month(d), day(d), 0, 0, 0, 0, d.kind);\n}\nexport function day(d) {\n    return d.kind === 1 /* UTC */ ? d.getUTCDate() : d.getDate();\n}\nexport function hour(d) {\n    return d.kind === 1 /* UTC */ ? d.getUTCHours() : d.getHours();\n}\nexport function millisecond(d) {\n    return d.kind === 1 /* UTC */ ? d.getUTCMilliseconds() : d.getMilliseconds();\n}\nexport function minute(d) {\n    return d.kind === 1 /* UTC */ ? d.getUTCMinutes() : d.getMinutes();\n}\nexport function month(d) {\n    return (d.kind === 1 /* UTC */ ? d.getUTCMonth() : d.getMonth()) + 1;\n}\nexport function second(d) {\n    return d.kind === 1 /* UTC */ ? d.getUTCSeconds() : d.getSeconds();\n}\nexport function year(d) {\n    return d.kind === 1 /* UTC */ ? d.getUTCFullYear() : d.getFullYear();\n}\nexport function dayOfWeek(d) {\n    return d.kind === 1 /* UTC */ ? d.getUTCDay() : d.getDay();\n}\nexport function dayOfYear(d) {\n    const _year = year(d);\n    const _month = month(d);\n    let _day = day(d);\n    for (let i = 1; i < _month; i++) {\n        _day += daysInMonth(_year, i);\n    }\n    return _day;\n}\nexport function add(d, ts) {\n    const newDate = DateTime(d.getTime() + ts, d.kind);\n    if (d.kind === 2 /* Local */) {\n        const oldTzOffset = d.getTimezoneOffset();\n        const newTzOffset = newDate.getTimezoneOffset();\n        return oldTzOffset !== newTzOffset\n            ? DateTime(newDate.getTime() + (newTzOffset - oldTzOffset) * 60000, d.kind)\n            : newDate;\n    }\n    else {\n        return newDate;\n    }\n}\nexport function addDays(d, v) {\n    return add(d, v * 86400000);\n}\nexport function addHours(d, v) {\n    return add(d, v * 3600000);\n}\nexport function addMinutes(d, v) {\n    return add(d, v * 60000);\n}\nexport function addSeconds(d, v) {\n    return add(d, v * 1000);\n}\nexport function addMilliseconds(d, v) {\n    return add(d, v);\n}\nexport function addYears(d, v) {\n    const newMonth = month(d);\n    const newYear = year(d) + v;\n    const _daysInMonth = daysInMonth(newYear, newMonth);\n    const newDay = Math.min(_daysInMonth, day(d));\n    return create(newYear, newMonth, newDay, hour(d), minute(d), second(d), millisecond(d), d.kind);\n}\nexport function addMonths(d, v) {\n    let newMonth = month(d) + v;\n    let newMonth_ = 0;\n    let yearOffset = 0;\n    if (newMonth > 12) {\n        newMonth_ = newMonth % 12;\n        yearOffset = Math.floor(newMonth / 12);\n        newMonth = newMonth_;\n    }\n    else if (newMonth < 1) {\n        newMonth_ = 12 + newMonth % 12;\n        yearOffset = Math.floor(newMonth / 12) + (newMonth_ === 12 ? -1 : 0);\n        newMonth = newMonth_;\n    }\n    const newYear = year(d) + yearOffset;\n    const _daysInMonth = daysInMonth(newYear, newMonth);\n    const newDay = Math.min(_daysInMonth, day(d));\n    return create(newYear, newMonth, newDay, hour(d), minute(d), second(d), millisecond(d), d.kind);\n}\nexport function subtract(d, that) {\n    return typeof that === \"number\"\n        ? add(d, -that)\n        : d.getTime() - that.getTime();\n}\nexport function toLongDateString(d) {\n    return d.toDateString();\n}\nexport function toShortDateString(d) {\n    return d.toLocaleDateString();\n}\nexport function toLongTimeString(d) {\n    return d.toLocaleTimeString();\n}\nexport function toShortTimeString(d) {\n    return d.toLocaleTimeString().replace(/:\\d\\d(?!:)/, \"\");\n}\nexport function equals(d1, d2) {\n    return d1.getTime() === d2.getTime();\n}\nexport const compare = compareDates;\nexport const compareTo = compareDates;\nexport function op_Addition(x, y) {\n    return add(x, y);\n}\nexport function op_Subtraction(x, y) {\n    return subtract(x, y);\n}\nexport function isDaylightSavingTime(x) {\n    const jan = new Date(x.getFullYear(), 0, 1);\n    const jul = new Date(x.getFullYear(), 6, 1);\n    return isDST(jan.getTimezoneOffset(), jul.getTimezoneOffset(), x.getTimezoneOffset());\n}\nfunction isDST(janOffset, julOffset, tOffset) {\n    return Math.min(janOffset, julOffset) === tOffset;\n}\nexport default DateTime;\n","export function create(pattern, options = 0) {\n    // Supported RegexOptions\n    // * IgnoreCase:  0x0001\n    // * Multiline:   0x0002\n    // * Singleline:  0x0010\n    // * ECMAScript:  0x0100 (ignored)\n    if ((options & ~(1 ^ 2 ^ 16 ^ 256)) !== 0) {\n        throw new Error(\"RegexOptions only supports: IgnoreCase, Multiline, Singleline and ECMAScript\");\n    }\n    let flags = \"g\";\n    flags += options & 1 ? \"i\" : \"\"; // 0x0001 RegexOptions.IgnoreCase\n    flags += options & 2 ? \"m\" : \"\";\n    flags += options & 16 ? \"s\" : \"\";\n    return new RegExp(pattern, flags);\n}\n// From http://stackoverflow.com/questions/3446170/escape-string-for-use-in-javascript-regex\nexport function escape(str) {\n    return str.replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, \"\\\\$&\");\n}\nexport function unescape(str) {\n    return str.replace(/\\\\([\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|])/g, \"$1\");\n}\nexport function isMatch(str, pattern, options = 0) {\n    let reg;\n    reg = str instanceof RegExp\n        ? (reg = str, str = pattern, reg.lastIndex = options, reg)\n        : reg = create(pattern, options);\n    return reg.test(str);\n}\nexport function match(str, pattern, options = 0) {\n    let reg;\n    reg = str instanceof RegExp\n        ? (reg = str, str = pattern, reg.lastIndex = options, reg)\n        : reg = create(pattern, options);\n    return reg.exec(str);\n}\nexport function matches(str, pattern, options = 0) {\n    let reg;\n    reg = str instanceof RegExp\n        ? (reg = str, str = pattern, reg.lastIndex = options, reg)\n        : reg = create(pattern, options);\n    if (!reg.global) {\n        throw new Error(\"Non-global RegExp\"); // Prevent infinite loop\n    }\n    let m = reg.exec(str);\n    const matches = [];\n    while (m !== null) {\n        matches.push(m);\n        m = reg.exec(str);\n    }\n    return matches;\n}\nexport function options(reg) {\n    let options = 256; // ECMAScript\n    options |= reg.ignoreCase ? 1 : 0;\n    options |= reg.multiline ? 2 : 0;\n    return options;\n}\nexport function replace(reg, input, replacement, limit, offset = 0) {\n    function replacer() {\n        let res = arguments[0];\n        if (limit) {\n            limit--;\n            const match = [];\n            const len = arguments.length;\n            // arguments: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace#specifying_a_function_as_a_parameter\n            // * match: matched substring\n            // * p1, p2, ...: nth capture group string\n            // * offset: offset of matched substring\n            // * string: whole string examined\n            // * groups: named capturing groups\n            //           ONLY if regex contains a named capture group AND browser supports named groups\n            // -> last element can be groups OR input string\n            // -> check if last element is string\n            const withGroups = typeof arguments[len - 1] !== \"string\";\n            let pLast = withGroups ? len - 3 : len - 2;\n            for (let i = 0; i < pLast; i++) {\n                match.push(arguments[i]);\n            }\n            match.index = arguments[pLast++];\n            match.input = arguments[pLast++];\n            if (withGroups) {\n                match.groups = arguments[pLast];\n            }\n            res = replacement(match);\n        }\n        return res;\n    }\n    if (typeof reg === \"string\") {\n        const tmp = reg;\n        reg = create(input, limit !== null && limit !== void 0 ? limit : 0);\n        input = tmp;\n        limit = undefined;\n    }\n    if (typeof replacement === \"function\") {\n        limit = limit == null ? -1 : limit;\n        return input.substring(0, offset) + input.substring(offset).replace(reg, replacer);\n    }\n    else {\n        replacement =\n            replacement\n                // $0 doesn't work with JS regex, see #1155\n                .replace(/\\$0/g, (_s) => \"$&\")\n                // named groups in replacement are `${name}` in .Net, but `$<name>` in JS (in regex: groups are `(?<name>...)` in both)\n                .replace(/\\${([^}]+)}/g, \"\\$<$1>\");\n        if (limit != null) {\n            let m;\n            const sub1 = input.substring(offset);\n            const _matches = matches(reg, sub1);\n            const sub2 = matches.length > limit ? (m = _matches[limit - 1], sub1.substring(0, m.index + m[0].length)) : sub1;\n            return input.substring(0, offset) + sub2.replace(reg, replacement)\n                + input.substring(offset + sub2.length);\n        }\n        else {\n            return input.replace(reg, replacement);\n        }\n    }\n}\nexport function split(reg, input, limit, offset = 0) {\n    if (typeof reg === \"string\") {\n        const tmp = reg;\n        reg = create(input, limit !== null && limit !== void 0 ? limit : 0);\n        input = tmp;\n        limit = undefined;\n    }\n    input = input.substring(offset);\n    return input.split(reg, limit);\n}\n","import { toString as dateToString } from \"./Date.js\";\nimport { compare as numericCompare, isNumeric, multiply, toExponential, toFixed, toHex, toPrecision } from \"./Numeric.js\";\nimport { escape } from \"./RegExp.js\";\nimport { toString } from \"./Types.js\";\nconst fsFormatRegExp = /(^|[^%])%([0+\\- ]*)(\\*|\\d+)?(?:\\.(\\d+))?(\\w)/g;\nconst interpolateRegExp = /(?:(^|[^%])%([0+\\- ]*)(\\d+)?(?:\\.(\\d+))?(\\w))?%P\\(\\)/g;\nconst formatRegExp = /\\{(\\d+)(,-?\\d+)?(?:\\:([a-zA-Z])(\\d{0,2})|\\:(.+?))?\\}/g;\nfunction isLessThan(x, y) {\n    return numericCompare(x, y) < 0;\n}\nfunction cmp(x, y, ic) {\n    function isIgnoreCase(i) {\n        return i === true ||\n            i === 1 /* CurrentCultureIgnoreCase */ ||\n            i === 3 /* InvariantCultureIgnoreCase */ ||\n            i === 5 /* OrdinalIgnoreCase */;\n    }\n    function isOrdinal(i) {\n        return i === 4 /* Ordinal */ ||\n            i === 5 /* OrdinalIgnoreCase */;\n    }\n    if (x == null) {\n        return y == null ? 0 : -1;\n    }\n    if (y == null) {\n        return 1;\n    } // everything is bigger than null\n    if (isOrdinal(ic)) {\n        if (isIgnoreCase(ic)) {\n            x = x.toLowerCase();\n            y = y.toLowerCase();\n        }\n        return (x === y) ? 0 : (x < y ? -1 : 1);\n    }\n    else {\n        if (isIgnoreCase(ic)) {\n            x = x.toLocaleLowerCase();\n            y = y.toLocaleLowerCase();\n        }\n        return x.localeCompare(y);\n    }\n}\nexport function compare(...args) {\n    switch (args.length) {\n        case 2: return cmp(args[0], args[1], false);\n        case 3: return cmp(args[0], args[1], args[2]);\n        case 4: return cmp(args[0], args[1], args[2] === true);\n        case 5: return cmp(args[0].substr(args[1], args[4]), args[2].substr(args[3], args[4]), false);\n        case 6: return cmp(args[0].substr(args[1], args[4]), args[2].substr(args[3], args[4]), args[5]);\n        case 7: return cmp(args[0].substr(args[1], args[4]), args[2].substr(args[3], args[4]), args[5] === true);\n        default: throw new Error(\"String.compare: Unsupported number of parameters\");\n    }\n}\nexport function compareOrdinal(x, y) {\n    return cmp(x, y, 4 /* Ordinal */);\n}\nexport function compareTo(x, y) {\n    return cmp(x, y, 0 /* CurrentCulture */);\n}\nexport function startsWith(str, pattern, ic) {\n    if (str.length >= pattern.length) {\n        return cmp(str.substr(0, pattern.length), pattern, ic) === 0;\n    }\n    return false;\n}\nexport function indexOfAny(str, anyOf, ...args) {\n    if (str == null || str === \"\") {\n        return -1;\n    }\n    const startIndex = (args.length > 0) ? args[0] : 0;\n    if (startIndex < 0) {\n        throw new Error(\"Start index cannot be negative\");\n    }\n    const length = (args.length > 1) ? args[1] : str.length - startIndex;\n    if (length < 0) {\n        throw new Error(\"Length cannot be negative\");\n    }\n    if (length > str.length - startIndex) {\n        throw new Error(\"Invalid startIndex and length\");\n    }\n    str = str.substr(startIndex, length);\n    for (const c of anyOf) {\n        const index = str.indexOf(c);\n        if (index > -1) {\n            return index + startIndex;\n        }\n    }\n    return -1;\n}\nexport function printf(input) {\n    return {\n        input,\n        cont: fsFormat(input),\n    };\n}\nexport function interpolate(str, values) {\n    let valIdx = 0;\n    let strIdx = 0;\n    let result = \"\";\n    interpolateRegExp.lastIndex = 0;\n    let match = interpolateRegExp.exec(str);\n    while (match) {\n        // The first group corresponds to the no-escape char (^|[^%]), the actual pattern starts in the next char\n        // Note: we don't use negative lookbehind because some browsers don't support it yet\n        const matchIndex = match.index + (match[1] || \"\").length;\n        result += str.substring(strIdx, matchIndex).replace(/%%/g, \"%\");\n        const [, , flags, padLength, precision, format] = match;\n        result += formatReplacement(values[valIdx++], flags, padLength, precision, format);\n        strIdx = interpolateRegExp.lastIndex;\n        // Likewise we need to move interpolateRegExp.lastIndex one char behind to make sure we match the no-escape char next time\n        interpolateRegExp.lastIndex -= 1;\n        match = interpolateRegExp.exec(str);\n    }\n    result += str.substring(strIdx).replace(/%%/g, \"%\");\n    return result;\n}\nfunction continuePrint(cont, arg) {\n    return typeof arg === \"string\" ? cont(arg) : arg.cont(cont);\n}\nexport function toConsole(arg) {\n    // Don't remove the lambda here, see #1357\n    return continuePrint((x) => console.log(x), arg);\n}\nexport function toConsoleError(arg) {\n    return continuePrint((x) => console.error(x), arg);\n}\nexport function toText(arg) {\n    return continuePrint((x) => x, arg);\n}\nexport function toFail(arg) {\n    return continuePrint((x) => {\n        throw new Error(x);\n    }, arg);\n}\nfunction formatReplacement(rep, flags, padLength, precision, format) {\n    let sign = \"\";\n    flags = flags || \"\";\n    format = format || \"\";\n    if (isNumeric(rep)) {\n        if (format.toLowerCase() !== \"x\") {\n            if (isLessThan(rep, 0)) {\n                rep = multiply(rep, -1);\n                sign = \"-\";\n            }\n            else {\n                if (flags.indexOf(\" \") >= 0) {\n                    sign = \" \";\n                }\n                else if (flags.indexOf(\"+\") >= 0) {\n                    sign = \"+\";\n                }\n            }\n        }\n        precision = precision == null ? null : parseInt(precision, 10);\n        switch (format) {\n            case \"f\":\n            case \"F\":\n                precision = precision != null ? precision : 6;\n                rep = toFixed(rep, precision);\n                break;\n            case \"g\":\n            case \"G\":\n                rep = precision != null ? toPrecision(rep, precision) : toPrecision(rep);\n                break;\n            case \"e\":\n            case \"E\":\n                rep = precision != null ? toExponential(rep, precision) : toExponential(rep);\n                break;\n            case \"x\":\n                rep = toHex(rep);\n                break;\n            case \"X\":\n                rep = toHex(rep).toUpperCase();\n                break;\n            default: // AOid\n                rep = String(rep);\n                break;\n        }\n    }\n    else if (rep instanceof Date) {\n        rep = dateToString(rep);\n    }\n    else {\n        rep = toString(rep);\n    }\n    padLength = typeof padLength === \"number\" ? padLength : parseInt(padLength, 10);\n    if (!isNaN(padLength)) {\n        const zeroFlag = flags.indexOf(\"0\") >= 0; // Use '0' for left padding\n        const minusFlag = flags.indexOf(\"-\") >= 0; // Right padding\n        const ch = minusFlag || !zeroFlag ? \" \" : \"0\";\n        if (ch === \"0\") {\n            rep = padLeft(rep, padLength - sign.length, ch, minusFlag);\n            rep = sign + rep;\n        }\n        else {\n            rep = padLeft(sign + rep, padLength, ch, minusFlag);\n        }\n    }\n    else {\n        rep = sign + rep;\n    }\n    return rep;\n}\nfunction createPrinter(cont, _strParts, _matches, _result = \"\", padArg = -1) {\n    return (...args) => {\n        // Make copies of the values passed by reference because the function can be used multiple times\n        let result = _result;\n        const strParts = _strParts.slice();\n        const matches = _matches.slice();\n        for (const arg of args) {\n            const [, , flags, _padLength, precision, format] = matches[0];\n            let padLength = _padLength;\n            if (padArg >= 0) {\n                padLength = padArg;\n                padArg = -1;\n            }\n            else if (padLength === \"*\") {\n                if (arg < 0) {\n                    throw new Error(\"Non-negative number required\");\n                }\n                padArg = arg;\n                continue;\n            }\n            result += strParts[0];\n            result += formatReplacement(arg, flags, padLength, precision, format);\n            strParts.splice(0, 1);\n            matches.splice(0, 1);\n        }\n        if (matches.length === 0) {\n            result += strParts[0];\n            return cont(result);\n        }\n        else {\n            return createPrinter(cont, strParts, matches, result, padArg);\n        }\n    };\n}\nexport function fsFormat(str) {\n    return (cont) => {\n        fsFormatRegExp.lastIndex = 0;\n        const strParts = [];\n        const matches = [];\n        let strIdx = 0;\n        let match = fsFormatRegExp.exec(str);\n        while (match) {\n            // The first group corresponds to the no-escape char (^|[^%]), the actual pattern starts in the next char\n            // Note: we don't use negative lookbehind because some browsers don't support it yet\n            const matchIndex = match.index + (match[1] || \"\").length;\n            strParts.push(str.substring(strIdx, matchIndex).replace(/%%/g, \"%\"));\n            matches.push(match);\n            strIdx = fsFormatRegExp.lastIndex;\n            // Likewise we need to move fsFormatRegExp.lastIndex one char behind to make sure we match the no-escape char next time\n            fsFormatRegExp.lastIndex -= 1;\n            match = fsFormatRegExp.exec(str);\n        }\n        if (strParts.length === 0) {\n            return cont(str.replace(/%%/g, \"%\"));\n        }\n        else {\n            strParts.push(str.substring(strIdx).replace(/%%/g, \"%\"));\n            return createPrinter(cont, strParts, matches);\n        }\n    };\n}\nexport function format(str, ...args) {\n    if (typeof str === \"object\" && args.length > 0) {\n        // Called with culture info\n        str = args[0];\n        args.shift();\n    }\n    return str.replace(formatRegExp, (_, idx, padLength, format, precision, pattern) => {\n        let rep = args[idx];\n        if (isNumeric(rep)) {\n            precision = precision == null ? null : parseInt(precision, 10);\n            switch (format) {\n                case \"f\":\n                case \"F\":\n                    precision = precision != null ? precision : 2;\n                    rep = toFixed(rep, precision);\n                    break;\n                case \"g\":\n                case \"G\":\n                    rep = precision != null ? toPrecision(rep, precision) : toPrecision(rep);\n                    break;\n                case \"e\":\n                case \"E\":\n                    rep = precision != null ? toExponential(rep, precision) : toExponential(rep);\n                    break;\n                case \"p\":\n                case \"P\":\n                    precision = precision != null ? precision : 2;\n                    rep = toFixed(multiply(rep, 100), precision) + \" %\";\n                    break;\n                case \"d\":\n                case \"D\":\n                    rep = precision != null ? padLeft(String(rep), precision, \"0\") : String(rep);\n                    break;\n                case \"x\":\n                case \"X\":\n                    rep = precision != null ? padLeft(toHex(rep), precision, \"0\") : toHex(rep);\n                    if (format === \"X\") {\n                        rep = rep.toUpperCase();\n                    }\n                    break;\n                default:\n                    if (pattern) {\n                        let sign = \"\";\n                        rep = pattern.replace(/(0+)(\\.0+)?/, (_, intPart, decimalPart) => {\n                            if (isLessThan(rep, 0)) {\n                                rep = multiply(rep, -1);\n                                sign = \"-\";\n                            }\n                            rep = toFixed(rep, decimalPart != null ? decimalPart.length - 1 : 0);\n                            return padLeft(rep, (intPart || \"\").length - sign.length + (decimalPart != null ? decimalPart.length : 0), \"0\");\n                        });\n                        rep = sign + rep;\n                    }\n            }\n        }\n        else if (rep instanceof Date) {\n            rep = dateToString(rep, pattern || format);\n        }\n        else {\n            rep = toString(rep);\n        }\n        padLength = parseInt((padLength || \" \").substring(1), 10);\n        if (!isNaN(padLength)) {\n            rep = padLeft(String(rep), Math.abs(padLength), \" \", padLength < 0);\n        }\n        return rep;\n    });\n}\nexport function endsWith(str, search) {\n    const idx = str.lastIndexOf(search);\n    return idx >= 0 && idx === str.length - search.length;\n}\nexport function initialize(n, f) {\n    if (n < 0) {\n        throw new Error(\"String length must be non-negative\");\n    }\n    const xs = new Array(n);\n    for (let i = 0; i < n; i++) {\n        xs[i] = f(i);\n    }\n    return xs.join(\"\");\n}\nexport function insert(str, startIndex, value) {\n    if (startIndex < 0 || startIndex > str.length) {\n        throw new Error(\"startIndex is negative or greater than the length of this instance.\");\n    }\n    return str.substring(0, startIndex) + value + str.substring(startIndex);\n}\nexport function isNullOrEmpty(str) {\n    return typeof str !== \"string\" || str.length === 0;\n}\nexport function isNullOrWhiteSpace(str) {\n    return typeof str !== \"string\" || /^\\s*$/.test(str);\n}\nexport function concat(...xs) {\n    return xs.map((x) => String(x)).join(\"\");\n}\nexport function join(delimiter, xs) {\n    if (Array.isArray(xs)) {\n        return xs.join(delimiter);\n    }\n    else {\n        return Array.from(xs).join(delimiter);\n    }\n}\nexport function joinWithIndices(delimiter, xs, startIndex, count) {\n    const endIndexPlusOne = startIndex + count;\n    if (endIndexPlusOne > xs.length) {\n        throw new Error(\"Index and count must refer to a location within the buffer.\");\n    }\n    return xs.slice(startIndex, endIndexPlusOne).join(delimiter);\n}\nfunction notSupported(name) {\n    throw new Error(\"The environment doesn't support '\" + name + \"', please use a polyfill.\");\n}\nexport function toBase64String(inArray) {\n    let str = \"\";\n    for (let i = 0; i < inArray.length; i++) {\n        str += String.fromCharCode(inArray[i]);\n    }\n    return typeof btoa === \"function\" ? btoa(str) : notSupported(\"btoa\");\n}\nexport function fromBase64String(b64Encoded) {\n    const binary = typeof atob === \"function\" ? atob(b64Encoded) : notSupported(\"atob\");\n    const bytes = new Uint8Array(binary.length);\n    for (let i = 0; i < binary.length; i++) {\n        bytes[i] = binary.charCodeAt(i);\n    }\n    return bytes;\n}\nexport function padLeft(str, len, ch, isRight) {\n    ch = ch || \" \";\n    len = len - str.length;\n    for (let i = 0; i < len; i++) {\n        str = isRight ? str + ch : ch + str;\n    }\n    return str;\n}\nexport function padRight(str, len, ch) {\n    return padLeft(str, len, ch, true);\n}\nexport function remove(str, startIndex, count) {\n    if (startIndex >= str.length) {\n        throw new Error(\"startIndex must be less than length of string\");\n    }\n    if (typeof count === \"number\" && (startIndex + count) > str.length) {\n        throw new Error(\"Index and count must refer to a location within the string.\");\n    }\n    return str.slice(0, startIndex) + (typeof count === \"number\" ? str.substr(startIndex + count) : \"\");\n}\nexport function replace(str, search, replace) {\n    return str.replace(new RegExp(escape(search), \"g\"), replace);\n}\nexport function replicate(n, x) {\n    return initialize(n, () => x);\n}\nexport function getCharAtIndex(input, index) {\n    if (index < 0 || index >= input.length) {\n        throw new Error(\"Index was outside the bounds of the array.\");\n    }\n    return input[index];\n}\nexport function split(str, splitters, count, removeEmpty) {\n    count = typeof count === \"number\" ? count : undefined;\n    removeEmpty = typeof removeEmpty === \"number\" ? removeEmpty : undefined;\n    if (count && count < 0) {\n        throw new Error(\"Count cannot be less than zero\");\n    }\n    if (count === 0) {\n        return [];\n    }\n    if (!Array.isArray(splitters)) {\n        if (removeEmpty === 0) {\n            return str.split(splitters, count);\n        }\n        const len = arguments.length;\n        splitters = Array(len - 1);\n        for (let key = 1; key < len; key++) {\n            splitters[key - 1] = arguments[key];\n        }\n    }\n    splitters = splitters.map((x) => escape(x));\n    splitters = splitters.length > 0 ? splitters : [\" \"];\n    let i = 0;\n    const splits = [];\n    const reg = new RegExp(splitters.join(\"|\"), \"g\");\n    while (count == null || count > 1) {\n        const m = reg.exec(str);\n        if (m === null) {\n            break;\n        }\n        if (!removeEmpty || (m.index - i) > 0) {\n            count = count != null ? count - 1 : count;\n            splits.push(str.substring(i, m.index));\n        }\n        i = reg.lastIndex;\n    }\n    if (!removeEmpty || (str.length - i) > 0) {\n        splits.push(str.substring(i));\n    }\n    return splits;\n}\nexport function trim(str, ...chars) {\n    if (chars.length === 0) {\n        return str.trim();\n    }\n    const pattern = \"[\" + escape(chars.join(\"\")) + \"]+\";\n    return str.replace(new RegExp(\"^\" + pattern), \"\").replace(new RegExp(pattern + \"$\"), \"\");\n}\nexport function trimStart(str, ...chars) {\n    return chars.length === 0\n        ? str.trimStart()\n        : str.replace(new RegExp(\"^[\" + escape(chars.join(\"\")) + \"]+\"), \"\");\n}\nexport function trimEnd(str, ...chars) {\n    return chars.length === 0\n        ? str.trimEnd()\n        : str.replace(new RegExp(\"[\" + escape(chars.join(\"\")) + \"]+$\"), \"\");\n}\nexport function filter(pred, x) {\n    return x.split(\"\").filter((c) => pred(c)).join(\"\");\n}\nexport function substring(str, startIndex, length) {\n    if ((startIndex + (length || 0) > str.length)) {\n        throw new Error(\"Invalid startIndex and/or length\");\n    }\n    return length != null ? str.substr(startIndex, length) : str.substr(startIndex);\n}\n","import { compare, equals, structuralHash } from \"./Util.js\";\n// Using a class here for better compatibility with TS files importing Some\nexport class Some {\n    constructor(value) {\n        this.value = value;\n    }\n    toJSON() {\n        return this.value;\n    }\n    // Don't add \"Some\" for consistency with erased options\n    toString() {\n        return String(this.value);\n    }\n    GetHashCode() {\n        return structuralHash(this.value);\n    }\n    Equals(other) {\n        if (other == null) {\n            return false;\n        }\n        else {\n            return equals(this.value, other instanceof Some ? other.value : other);\n        }\n    }\n    CompareTo(other) {\n        if (other == null) {\n            return 1;\n        }\n        else {\n            return compare(this.value, other instanceof Some ? other.value : other);\n        }\n    }\n}\nexport function some(x) {\n    return x == null || x instanceof Some ? new Some(x) : x;\n}\nexport function value(x) {\n    if (x == null) {\n        throw new Error(\"Option has no value\");\n    }\n    else {\n        return x instanceof Some ? x.value : x;\n    }\n}\nexport function ofNullable(x) {\n    // This will fail with unit probably, an alternative would be:\n    // return x === null ? undefined : (x === undefined ? new Some(x) : x);\n    return x == null ? undefined : x;\n}\nexport function toNullable(x) {\n    return x == null ? null : value(x);\n}\nexport function flatten(x) {\n    return x == null ? undefined : value(x);\n}\nexport function toArray(opt) {\n    return (opt == null) ? [] : [value(opt)];\n}\nexport function defaultArg(opt, defaultValue) {\n    return (opt != null) ? value(opt) : defaultValue;\n}\nexport function defaultArgWith(opt, defThunk) {\n    return (opt != null) ? value(opt) : defThunk();\n}\nexport function filter(predicate, opt) {\n    return (opt != null) ? (predicate(value(opt)) ? opt : undefined) : opt;\n}\nexport function map(mapping, opt) {\n    return (opt != null) ? some(mapping(value(opt))) : undefined;\n}\nexport function map2(mapping, opt1, opt2) {\n    return (opt1 != null && opt2 != null) ? mapping(value(opt1), value(opt2)) : undefined;\n}\nexport function map3(mapping, opt1, opt2, opt3) {\n    return (opt1 != null && opt2 != null && opt3 != null) ? mapping(value(opt1), value(opt2), value(opt3)) : undefined;\n}\nexport function bind(binder, opt) {\n    return opt != null ? binder(value(opt)) : undefined;\n}\nexport function tryOp(op, arg) {\n    try {\n        return some(op(arg));\n    }\n    catch (_a) {\n        return undefined;\n    }\n}\n","import { value as value_2, defaultArg, some } from \"./Option.js\";\r\nimport { min as min_1, compare, getEnumerator, comparePrimitives, max as max_1 } from \"./Util.js\";\r\n\r\nexport function Helpers_allocateArrayFromCons(cons, len) {\r\n    if ((typeof cons) === \"function\") {\r\n        return new cons(len);\r\n    }\r\n    else {\r\n        return new Array(len);\r\n    }\r\n}\r\n\r\nfunction indexNotFound() {\r\n    throw (new Error(\"An index satisfying the predicate was not found in the collection.\"));\r\n}\r\n\r\nfunction differentLengths() {\r\n    throw (new Error(\"Arrays had different lengths\"));\r\n}\r\n\r\nexport function append(array1, array2, cons) {\r\n    const len1 = array1.length | 0;\r\n    const len2 = array2.length | 0;\r\n    const newArray = Helpers_allocateArrayFromCons(cons, len1 + len2);\r\n    for (let i = 0; i <= (len1 - 1); i++) {\r\n        newArray[i] = array1[i];\r\n    }\r\n    for (let i_1 = 0; i_1 <= (len2 - 1); i_1++) {\r\n        newArray[i_1 + len1] = array2[i_1];\r\n    }\r\n    return newArray;\r\n}\r\n\r\nexport function filter(predicate, array) {\r\n    return array.filter(predicate);\r\n}\r\n\r\nexport function fill(target, targetIndex, count, value) {\r\n    const start = targetIndex | 0;\r\n    return target.fill(value, start, (start + count));\r\n}\r\n\r\nexport function getSubArray(array, start, count) {\r\n    const start_1 = start | 0;\r\n    return array.slice(start_1, (start_1 + count));\r\n}\r\n\r\nexport function last(array) {\r\n    if (array.length === 0) {\r\n        throw (new Error(\"The input array was empty\\\\nParameter name: array\"));\r\n    }\r\n    return array[array.length - 1];\r\n}\r\n\r\nexport function tryLast(array) {\r\n    if (array.length === 0) {\r\n        return void 0;\r\n    }\r\n    else {\r\n        return some(array[array.length - 1]);\r\n    }\r\n}\r\n\r\nexport function mapIndexed(f, source, cons) {\r\n    const len = source.length | 0;\r\n    const target = Helpers_allocateArrayFromCons(cons, len);\r\n    for (let i = 0; i <= (len - 1); i++) {\r\n        target[i] = f(i, source[i]);\r\n    }\r\n    return target;\r\n}\r\n\r\nexport function map(f, source, cons) {\r\n    const len = source.length | 0;\r\n    const target = Helpers_allocateArrayFromCons(cons, len);\r\n    for (let i = 0; i <= (len - 1); i++) {\r\n        target[i] = f(source[i]);\r\n    }\r\n    return target;\r\n}\r\n\r\nexport function mapIndexed2(f, source1, source2, cons) {\r\n    if (source1.length !== source2.length) {\r\n        throw (new Error(\"Arrays had different lengths\"));\r\n    }\r\n    const result = Helpers_allocateArrayFromCons(cons, source1.length);\r\n    for (let i = 0; i <= (source1.length - 1); i++) {\r\n        result[i] = f(i, source1[i], source2[i]);\r\n    }\r\n    return result;\r\n}\r\n\r\nexport function map2(f, source1, source2, cons) {\r\n    if (source1.length !== source2.length) {\r\n        throw (new Error(\"Arrays had different lengths\"));\r\n    }\r\n    const result = Helpers_allocateArrayFromCons(cons, source1.length);\r\n    for (let i = 0; i <= (source1.length - 1); i++) {\r\n        result[i] = f(source1[i], source2[i]);\r\n    }\r\n    return result;\r\n}\r\n\r\nexport function mapIndexed3(f, source1, source2, source3, cons) {\r\n    if ((source1.length !== source2.length) ? true : (source2.length !== source3.length)) {\r\n        throw (new Error(\"Arrays had different lengths\"));\r\n    }\r\n    const result = Helpers_allocateArrayFromCons(cons, source1.length);\r\n    for (let i = 0; i <= (source1.length - 1); i++) {\r\n        result[i] = f(i, source1[i], source2[i], source3[i]);\r\n    }\r\n    return result;\r\n}\r\n\r\nexport function map3(f, source1, source2, source3, cons) {\r\n    if ((source1.length !== source2.length) ? true : (source2.length !== source3.length)) {\r\n        throw (new Error(\"Arrays had different lengths\"));\r\n    }\r\n    const result = Helpers_allocateArrayFromCons(cons, source1.length);\r\n    for (let i = 0; i <= (source1.length - 1); i++) {\r\n        result[i] = f(source1[i], source2[i], source3[i]);\r\n    }\r\n    return result;\r\n}\r\n\r\nexport function mapFold(mapping, state, array, cons) {\r\n    const matchValue = array.length | 0;\r\n    if (matchValue === 0) {\r\n        return [[], state];\r\n    }\r\n    else {\r\n        let acc = state;\r\n        const res = Helpers_allocateArrayFromCons(cons, matchValue);\r\n        for (let i = 0; i <= (array.length - 1); i++) {\r\n            const patternInput = mapping(acc, array[i]);\r\n            res[i] = patternInput[0];\r\n            acc = patternInput[1];\r\n        }\r\n        return [res, acc];\r\n    }\r\n}\r\n\r\nexport function mapFoldBack(mapping, array, state, cons) {\r\n    const matchValue = array.length | 0;\r\n    if (matchValue === 0) {\r\n        return [[], state];\r\n    }\r\n    else {\r\n        let acc = state;\r\n        const res = Helpers_allocateArrayFromCons(cons, matchValue);\r\n        for (let i = array.length - 1; i >= 0; i--) {\r\n            const patternInput = mapping(array[i], acc);\r\n            res[i] = patternInput[0];\r\n            acc = patternInput[1];\r\n        }\r\n        return [res, acc];\r\n    }\r\n}\r\n\r\nexport function indexed(source) {\r\n    const len = source.length | 0;\r\n    const target = new Array(len);\r\n    for (let i = 0; i <= (len - 1); i++) {\r\n        target[i] = [i, source[i]];\r\n    }\r\n    return target;\r\n}\r\n\r\nexport function truncate(count, array) {\r\n    const count_1 = max_1((x, y) => comparePrimitives(x, y), 0, count) | 0;\r\n    const start = 0;\r\n    return array.slice(start, (start + count_1));\r\n}\r\n\r\nexport function concat(arrays, cons) {\r\n    const arrays_1 = Array.isArray(arrays) ? arrays : (Array.from(arrays));\r\n    const matchValue = arrays_1.length | 0;\r\n    switch (matchValue) {\r\n        case 0: {\r\n            return Helpers_allocateArrayFromCons(cons, 0);\r\n        }\r\n        case 1: {\r\n            return arrays_1[0];\r\n        }\r\n        default: {\r\n            let totalIdx = 0;\r\n            let totalLength = 0;\r\n            for (let idx = 0; idx <= (arrays_1.length - 1); idx++) {\r\n                const arr_1 = arrays_1[idx];\r\n                totalLength = ((totalLength + arr_1.length) | 0);\r\n            }\r\n            const result = Helpers_allocateArrayFromCons(cons, totalLength);\r\n            for (let idx_1 = 0; idx_1 <= (arrays_1.length - 1); idx_1++) {\r\n                const arr_2 = arrays_1[idx_1];\r\n                for (let j = 0; j <= (arr_2.length - 1); j++) {\r\n                    result[totalIdx] = arr_2[j];\r\n                    totalIdx = ((totalIdx + 1) | 0);\r\n                }\r\n            }\r\n            return result;\r\n        }\r\n    }\r\n}\r\n\r\nexport function collect(mapping, array, cons) {\r\n    return concat(map(mapping, array, null), cons);\r\n}\r\n\r\nexport function where(predicate, array) {\r\n    return array.filter(predicate);\r\n}\r\n\r\nexport function contains(value, array, eq) {\r\n    const loop = (i_mut) => {\r\n        loop:\r\n        while (true) {\r\n            const i = i_mut;\r\n            if (i >= array.length) {\r\n                return false;\r\n            }\r\n            else if (eq.Equals(value, array[i])) {\r\n                return true;\r\n            }\r\n            else {\r\n                i_mut = (i + 1);\r\n                continue loop;\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    return loop(0);\r\n}\r\n\r\nexport function empty(cons) {\r\n    return Helpers_allocateArrayFromCons(cons, 0);\r\n}\r\n\r\nexport function singleton(value, cons) {\r\n    const ar = Helpers_allocateArrayFromCons(cons, 1);\r\n    ar[0] = value;\r\n    return ar;\r\n}\r\n\r\nexport function initialize(count, initializer, cons) {\r\n    if (count < 0) {\r\n        throw (new Error(\"The input must be non-negative\\\\nParameter name: count\"));\r\n    }\r\n    const result = Helpers_allocateArrayFromCons(cons, count);\r\n    for (let i = 0; i <= (count - 1); i++) {\r\n        result[i] = initializer(i);\r\n    }\r\n    return result;\r\n}\r\n\r\nexport function pairwise(array) {\r\n    if (array.length < 2) {\r\n        return [];\r\n    }\r\n    else {\r\n        const count = (array.length - 1) | 0;\r\n        const result = new Array(count);\r\n        for (let i = 0; i <= (count - 1); i++) {\r\n            result[i] = [array[i], array[i + 1]];\r\n        }\r\n        return result;\r\n    }\r\n}\r\n\r\nexport function replicate(count, initial, cons) {\r\n    if (count < 0) {\r\n        throw (new Error(\"The input must be non-negative\\\\nParameter name: count\"));\r\n    }\r\n    const result = Helpers_allocateArrayFromCons(cons, count);\r\n    for (let i = 0; i <= (result.length - 1); i++) {\r\n        result[i] = initial;\r\n    }\r\n    return result;\r\n}\r\n\r\nexport function copy(array) {\r\n    return array.slice();\r\n}\r\n\r\nexport function reverse(array) {\r\n    const array_2 = array.slice();\r\n    return array_2.reverse();\r\n}\r\n\r\nexport function scan(folder, state, array, cons) {\r\n    const res = Helpers_allocateArrayFromCons(cons, array.length + 1);\r\n    res[0] = state;\r\n    for (let i = 0; i <= (array.length - 1); i++) {\r\n        res[i + 1] = folder(res[i], array[i]);\r\n    }\r\n    return res;\r\n}\r\n\r\nexport function scanBack(folder, array, state, cons) {\r\n    const res = Helpers_allocateArrayFromCons(cons, array.length + 1);\r\n    res[array.length] = state;\r\n    for (let i = array.length - 1; i >= 0; i--) {\r\n        res[i] = folder(array[i], res[i + 1]);\r\n    }\r\n    return res;\r\n}\r\n\r\nexport function skip(count, array, cons) {\r\n    if (count > array.length) {\r\n        throw (new Error(\"count is greater than array length\\\\nParameter name: count\"));\r\n    }\r\n    if (count === array.length) {\r\n        return Helpers_allocateArrayFromCons(cons, 0);\r\n    }\r\n    else {\r\n        const count_1 = ((count < 0) ? 0 : count) | 0;\r\n        return array.slice(count_1);\r\n    }\r\n}\r\n\r\nexport function skipWhile(predicate, array, cons) {\r\n    let count = 0;\r\n    while ((count < array.length) ? predicate(array[count]) : false) {\r\n        count = ((count + 1) | 0);\r\n    }\r\n    if (count === array.length) {\r\n        return Helpers_allocateArrayFromCons(cons, 0);\r\n    }\r\n    else {\r\n        const count_1 = count | 0;\r\n        return array.slice(count_1);\r\n    }\r\n}\r\n\r\nexport function take(count, array, cons) {\r\n    if (count < 0) {\r\n        throw (new Error(\"The input must be non-negative\\\\nParameter name: count\"));\r\n    }\r\n    if (count > array.length) {\r\n        throw (new Error(\"count is greater than array length\\\\nParameter name: count\"));\r\n    }\r\n    if (count === 0) {\r\n        return Helpers_allocateArrayFromCons(cons, 0);\r\n    }\r\n    else {\r\n        const start = 0;\r\n        return array.slice(start, (start + count));\r\n    }\r\n}\r\n\r\nexport function takeWhile(predicate, array, cons) {\r\n    let count = 0;\r\n    while ((count < array.length) ? predicate(array[count]) : false) {\r\n        count = ((count + 1) | 0);\r\n    }\r\n    if (count === 0) {\r\n        return Helpers_allocateArrayFromCons(cons, 0);\r\n    }\r\n    else {\r\n        const start = 0;\r\n        const count_1 = count | 0;\r\n        return array.slice(start, (start + count_1));\r\n    }\r\n}\r\n\r\nexport function addInPlace(x, array) {\r\n    void (array.push(x));\r\n}\r\n\r\nexport function addRangeInPlace(range, array) {\r\n    const enumerator = getEnumerator(range);\r\n    try {\r\n        while (enumerator[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n            addInPlace(enumerator[\"System.Collections.Generic.IEnumerator`1.get_Current\"](), array);\r\n        }\r\n    }\r\n    finally {\r\n        enumerator.Dispose();\r\n    }\r\n}\r\n\r\nexport function insertRangeInPlace(index, range, array) {\r\n    let index_1;\r\n    let i = index;\r\n    const enumerator = getEnumerator(range);\r\n    try {\r\n        while (enumerator[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n            const x = enumerator[\"System.Collections.Generic.IEnumerator`1.get_Current\"]();\r\n            void ((index_1 = (i | 0), array.splice(index_1, 0, x)));\r\n            i = ((i + 1) | 0);\r\n        }\r\n    }\r\n    finally {\r\n        enumerator.Dispose();\r\n    }\r\n}\r\n\r\nexport function removeInPlace(item_1, array) {\r\n    const i = array.indexOf(item_1, 0);\r\n    if (i > -1) {\r\n        void (array.splice(i, 1));\r\n        return true;\r\n    }\r\n    else {\r\n        return false;\r\n    }\r\n}\r\n\r\nexport function removeAllInPlace(predicate, array) {\r\n    const countRemoveAll = (count) => {\r\n        const i = array.findIndex(predicate);\r\n        if (i > -1) {\r\n            void (array.splice(i, 1));\r\n            return (countRemoveAll(count) + 1) | 0;\r\n        }\r\n        else {\r\n            return count | 0;\r\n        }\r\n    };\r\n    return countRemoveAll(0) | 0;\r\n}\r\n\r\nexport function copyTo(source, sourceIndex, target, targetIndex, count) {\r\n    const diff = (targetIndex - sourceIndex) | 0;\r\n    for (let i = sourceIndex; i <= ((sourceIndex + count) - 1); i++) {\r\n        target[i + diff] = source[i];\r\n    }\r\n}\r\n\r\nexport function copyToTypedArray(source, sourceIndex, target, targetIndex, count) {\r\n    try {\r\n        target.set(source.subarray(sourceIndex, sourceIndex + count), targetIndex);\r\n    }\r\n    catch (matchValue) {\r\n        copyTo(source, sourceIndex, target, targetIndex, count);\r\n    }\r\n}\r\n\r\nexport function indexOf(array, item_1, start, count) {\r\n    const start_1 = defaultArg(start, 0) | 0;\r\n    const i = array.indexOf(item_1, start_1);\r\n    if ((count != null) ? (i >= (start_1 + value_2(count))) : false) {\r\n        return -1;\r\n    }\r\n    else {\r\n        return i | 0;\r\n    }\r\n}\r\n\r\nexport function partition(f, source, cons) {\r\n    const len = source.length | 0;\r\n    const res1 = Helpers_allocateArrayFromCons(cons, len);\r\n    const res2 = Helpers_allocateArrayFromCons(cons, len);\r\n    let iTrue = 0;\r\n    let iFalse = 0;\r\n    for (let i = 0; i <= (len - 1); i++) {\r\n        if (f(source[i])) {\r\n            res1[iTrue] = source[i];\r\n            iTrue = ((iTrue + 1) | 0);\r\n        }\r\n        else {\r\n            res2[iFalse] = source[i];\r\n            iFalse = ((iFalse + 1) | 0);\r\n        }\r\n    }\r\n    return [truncate(iTrue, res1), truncate(iFalse, res2)];\r\n}\r\n\r\nexport function find(predicate, array) {\r\n    const matchValue = array.find(predicate);\r\n    if (matchValue == null) {\r\n        return indexNotFound();\r\n    }\r\n    else {\r\n        return value_2(matchValue);\r\n    }\r\n}\r\n\r\nexport function tryFind(predicate, array) {\r\n    return array.find(predicate);\r\n}\r\n\r\nexport function findIndex(predicate, array) {\r\n    const matchValue = array.findIndex(predicate);\r\n    if (matchValue > -1) {\r\n        return matchValue | 0;\r\n    }\r\n    else {\r\n        return indexNotFound() | 0;\r\n    }\r\n}\r\n\r\nexport function tryFindIndex(predicate, array) {\r\n    const matchValue = array.findIndex(predicate);\r\n    if (matchValue > -1) {\r\n        return matchValue;\r\n    }\r\n    else {\r\n        return void 0;\r\n    }\r\n}\r\n\r\nexport function pick(chooser, array) {\r\n    const loop = (i_mut) => {\r\n        loop:\r\n        while (true) {\r\n            const i = i_mut;\r\n            if (i >= array.length) {\r\n                return indexNotFound();\r\n            }\r\n            else {\r\n                const matchValue = chooser(array[i]);\r\n                if (matchValue != null) {\r\n                    return value_2(matchValue);\r\n                }\r\n                else {\r\n                    i_mut = (i + 1);\r\n                    continue loop;\r\n                }\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    return loop(0);\r\n}\r\n\r\nexport function tryPick(chooser, array) {\r\n    const loop = (i_mut) => {\r\n        loop:\r\n        while (true) {\r\n            const i = i_mut;\r\n            if (i >= array.length) {\r\n                return void 0;\r\n            }\r\n            else {\r\n                const matchValue = chooser(array[i]);\r\n                if (matchValue == null) {\r\n                    i_mut = (i + 1);\r\n                    continue loop;\r\n                }\r\n                else {\r\n                    return matchValue;\r\n                }\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    return loop(0);\r\n}\r\n\r\nexport function findBack(predicate, array) {\r\n    const loop = (i_mut) => {\r\n        loop:\r\n        while (true) {\r\n            const i = i_mut;\r\n            if (i < 0) {\r\n                return indexNotFound();\r\n            }\r\n            else if (predicate(array[i])) {\r\n                return array[i];\r\n            }\r\n            else {\r\n                i_mut = (i - 1);\r\n                continue loop;\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    return loop(array.length - 1);\r\n}\r\n\r\nexport function tryFindBack(predicate, array) {\r\n    const loop = (i_mut) => {\r\n        loop:\r\n        while (true) {\r\n            const i = i_mut;\r\n            if (i < 0) {\r\n                return void 0;\r\n            }\r\n            else if (predicate(array[i])) {\r\n                return some(array[i]);\r\n            }\r\n            else {\r\n                i_mut = (i - 1);\r\n                continue loop;\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    return loop(array.length - 1);\r\n}\r\n\r\nexport function findLastIndex(predicate, array) {\r\n    const loop = (i_mut) => {\r\n        loop:\r\n        while (true) {\r\n            const i = i_mut;\r\n            if (i < 0) {\r\n                return -1;\r\n            }\r\n            else if (predicate(array[i])) {\r\n                return i | 0;\r\n            }\r\n            else {\r\n                i_mut = (i - 1);\r\n                continue loop;\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    return loop(array.length - 1) | 0;\r\n}\r\n\r\nexport function findIndexBack(predicate, array) {\r\n    const loop = (i_mut) => {\r\n        loop:\r\n        while (true) {\r\n            const i = i_mut;\r\n            if (i < 0) {\r\n                return indexNotFound() | 0;\r\n            }\r\n            else if (predicate(array[i])) {\r\n                return i | 0;\r\n            }\r\n            else {\r\n                i_mut = (i - 1);\r\n                continue loop;\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    return loop(array.length - 1) | 0;\r\n}\r\n\r\nexport function tryFindIndexBack(predicate, array) {\r\n    const loop = (i_mut) => {\r\n        loop:\r\n        while (true) {\r\n            const i = i_mut;\r\n            if (i < 0) {\r\n                return void 0;\r\n            }\r\n            else if (predicate(array[i])) {\r\n                return i;\r\n            }\r\n            else {\r\n                i_mut = (i - 1);\r\n                continue loop;\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    return loop(array.length - 1);\r\n}\r\n\r\nexport function choose(chooser, array, cons) {\r\n    const res = [];\r\n    for (let i = 0; i <= (array.length - 1); i++) {\r\n        const matchValue = chooser(array[i]);\r\n        if (matchValue != null) {\r\n            const y = value_2(matchValue);\r\n            void (res.push(y));\r\n        }\r\n    }\r\n    if ((typeof cons) === \"function\") {\r\n        return map((x) => x, res, cons);\r\n    }\r\n    else {\r\n        return res;\r\n    }\r\n}\r\n\r\nexport function foldIndexed(folder, state, array) {\r\n    return array.reduce(((delegateArg0, delegateArg1, delegateArg2) => folder(delegateArg2, delegateArg0, delegateArg1)), state);\r\n}\r\n\r\nexport function fold(folder, state, array) {\r\n    return array.reduce(((delegateArg0, delegateArg1) => folder(delegateArg0, delegateArg1)), state);\r\n}\r\n\r\nexport function iterate(action, array) {\r\n    for (let i = 0; i <= (array.length - 1); i++) {\r\n        action(array[i]);\r\n    }\r\n}\r\n\r\nexport function iterateIndexed(action, array) {\r\n    for (let i = 0; i <= (array.length - 1); i++) {\r\n        action(i, array[i]);\r\n    }\r\n}\r\n\r\nexport function iterate2(action, array1, array2) {\r\n    if (array1.length !== array2.length) {\r\n        differentLengths();\r\n    }\r\n    for (let i = 0; i <= (array1.length - 1); i++) {\r\n        action(array1[i], array2[i]);\r\n    }\r\n}\r\n\r\nexport function iterateIndexed2(action, array1, array2) {\r\n    if (array1.length !== array2.length) {\r\n        differentLengths();\r\n    }\r\n    for (let i = 0; i <= (array1.length - 1); i++) {\r\n        action(i, array1[i], array2[i]);\r\n    }\r\n}\r\n\r\nexport function isEmpty(array) {\r\n    return array.length === 0;\r\n}\r\n\r\nexport function forAll(predicate, array) {\r\n    return array.every(predicate);\r\n}\r\n\r\nexport function permute(f, array) {\r\n    const size = array.length | 0;\r\n    const res = array.slice();\r\n    const checkFlags = new Array(size);\r\n    iterateIndexed((i, x) => {\r\n        const j = f(i) | 0;\r\n        if ((j < 0) ? true : (j >= size)) {\r\n            throw (new Error(\"Not a valid permutation\"));\r\n        }\r\n        res[j] = x;\r\n        checkFlags[j] = 1;\r\n    }, array);\r\n    if (!(checkFlags.every(((y) => (1 === y))))) {\r\n        throw (new Error(\"Not a valid permutation\"));\r\n    }\r\n    return res;\r\n}\r\n\r\nexport function setSlice(target, lower, upper, source) {\r\n    const lower_1 = defaultArg(lower, 0) | 0;\r\n    const upper_1 = defaultArg(upper, 0) | 0;\r\n    const length = (((upper_1 > 0) ? upper_1 : (target.length - 1)) - lower_1) | 0;\r\n    for (let i = 0; i <= length; i++) {\r\n        target[i + lower_1] = source[i];\r\n    }\r\n}\r\n\r\nexport function sortInPlaceBy(projection, xs, comparer) {\r\n    xs.sort(((x, y) => comparer.Compare(projection(x), projection(y))));\r\n}\r\n\r\nexport function sortInPlace(xs, comparer) {\r\n    xs.sort(((x, y) => comparer.Compare(x, y)));\r\n}\r\n\r\nexport function sort(xs, comparer) {\r\n    const xs_1 = xs.slice();\r\n    xs_1.sort(((x, y) => comparer.Compare(x, y)));\r\n    return xs_1;\r\n}\r\n\r\nexport function sortBy(projection, xs, comparer) {\r\n    const xs_1 = xs.slice();\r\n    xs_1.sort(((x, y) => comparer.Compare(projection(x), projection(y))));\r\n    return xs_1;\r\n}\r\n\r\nexport function sortDescending(xs, comparer) {\r\n    const xs_1 = xs.slice();\r\n    xs_1.sort(((x, y) => (comparer.Compare(x, y) * -1)));\r\n    return xs_1;\r\n}\r\n\r\nexport function sortByDescending(projection, xs, comparer) {\r\n    const xs_1 = xs.slice();\r\n    xs_1.sort(((x, y) => (comparer.Compare(projection(x), projection(y)) * -1)));\r\n    return xs_1;\r\n}\r\n\r\nexport function sortWith(comparer, xs) {\r\n    const comparer_1 = comparer;\r\n    const xs_1 = xs.slice();\r\n    xs_1.sort(comparer_1);\r\n    return xs_1;\r\n}\r\n\r\nexport function allPairs(xs, ys) {\r\n    const len1 = xs.length | 0;\r\n    const len2 = ys.length | 0;\r\n    const res = new Array((len1 * len2));\r\n    for (let i = 0; i <= (xs.length - 1); i++) {\r\n        for (let j = 0; j <= (ys.length - 1); j++) {\r\n            res[(i * len2) + j] = [xs[i], ys[j]];\r\n        }\r\n    }\r\n    return res;\r\n}\r\n\r\nexport function unfold(generator, state) {\r\n    const res = [];\r\n    const loop = (state_1_mut) => {\r\n        loop:\r\n        while (true) {\r\n            const state_1 = state_1_mut;\r\n            const matchValue = generator(state_1);\r\n            if (matchValue != null) {\r\n                const x = matchValue[0];\r\n                const s = matchValue[1];\r\n                void (res.push(x));\r\n                state_1_mut = s;\r\n                continue loop;\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    loop(state);\r\n    return res;\r\n}\r\n\r\nexport function unzip(array) {\r\n    const len = array.length | 0;\r\n    const res1 = new Array(len);\r\n    const res2 = new Array(len);\r\n    iterateIndexed((i, tupledArg) => {\r\n        res1[i] = tupledArg[0];\r\n        res2[i] = tupledArg[1];\r\n    }, array);\r\n    return [res1, res2];\r\n}\r\n\r\nexport function unzip3(array) {\r\n    const len = array.length | 0;\r\n    const res1 = new Array(len);\r\n    const res2 = new Array(len);\r\n    const res3 = new Array(len);\r\n    iterateIndexed((i, tupledArg) => {\r\n        res1[i] = tupledArg[0];\r\n        res2[i] = tupledArg[1];\r\n        res3[i] = tupledArg[2];\r\n    }, array);\r\n    return [res1, res2, res3];\r\n}\r\n\r\nexport function zip(array1, array2) {\r\n    if (array1.length !== array2.length) {\r\n        differentLengths();\r\n    }\r\n    const result = new Array(array1.length);\r\n    for (let i = 0; i <= (array1.length - 1); i++) {\r\n        result[i] = [array1[i], array2[i]];\r\n    }\r\n    return result;\r\n}\r\n\r\nexport function zip3(array1, array2, array3) {\r\n    if ((array1.length !== array2.length) ? true : (array2.length !== array3.length)) {\r\n        differentLengths();\r\n    }\r\n    const result = new Array(array1.length);\r\n    for (let i = 0; i <= (array1.length - 1); i++) {\r\n        result[i] = [array1[i], array2[i], array3[i]];\r\n    }\r\n    return result;\r\n}\r\n\r\nexport function chunkBySize(chunkSize, array) {\r\n    if (chunkSize < 1) {\r\n        throw (new Error(\"The input must be positive.\\\\nParameter name: size\"));\r\n    }\r\n    if (array.length === 0) {\r\n        return [[]];\r\n    }\r\n    else {\r\n        const result = [];\r\n        for (let x = 0; x <= ((~(~Math.ceil(array.length / chunkSize))) - 1); x++) {\r\n            let slice;\r\n            const start_1 = (x * chunkSize) | 0;\r\n            slice = (array.slice(start_1, (start_1 + chunkSize)));\r\n            void (result.push(slice));\r\n        }\r\n        return result;\r\n    }\r\n}\r\n\r\nexport function splitAt(index, array) {\r\n    let start;\r\n    if (index < 0) {\r\n        throw (new Error(\"The input must be non-negative\\\\nParameter name: index\"));\r\n    }\r\n    if (index > array.length) {\r\n        throw (new Error(\"The input sequence has an insufficient number of elements.\\\\nParameter name: index\"));\r\n    }\r\n    return [(start = 0, array.slice(start, (start + index))), array.slice(index)];\r\n}\r\n\r\nexport function compareWith(comparer, array1, array2) {\r\n    if (array1 == null) {\r\n        if (array2 == null) {\r\n            return 0;\r\n        }\r\n        else {\r\n            return -1;\r\n        }\r\n    }\r\n    else if (array2 == null) {\r\n        return 1;\r\n    }\r\n    else {\r\n        let i = 0;\r\n        let result = 0;\r\n        const length1 = array1.length | 0;\r\n        const length2 = array2.length | 0;\r\n        if (length1 > length2) {\r\n            return 1;\r\n        }\r\n        else if (length1 < length2) {\r\n            return -1;\r\n        }\r\n        else {\r\n            while ((i < length1) ? (result === 0) : false) {\r\n                result = (comparer(array1[i], array2[i]) | 0);\r\n                i = ((i + 1) | 0);\r\n            }\r\n            return result | 0;\r\n        }\r\n    }\r\n}\r\n\r\nexport function equalsWith(comparer, array1, array2) {\r\n    return compareWith((e1, e2) => compare(e1, e2), array1, array2) === 0;\r\n}\r\n\r\nexport function exactlyOne(array) {\r\n    if (array.length === 1) {\r\n        return array[0];\r\n    }\r\n    else if (array.length === 0) {\r\n        throw (new Error(\"The input sequence was empty\\\\nParameter name: array\"));\r\n    }\r\n    else {\r\n        throw (new Error(\"Input array too long\\\\nParameter name: array\"));\r\n    }\r\n}\r\n\r\nexport function tryExactlyOne(array) {\r\n    if (array.length === 1) {\r\n        return some(array[0]);\r\n    }\r\n    else {\r\n        return void 0;\r\n    }\r\n}\r\n\r\nexport function head(array) {\r\n    if (array.length === 0) {\r\n        throw (new Error(\"The input array was empty\\\\nParameter name: array\"));\r\n    }\r\n    else {\r\n        return array[0];\r\n    }\r\n}\r\n\r\nexport function tryHead(array) {\r\n    if (array.length === 0) {\r\n        return void 0;\r\n    }\r\n    else {\r\n        return some(array[0]);\r\n    }\r\n}\r\n\r\nexport function tail(array) {\r\n    if (array.length === 0) {\r\n        throw (new Error(\"Not enough elements\\\\nParameter name: array\"));\r\n    }\r\n    return array.slice(1);\r\n}\r\n\r\nexport function item(index, array) {\r\n    return array[index];\r\n}\r\n\r\nexport function tryItem(index, array) {\r\n    if ((index < 0) ? true : (index >= array.length)) {\r\n        return void 0;\r\n    }\r\n    else {\r\n        return some(array[index]);\r\n    }\r\n}\r\n\r\nexport function foldBackIndexed(folder, array, state) {\r\n    return array.reduceRight(((delegateArg0, delegateArg1, delegateArg2) => folder(delegateArg2, delegateArg1, delegateArg0)), state);\r\n}\r\n\r\nexport function foldBack(folder, array, state) {\r\n    return array.reduceRight(((delegateArg0, delegateArg1) => folder(delegateArg1, delegateArg0)), state);\r\n}\r\n\r\nexport function foldIndexed2(folder, state, array1, array2) {\r\n    let acc = state;\r\n    if (array1.length !== array2.length) {\r\n        throw (new Error(\"Arrays have different lengths\"));\r\n    }\r\n    for (let i = 0; i <= (array1.length - 1); i++) {\r\n        acc = folder(i, acc, array1[i], array2[i]);\r\n    }\r\n    return acc;\r\n}\r\n\r\nexport function fold2(folder, state, array1, array2) {\r\n    return foldIndexed2((_arg1, acc, x, y) => folder(acc, x, y), state, array1, array2);\r\n}\r\n\r\nexport function foldBackIndexed2(folder, array1, array2, state) {\r\n    let acc = state;\r\n    if (array1.length !== array2.length) {\r\n        differentLengths();\r\n    }\r\n    const size = array1.length | 0;\r\n    for (let i = 1; i <= size; i++) {\r\n        acc = folder(i - 1, array1[size - i], array2[size - i], acc);\r\n    }\r\n    return acc;\r\n}\r\n\r\nexport function foldBack2(f, array1, array2, state) {\r\n    return foldBackIndexed2((_arg1, x, y, acc) => f(x, y, acc), array1, array2, state);\r\n}\r\n\r\nexport function reduce(reduction, array) {\r\n    if (array.length === 0) {\r\n        throw (new Error(\"The input array was empty\"));\r\n    }\r\n    const reduction_1 = reduction;\r\n    return array.reduce(reduction_1);\r\n}\r\n\r\nexport function reduceBack(reduction, array) {\r\n    if (array.length === 0) {\r\n        throw (new Error(\"The input array was empty\"));\r\n    }\r\n    const reduction_1 = reduction;\r\n    return array.reduceRight(reduction_1);\r\n}\r\n\r\nexport function forAll2(predicate, array1, array2) {\r\n    return fold2((acc, x, y) => (acc ? predicate(x, y) : false), true, array1, array2);\r\n}\r\n\r\nexport function existsOffset(predicate_mut, array_mut, index_mut) {\r\n    existsOffset:\r\n    while (true) {\r\n        const predicate = predicate_mut, array = array_mut, index = index_mut;\r\n        if (index === array.length) {\r\n            return false;\r\n        }\r\n        else if (predicate(array[index])) {\r\n            return true;\r\n        }\r\n        else {\r\n            predicate_mut = predicate;\r\n            array_mut = array;\r\n            index_mut = (index + 1);\r\n            continue existsOffset;\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function exists(predicate, array) {\r\n    return existsOffset(predicate, array, 0);\r\n}\r\n\r\nexport function existsOffset2(predicate_mut, array1_mut, array2_mut, index_mut) {\r\n    existsOffset2:\r\n    while (true) {\r\n        const predicate = predicate_mut, array1 = array1_mut, array2 = array2_mut, index = index_mut;\r\n        if (index === array1.length) {\r\n            return false;\r\n        }\r\n        else if (predicate(array1[index], array2[index])) {\r\n            return true;\r\n        }\r\n        else {\r\n            predicate_mut = predicate;\r\n            array1_mut = array1;\r\n            array2_mut = array2;\r\n            index_mut = (index + 1);\r\n            continue existsOffset2;\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function exists2(predicate, array1, array2) {\r\n    if (array1.length !== array2.length) {\r\n        differentLengths();\r\n    }\r\n    return existsOffset2(predicate, array1, array2, 0);\r\n}\r\n\r\nexport function sum(array, adder) {\r\n    let acc = adder.GetZero();\r\n    for (let i = 0; i <= (array.length - 1); i++) {\r\n        acc = adder.Add(acc, array[i]);\r\n    }\r\n    return acc;\r\n}\r\n\r\nexport function sumBy(projection, array, adder) {\r\n    let acc = adder.GetZero();\r\n    for (let i = 0; i <= (array.length - 1); i++) {\r\n        acc = adder.Add(acc, projection(array[i]));\r\n    }\r\n    return acc;\r\n}\r\n\r\nexport function maxBy(projection, xs, comparer) {\r\n    return reduce((x, y) => ((comparer.Compare(projection(y), projection(x)) > 0) ? y : x), xs);\r\n}\r\n\r\nexport function max(xs, comparer) {\r\n    return reduce((x, y) => ((comparer.Compare(y, x) > 0) ? y : x), xs);\r\n}\r\n\r\nexport function minBy(projection, xs, comparer) {\r\n    return reduce((x, y) => ((comparer.Compare(projection(y), projection(x)) > 0) ? x : y), xs);\r\n}\r\n\r\nexport function min(xs, comparer) {\r\n    return reduce((x, y) => ((comparer.Compare(y, x) > 0) ? x : y), xs);\r\n}\r\n\r\nexport function average(array, averager) {\r\n    if (array.length === 0) {\r\n        throw (new Error(\"The input array was empty\\\\nParameter name: array\"));\r\n    }\r\n    let total = averager.GetZero();\r\n    for (let i = 0; i <= (array.length - 1); i++) {\r\n        total = averager.Add(total, array[i]);\r\n    }\r\n    return averager.DivideByInt(total, array.length);\r\n}\r\n\r\nexport function averageBy(projection, array, averager) {\r\n    if (array.length === 0) {\r\n        throw (new Error(\"The input array was empty\\\\nParameter name: array\"));\r\n    }\r\n    let total = averager.GetZero();\r\n    for (let i = 0; i <= (array.length - 1); i++) {\r\n        total = averager.Add(total, projection(array[i]));\r\n    }\r\n    return averager.DivideByInt(total, array.length);\r\n}\r\n\r\nexport function windowed(windowSize, source) {\r\n    if (windowSize <= 0) {\r\n        throw (new Error(\"windowSize must be positive\"));\r\n    }\r\n    let res;\r\n    const len = max_1((x, y) => comparePrimitives(x, y), 0, source.length - windowSize) | 0;\r\n    res = (new Array(len));\r\n    for (let i = windowSize; i <= source.length; i++) {\r\n        res[i - windowSize] = source.slice(i - windowSize, (i - 1) + 1);\r\n    }\r\n    return res;\r\n}\r\n\r\nexport function splitInto(chunks, array) {\r\n    if (chunks < 1) {\r\n        throw (new Error(\"The input must be positive.\\\\nParameter name: chunks\"));\r\n    }\r\n    if (array.length === 0) {\r\n        return [[]];\r\n    }\r\n    else {\r\n        const result = [];\r\n        const chunks_1 = min_1((x, y) => comparePrimitives(x, y), chunks, array.length) | 0;\r\n        const minChunkSize = (~(~(array.length / chunks_1))) | 0;\r\n        const chunksWithExtraItem = (array.length % chunks_1) | 0;\r\n        for (let i = 0; i <= (chunks_1 - 1); i++) {\r\n            const chunkSize = ((i < chunksWithExtraItem) ? (minChunkSize + 1) : minChunkSize) | 0;\r\n            let slice;\r\n            const start_1 = ((i * minChunkSize) + min_1((x_1, y_1) => comparePrimitives(x_1, y_1), chunksWithExtraItem, i)) | 0;\r\n            slice = (array.slice(start_1, (start_1 + chunkSize)));\r\n            void (result.push(slice));\r\n        }\r\n        return result;\r\n    }\r\n}\r\n\r\nexport function transpose(arrays, cons) {\r\n    const arrays_1 = Array.isArray(arrays) ? arrays : (Array.from(arrays));\r\n    const len = arrays_1.length | 0;\r\n    if (len === 0) {\r\n        return new Array(0);\r\n    }\r\n    else {\r\n        const lenInner = arrays_1[0].length | 0;\r\n        if (!forAll((a) => (a.length === lenInner), arrays_1)) {\r\n            differentLengths();\r\n        }\r\n        const result = new Array(lenInner);\r\n        for (let i = 0; i <= (lenInner - 1); i++) {\r\n            result[i] = Helpers_allocateArrayFromCons(cons, len);\r\n            for (let j = 0; j <= (len - 1); j++) {\r\n                result[i][j] = arrays_1[j][i];\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n}\r\n\r\n","import { join } from \"./String.js\";\r\nimport { uncurry, isArrayLike, getEnumerator, toIterator, compare, structuralHash, equals } from \"./Util.js\";\r\nimport { Record } from \"./Types.js\";\r\nimport { class_type, record_type, option_type } from \"./Reflection.js\";\r\nimport { defaultArg, value as value_1, some } from \"./Option.js\";\r\nimport { transpose as transpose_1, splitInto as splitInto_1, windowed as windowed_1, pairwise as pairwise_1, chunkBySize as chunkBySize_1, map as map_1, permute as permute_1, tryFindIndexBack as tryFindIndexBack_1, tryFindBack as tryFindBack_1, scanBack as scanBack_1, foldBack2 as foldBack2_1, foldBack as foldBack_1, fill } from \"./Array.js\";\r\n\r\nexport const SR_indexOutOfBounds = \"The index was outside the range of elements in the list.\";\r\n\r\nexport const SR_inputListWasEmpty = \"List was empty\";\r\n\r\nexport const SR_inputMustBeNonNegative = \"The input must be non-negative.\";\r\n\r\nexport const SR_inputSequenceEmpty = \"The input sequence was empty.\";\r\n\r\nexport const SR_inputSequenceTooLong = \"The input sequence contains more than one element.\";\r\n\r\nexport const SR_keyNotFoundAlt = \"An index satisfying the predicate was not found in the collection.\";\r\n\r\nexport const SR_listsHadDifferentLengths = \"The lists had different lengths.\";\r\n\r\nexport const SR_notEnoughElements = \"The input sequence has an insufficient number of elements.\";\r\n\r\nexport class FSharpList extends Record {\r\n    constructor(head, tail) {\r\n        super();\r\n        this.head = head;\r\n        this.tail = tail;\r\n    }\r\n    toString() {\r\n        const xs = this;\r\n        return (\"[\" + join(\"; \", xs)) + \"]\";\r\n    }\r\n    Equals(other) {\r\n        const xs = this;\r\n        if (xs === other) {\r\n            return true;\r\n        }\r\n        else {\r\n            const loop = (xs_1_mut, ys_1_mut) => {\r\n                loop:\r\n                while (true) {\r\n                    const xs_1 = xs_1_mut, ys_1 = ys_1_mut;\r\n                    const matchValue = [xs_1.tail, ys_1.tail];\r\n                    if (matchValue[0] != null) {\r\n                        if (matchValue[1] != null) {\r\n                            const xt = matchValue[0];\r\n                            const yt = matchValue[1];\r\n                            if (equals(xs_1.head, ys_1.head)) {\r\n                                xs_1_mut = xt;\r\n                                ys_1_mut = yt;\r\n                                continue loop;\r\n                            }\r\n                            else {\r\n                                return false;\r\n                            }\r\n                        }\r\n                        else {\r\n                            return false;\r\n                        }\r\n                    }\r\n                    else if (matchValue[1] != null) {\r\n                        return false;\r\n                    }\r\n                    else {\r\n                        return true;\r\n                    }\r\n                    break;\r\n                }\r\n            };\r\n            return loop(xs, other);\r\n        }\r\n    }\r\n    GetHashCode() {\r\n        const xs = this;\r\n        const loop = (i_mut, h_mut, xs_1_mut) => {\r\n            loop:\r\n            while (true) {\r\n                const i = i_mut, h = h_mut, xs_1 = xs_1_mut;\r\n                const matchValue = xs_1.tail;\r\n                if (matchValue != null) {\r\n                    const t = matchValue;\r\n                    if (i > 18) {\r\n                        return h | 0;\r\n                    }\r\n                    else {\r\n                        i_mut = (i + 1);\r\n                        h_mut = (((h << 1) + structuralHash(xs_1.head)) + (631 * i));\r\n                        xs_1_mut = t;\r\n                        continue loop;\r\n                    }\r\n                }\r\n                else {\r\n                    return h | 0;\r\n                }\r\n                break;\r\n            }\r\n        };\r\n        return loop(0, 0, xs) | 0;\r\n    }\r\n    toJSON(_key) {\r\n        const this$ = this;\r\n        return Array.from(this$);\r\n    }\r\n    CompareTo(other) {\r\n        const xs = this;\r\n        const loop = (xs_1_mut, ys_1_mut) => {\r\n            loop:\r\n            while (true) {\r\n                const xs_1 = xs_1_mut, ys_1 = ys_1_mut;\r\n                const matchValue = [xs_1.tail, ys_1.tail];\r\n                if (matchValue[0] != null) {\r\n                    if (matchValue[1] != null) {\r\n                        const xt = matchValue[0];\r\n                        const yt = matchValue[1];\r\n                        const c = compare(xs_1.head, ys_1.head) | 0;\r\n                        if (c === 0) {\r\n                            xs_1_mut = xt;\r\n                            ys_1_mut = yt;\r\n                            continue loop;\r\n                        }\r\n                        else {\r\n                            return c | 0;\r\n                        }\r\n                    }\r\n                    else {\r\n                        return 1;\r\n                    }\r\n                }\r\n                else if (matchValue[1] != null) {\r\n                    return -1;\r\n                }\r\n                else {\r\n                    return 0;\r\n                }\r\n                break;\r\n            }\r\n        };\r\n        return loop(xs, other) | 0;\r\n    }\r\n    GetEnumerator() {\r\n        const xs = this;\r\n        return ListEnumerator$1_$ctor_3002E699(xs);\r\n    }\r\n    [Symbol.iterator]() {\r\n        return toIterator(this.GetEnumerator());\r\n    }\r\n    [\"System.Collections.IEnumerable.GetEnumerator\"]() {\r\n        const xs = this;\r\n        return getEnumerator(xs);\r\n    }\r\n}\r\n\r\nexport function FSharpList$reflection(gen0) {\r\n    return record_type(\"ListModule.FSharpList\", [gen0], FSharpList, () => [[\"head\", gen0], [\"tail\", option_type(FSharpList$reflection(gen0))]]);\r\n}\r\n\r\nexport class ListEnumerator$1 {\r\n    constructor(xs) {\r\n        this.xs = xs;\r\n        this.it = this.xs;\r\n        this.current = null;\r\n    }\r\n    [\"System.Collections.Generic.IEnumerator`1.get_Current\"]() {\r\n        const __ = this;\r\n        return __.current;\r\n    }\r\n    [\"System.Collections.IEnumerator.get_Current\"]() {\r\n        const __ = this;\r\n        return __.current;\r\n    }\r\n    [\"System.Collections.IEnumerator.MoveNext\"]() {\r\n        const __ = this;\r\n        const matchValue = __.it.tail;\r\n        if (matchValue != null) {\r\n            const t = matchValue;\r\n            __.current = __.it.head;\r\n            __.it = t;\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n    [\"System.Collections.IEnumerator.Reset\"]() {\r\n        const __ = this;\r\n        __.it = __.xs;\r\n        __.current = null;\r\n    }\r\n    Dispose() {\r\n    }\r\n}\r\n\r\nexport function ListEnumerator$1$reflection(gen0) {\r\n    return class_type(\"ListModule.ListEnumerator`1\", [gen0], ListEnumerator$1);\r\n}\r\n\r\nexport function ListEnumerator$1_$ctor_3002E699(xs) {\r\n    return new ListEnumerator$1(xs);\r\n}\r\n\r\nexport function FSharpList_get_Empty() {\r\n    return new FSharpList(null, void 0);\r\n}\r\n\r\nexport function FSharpList_Cons_305B8EAC(x, xs) {\r\n    return new FSharpList(x, xs);\r\n}\r\n\r\nexport function FSharpList__get_IsEmpty(xs) {\r\n    return xs.tail == null;\r\n}\r\n\r\nexport function FSharpList__get_Length(xs) {\r\n    const loop = (i_mut, xs_1_mut) => {\r\n        loop:\r\n        while (true) {\r\n            const i = i_mut, xs_1 = xs_1_mut;\r\n            const matchValue = xs_1.tail;\r\n            if (matchValue != null) {\r\n                i_mut = (i + 1);\r\n                xs_1_mut = matchValue;\r\n                continue loop;\r\n            }\r\n            else {\r\n                return i | 0;\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    return loop(0, xs) | 0;\r\n}\r\n\r\nexport function FSharpList__get_Head(xs) {\r\n    const matchValue = xs.tail;\r\n    if (matchValue != null) {\r\n        return xs.head;\r\n    }\r\n    else {\r\n        throw (new Error((SR_inputListWasEmpty + \"\\\\nParameter name: \") + \"list\"));\r\n    }\r\n}\r\n\r\nexport function FSharpList__get_Tail(xs) {\r\n    const matchValue = xs.tail;\r\n    if (matchValue != null) {\r\n        return matchValue;\r\n    }\r\n    else {\r\n        throw (new Error((SR_inputListWasEmpty + \"\\\\nParameter name: \") + \"list\"));\r\n    }\r\n}\r\n\r\nexport function FSharpList__get_Item_Z524259A4(xs, index) {\r\n    const loop = (i_mut, xs_1_mut) => {\r\n        loop:\r\n        while (true) {\r\n            const i = i_mut, xs_1 = xs_1_mut;\r\n            const matchValue = xs_1.tail;\r\n            if (matchValue != null) {\r\n                if (i === index) {\r\n                    return xs_1.head;\r\n                }\r\n                else {\r\n                    i_mut = (i + 1);\r\n                    xs_1_mut = matchValue;\r\n                    continue loop;\r\n                }\r\n            }\r\n            else {\r\n                throw (new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"index\"));\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    return loop(0, xs);\r\n}\r\n\r\nexport function empty() {\r\n    return FSharpList_get_Empty();\r\n}\r\n\r\nexport function cons(x, xs) {\r\n    return FSharpList_Cons_305B8EAC(x, xs);\r\n}\r\n\r\nexport function singleton(x) {\r\n    return FSharpList_Cons_305B8EAC(x, FSharpList_get_Empty());\r\n}\r\n\r\nexport function isEmpty(xs) {\r\n    return FSharpList__get_IsEmpty(xs);\r\n}\r\n\r\nexport function length(xs) {\r\n    return FSharpList__get_Length(xs);\r\n}\r\n\r\nexport function head(xs) {\r\n    return FSharpList__get_Head(xs);\r\n}\r\n\r\nexport function tryHead(xs) {\r\n    if (FSharpList__get_IsEmpty(xs)) {\r\n        return void 0;\r\n    }\r\n    else {\r\n        return some(FSharpList__get_Head(xs));\r\n    }\r\n}\r\n\r\nexport function tail(xs) {\r\n    return FSharpList__get_Tail(xs);\r\n}\r\n\r\nexport function tryLast(xs_mut) {\r\n    tryLast:\r\n    while (true) {\r\n        const xs = xs_mut;\r\n        if (FSharpList__get_IsEmpty(xs)) {\r\n            return void 0;\r\n        }\r\n        else {\r\n            const t = FSharpList__get_Tail(xs);\r\n            if (FSharpList__get_IsEmpty(t)) {\r\n                return some(FSharpList__get_Head(xs));\r\n            }\r\n            else {\r\n                xs_mut = t;\r\n                continue tryLast;\r\n            }\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function last(xs) {\r\n    const matchValue = tryLast(xs);\r\n    if (matchValue == null) {\r\n        throw (new Error(SR_inputListWasEmpty));\r\n    }\r\n    else {\r\n        return value_1(matchValue);\r\n    }\r\n}\r\n\r\nexport function compareWith(comparer, xs, ys) {\r\n    const loop = (xs_1_mut, ys_1_mut) => {\r\n        loop:\r\n        while (true) {\r\n            const xs_1 = xs_1_mut, ys_1 = ys_1_mut;\r\n            const matchValue = [FSharpList__get_IsEmpty(xs_1), FSharpList__get_IsEmpty(ys_1)];\r\n            if (matchValue[0]) {\r\n                if (matchValue[1]) {\r\n                    return 0;\r\n                }\r\n                else {\r\n                    return -1;\r\n                }\r\n            }\r\n            else if (matchValue[1]) {\r\n                return 1;\r\n            }\r\n            else {\r\n                const c = comparer(FSharpList__get_Head(xs_1), FSharpList__get_Head(ys_1)) | 0;\r\n                if (c === 0) {\r\n                    xs_1_mut = FSharpList__get_Tail(xs_1);\r\n                    ys_1_mut = FSharpList__get_Tail(ys_1);\r\n                    continue loop;\r\n                }\r\n                else {\r\n                    return c | 0;\r\n                }\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    return loop(xs, ys) | 0;\r\n}\r\n\r\nexport function toArray(xs) {\r\n    const len = FSharpList__get_Length(xs) | 0;\r\n    const res = fill(new Array(len), 0, len, null);\r\n    const loop = (i_mut, xs_1_mut) => {\r\n        loop:\r\n        while (true) {\r\n            const i = i_mut, xs_1 = xs_1_mut;\r\n            if (!FSharpList__get_IsEmpty(xs_1)) {\r\n                res[i] = FSharpList__get_Head(xs_1);\r\n                i_mut = (i + 1);\r\n                xs_1_mut = FSharpList__get_Tail(xs_1);\r\n                continue loop;\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    loop(0, xs);\r\n    return res;\r\n}\r\n\r\nexport function fold(folder, state, xs) {\r\n    let acc = state;\r\n    let xs_1 = xs;\r\n    while (!FSharpList__get_IsEmpty(xs_1)) {\r\n        acc = folder(acc, FSharpList__get_Head(xs_1));\r\n        xs_1 = FSharpList__get_Tail(xs_1);\r\n    }\r\n    return acc;\r\n}\r\n\r\nexport function reverse(xs) {\r\n    return fold((acc, x) => FSharpList_Cons_305B8EAC(x, acc), FSharpList_get_Empty(), xs);\r\n}\r\n\r\nexport function foldBack(folder, xs, state) {\r\n    return foldBack_1(folder, toArray(xs), state);\r\n}\r\n\r\nexport function foldIndexed(folder, state, xs) {\r\n    const loop = (i_mut, acc_mut, xs_1_mut) => {\r\n        loop:\r\n        while (true) {\r\n            const i = i_mut, acc = acc_mut, xs_1 = xs_1_mut;\r\n            if (FSharpList__get_IsEmpty(xs_1)) {\r\n                return acc;\r\n            }\r\n            else {\r\n                i_mut = (i + 1);\r\n                acc_mut = folder(i, acc, FSharpList__get_Head(xs_1));\r\n                xs_1_mut = FSharpList__get_Tail(xs_1);\r\n                continue loop;\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    return loop(0, state, xs);\r\n}\r\n\r\nexport function fold2(folder, state, xs, ys) {\r\n    let acc = state;\r\n    let xs_1 = xs;\r\n    let ys_1 = ys;\r\n    while ((!FSharpList__get_IsEmpty(xs_1)) ? (!FSharpList__get_IsEmpty(ys_1)) : false) {\r\n        acc = folder(acc, FSharpList__get_Head(xs_1), FSharpList__get_Head(ys_1));\r\n        xs_1 = FSharpList__get_Tail(xs_1);\r\n        ys_1 = FSharpList__get_Tail(ys_1);\r\n    }\r\n    return acc;\r\n}\r\n\r\nexport function foldBack2(folder, xs, ys, state) {\r\n    return foldBack2_1(folder, toArray(xs), toArray(ys), state);\r\n}\r\n\r\nexport function unfold(gen, state) {\r\n    const loop = (acc_mut, node_mut) => {\r\n        let t;\r\n        loop:\r\n        while (true) {\r\n            const acc = acc_mut, node = node_mut;\r\n            const matchValue = gen(acc);\r\n            if (matchValue != null) {\r\n                acc_mut = matchValue[1];\r\n                node_mut = ((t = (new FSharpList(matchValue[0], void 0)), (node.tail = t, t)));\r\n                continue loop;\r\n            }\r\n            else {\r\n                return node;\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    const root = FSharpList_get_Empty();\r\n    const node_1 = loop(state, root);\r\n    const t_2 = FSharpList_get_Empty();\r\n    node_1.tail = t_2;\r\n    return FSharpList__get_Tail(root);\r\n}\r\n\r\nexport function iterate(action, xs) {\r\n    fold((unitVar0, x) => {\r\n        action(x);\r\n    }, void 0, xs);\r\n}\r\n\r\nexport function iterate2(action, xs, ys) {\r\n    fold2((unitVar0, x, y) => {\r\n        action(x, y);\r\n    }, void 0, xs, ys);\r\n}\r\n\r\nexport function iterateIndexed(action, xs) {\r\n    void fold((i, x) => {\r\n        action(i, x);\r\n        return (i + 1) | 0;\r\n    }, 0, xs);\r\n}\r\n\r\nexport function iterateIndexed2(action, xs, ys) {\r\n    void fold2((i, x, y) => {\r\n        action(i, x, y);\r\n        return (i + 1) | 0;\r\n    }, 0, xs, ys);\r\n}\r\n\r\nexport function toSeq(xs) {\r\n    return xs;\r\n}\r\n\r\nexport function ofArrayWithTail(xs, tail_1) {\r\n    let res = tail_1;\r\n    for (let i = xs.length - 1; i >= 0; i--) {\r\n        res = FSharpList_Cons_305B8EAC(xs[i], res);\r\n    }\r\n    return res;\r\n}\r\n\r\nexport function ofArray(xs) {\r\n    return ofArrayWithTail(xs, FSharpList_get_Empty());\r\n}\r\n\r\nexport function ofSeq(xs) {\r\n    let xs_3, t;\r\n    if (isArrayLike(xs)) {\r\n        return ofArray(xs);\r\n    }\r\n    else if (xs instanceof FSharpList) {\r\n        return xs;\r\n    }\r\n    else {\r\n        const root = FSharpList_get_Empty();\r\n        let node = root;\r\n        const enumerator = getEnumerator(xs);\r\n        try {\r\n            while (enumerator[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n                const x = enumerator[\"System.Collections.Generic.IEnumerator`1.get_Current\"]();\r\n                node = ((xs_3 = node, (t = (new FSharpList(x, void 0)), (xs_3.tail = t, t))));\r\n            }\r\n        }\r\n        finally {\r\n            enumerator.Dispose();\r\n        }\r\n        const xs_5 = node;\r\n        const t_2 = FSharpList_get_Empty();\r\n        xs_5.tail = t_2;\r\n        return FSharpList__get_Tail(root);\r\n    }\r\n}\r\n\r\nexport function concat(lists) {\r\n    const root = FSharpList_get_Empty();\r\n    let node = root;\r\n    const action = (xs) => {\r\n        node = fold((acc, x) => {\r\n            const t = new FSharpList(x, void 0);\r\n            acc.tail = t;\r\n            return t;\r\n        }, node, xs);\r\n    };\r\n    if (isArrayLike(lists)) {\r\n        lists.forEach(action);\r\n    }\r\n    else if (lists instanceof FSharpList) {\r\n        iterate(action, lists);\r\n    }\r\n    else {\r\n        const enumerator = getEnumerator(lists);\r\n        try {\r\n            while (enumerator[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n                action(enumerator[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\r\n            }\r\n        }\r\n        finally {\r\n            enumerator.Dispose();\r\n        }\r\n    }\r\n    const xs_6 = node;\r\n    const t_2 = FSharpList_get_Empty();\r\n    xs_6.tail = t_2;\r\n    return FSharpList__get_Tail(root);\r\n}\r\n\r\nexport function scan(folder, state, xs) {\r\n    let xs_4, t_2;\r\n    const root = FSharpList_get_Empty();\r\n    let node;\r\n    const t = new FSharpList(state, void 0);\r\n    root.tail = t;\r\n    node = t;\r\n    let acc = state;\r\n    let xs_3 = xs;\r\n    while (!FSharpList__get_IsEmpty(xs_3)) {\r\n        acc = folder(acc, FSharpList__get_Head(xs_3));\r\n        node = ((xs_4 = node, (t_2 = (new FSharpList(acc, void 0)), (xs_4.tail = t_2, t_2))));\r\n        xs_3 = FSharpList__get_Tail(xs_3);\r\n    }\r\n    const xs_6 = node;\r\n    const t_4 = FSharpList_get_Empty();\r\n    xs_6.tail = t_4;\r\n    return FSharpList__get_Tail(root);\r\n}\r\n\r\nexport function scanBack(folder, xs, state) {\r\n    return ofArray(scanBack_1(folder, toArray(xs), state));\r\n}\r\n\r\nexport function append(xs, ys) {\r\n    return fold((acc, x) => FSharpList_Cons_305B8EAC(x, acc), ys, reverse(xs));\r\n}\r\n\r\nexport function collect(mapping, xs) {\r\n    let xs_1, t;\r\n    const root = FSharpList_get_Empty();\r\n    let node = root;\r\n    let ys = xs;\r\n    while (!FSharpList__get_IsEmpty(ys)) {\r\n        let zs = mapping(FSharpList__get_Head(ys));\r\n        while (!FSharpList__get_IsEmpty(zs)) {\r\n            node = ((xs_1 = node, (t = (new FSharpList(FSharpList__get_Head(zs), void 0)), (xs_1.tail = t, t))));\r\n            zs = FSharpList__get_Tail(zs);\r\n        }\r\n        ys = FSharpList__get_Tail(ys);\r\n    }\r\n    const xs_3 = node;\r\n    const t_2 = FSharpList_get_Empty();\r\n    xs_3.tail = t_2;\r\n    return FSharpList__get_Tail(root);\r\n}\r\n\r\nexport function mapIndexed(mapping, xs) {\r\n    const root = FSharpList_get_Empty();\r\n    const node = foldIndexed((i, acc, x) => {\r\n        const t = new FSharpList(mapping(i, x), void 0);\r\n        acc.tail = t;\r\n        return t;\r\n    }, root, xs);\r\n    const t_2 = FSharpList_get_Empty();\r\n    node.tail = t_2;\r\n    return FSharpList__get_Tail(root);\r\n}\r\n\r\nexport function map(mapping, xs) {\r\n    const root = FSharpList_get_Empty();\r\n    const node = fold((acc, x) => {\r\n        const t = new FSharpList(mapping(x), void 0);\r\n        acc.tail = t;\r\n        return t;\r\n    }, root, xs);\r\n    const t_2 = FSharpList_get_Empty();\r\n    node.tail = t_2;\r\n    return FSharpList__get_Tail(root);\r\n}\r\n\r\nexport function indexed(xs) {\r\n    return mapIndexed((i, x) => [i, x], xs);\r\n}\r\n\r\nexport function map2(mapping, xs, ys) {\r\n    const root = FSharpList_get_Empty();\r\n    const node = fold2((acc, x, y) => {\r\n        const t = new FSharpList(mapping(x, y), void 0);\r\n        acc.tail = t;\r\n        return t;\r\n    }, root, xs, ys);\r\n    const t_2 = FSharpList_get_Empty();\r\n    node.tail = t_2;\r\n    return FSharpList__get_Tail(root);\r\n}\r\n\r\nexport function mapIndexed2(mapping, xs, ys) {\r\n    const loop = (i_mut, acc_mut, xs_1_mut, ys_1_mut) => {\r\n        let t;\r\n        loop:\r\n        while (true) {\r\n            const i = i_mut, acc = acc_mut, xs_1 = xs_1_mut, ys_1 = ys_1_mut;\r\n            if (FSharpList__get_IsEmpty(xs_1) ? true : FSharpList__get_IsEmpty(ys_1)) {\r\n                return acc;\r\n            }\r\n            else {\r\n                i_mut = (i + 1);\r\n                acc_mut = ((t = (new FSharpList(mapping(i, FSharpList__get_Head(xs_1), FSharpList__get_Head(ys_1)), void 0)), (acc.tail = t, t)));\r\n                xs_1_mut = FSharpList__get_Tail(xs_1);\r\n                ys_1_mut = FSharpList__get_Tail(ys_1);\r\n                continue loop;\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    const root = FSharpList_get_Empty();\r\n    const node_1 = loop(0, root, xs, ys);\r\n    const t_2 = FSharpList_get_Empty();\r\n    node_1.tail = t_2;\r\n    return FSharpList__get_Tail(root);\r\n}\r\n\r\nexport function map3(mapping, xs, ys, zs) {\r\n    const loop = (acc_mut, xs_1_mut, ys_1_mut, zs_1_mut) => {\r\n        let t;\r\n        loop:\r\n        while (true) {\r\n            const acc = acc_mut, xs_1 = xs_1_mut, ys_1 = ys_1_mut, zs_1 = zs_1_mut;\r\n            if ((FSharpList__get_IsEmpty(xs_1) ? true : FSharpList__get_IsEmpty(ys_1)) ? true : FSharpList__get_IsEmpty(zs_1)) {\r\n                return acc;\r\n            }\r\n            else {\r\n                acc_mut = ((t = (new FSharpList(mapping(FSharpList__get_Head(xs_1), FSharpList__get_Head(ys_1), FSharpList__get_Head(zs_1)), void 0)), (acc.tail = t, t)));\r\n                xs_1_mut = FSharpList__get_Tail(xs_1);\r\n                ys_1_mut = FSharpList__get_Tail(ys_1);\r\n                zs_1_mut = FSharpList__get_Tail(zs_1);\r\n                continue loop;\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    const root = FSharpList_get_Empty();\r\n    const node_1 = loop(root, xs, ys, zs);\r\n    const t_2 = FSharpList_get_Empty();\r\n    node_1.tail = t_2;\r\n    return FSharpList__get_Tail(root);\r\n}\r\n\r\nexport function mapFold(mapping, state, xs) {\r\n    const root = FSharpList_get_Empty();\r\n    const patternInput_1 = fold((tupledArg, x) => {\r\n        let t;\r\n        const patternInput = mapping(tupledArg[1], x);\r\n        return [(t = (new FSharpList(patternInput[0], void 0)), (tupledArg[0].tail = t, t)), patternInput[1]];\r\n    }, [root, state], xs);\r\n    const t_2 = FSharpList_get_Empty();\r\n    patternInput_1[0].tail = t_2;\r\n    return [FSharpList__get_Tail(root), patternInput_1[1]];\r\n}\r\n\r\nexport function mapFoldBack(mapping, xs, state) {\r\n    return mapFold((acc, x) => mapping(x, acc), state, reverse(xs));\r\n}\r\n\r\nexport function tryPick(f, xs) {\r\n    const loop = (xs_1_mut) => {\r\n        loop:\r\n        while (true) {\r\n            const xs_1 = xs_1_mut;\r\n            if (FSharpList__get_IsEmpty(xs_1)) {\r\n                return void 0;\r\n            }\r\n            else {\r\n                const matchValue = f(FSharpList__get_Head(xs_1));\r\n                if (matchValue == null) {\r\n                    xs_1_mut = FSharpList__get_Tail(xs_1);\r\n                    continue loop;\r\n                }\r\n                else {\r\n                    return matchValue;\r\n                }\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    return loop(xs);\r\n}\r\n\r\nexport function pick(f, xs) {\r\n    const matchValue = tryPick(f, xs);\r\n    if (matchValue == null) {\r\n        throw (new Error(SR_keyNotFoundAlt));\r\n    }\r\n    else {\r\n        return value_1(matchValue);\r\n    }\r\n}\r\n\r\nexport function tryFind(f, xs) {\r\n    return tryPick((x) => (f(x) ? some(x) : (void 0)), xs);\r\n}\r\n\r\nexport function find(f, xs) {\r\n    const matchValue = tryFind(f, xs);\r\n    if (matchValue == null) {\r\n        throw (new Error(SR_keyNotFoundAlt));\r\n    }\r\n    else {\r\n        return value_1(matchValue);\r\n    }\r\n}\r\n\r\nexport function tryFindBack(f, xs) {\r\n    return tryFindBack_1(f, toArray(xs));\r\n}\r\n\r\nexport function findBack(f, xs) {\r\n    const matchValue = tryFindBack(f, xs);\r\n    if (matchValue == null) {\r\n        throw (new Error(SR_keyNotFoundAlt));\r\n    }\r\n    else {\r\n        return value_1(matchValue);\r\n    }\r\n}\r\n\r\nexport function tryFindIndex(f, xs) {\r\n    const loop = (i_mut, xs_1_mut) => {\r\n        loop:\r\n        while (true) {\r\n            const i = i_mut, xs_1 = xs_1_mut;\r\n            if (FSharpList__get_IsEmpty(xs_1)) {\r\n                return void 0;\r\n            }\r\n            else if (f(FSharpList__get_Head(xs_1))) {\r\n                return i;\r\n            }\r\n            else {\r\n                i_mut = (i + 1);\r\n                xs_1_mut = FSharpList__get_Tail(xs_1);\r\n                continue loop;\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    return loop(0, xs);\r\n}\r\n\r\nexport function findIndex(f, xs) {\r\n    const matchValue = tryFindIndex(f, xs);\r\n    if (matchValue == null) {\r\n        throw (new Error(SR_keyNotFoundAlt));\r\n    }\r\n    else {\r\n        return matchValue | 0;\r\n    }\r\n}\r\n\r\nexport function tryFindIndexBack(f, xs) {\r\n    return tryFindIndexBack_1(f, toArray(xs));\r\n}\r\n\r\nexport function findIndexBack(f, xs) {\r\n    const matchValue = tryFindIndexBack(f, xs);\r\n    if (matchValue == null) {\r\n        throw (new Error(SR_keyNotFoundAlt));\r\n    }\r\n    else {\r\n        return matchValue | 0;\r\n    }\r\n}\r\n\r\nexport function tryItem(n, xs) {\r\n    const loop = (i_mut, xs_1_mut) => {\r\n        loop:\r\n        while (true) {\r\n            const i = i_mut, xs_1 = xs_1_mut;\r\n            if (FSharpList__get_IsEmpty(xs_1)) {\r\n                return void 0;\r\n            }\r\n            else if (i === n) {\r\n                return some(FSharpList__get_Head(xs_1));\r\n            }\r\n            else {\r\n                i_mut = (i + 1);\r\n                xs_1_mut = FSharpList__get_Tail(xs_1);\r\n                continue loop;\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    return loop(0, xs);\r\n}\r\n\r\nexport function item(n, xs) {\r\n    return FSharpList__get_Item_Z524259A4(xs, n);\r\n}\r\n\r\nexport function filter(f, xs) {\r\n    const root = FSharpList_get_Empty();\r\n    const node = fold((acc, x) => {\r\n        if (f(x)) {\r\n            const t = new FSharpList(x, void 0);\r\n            acc.tail = t;\r\n            return t;\r\n        }\r\n        else {\r\n            return acc;\r\n        }\r\n    }, root, xs);\r\n    const t_2 = FSharpList_get_Empty();\r\n    node.tail = t_2;\r\n    return FSharpList__get_Tail(root);\r\n}\r\n\r\nexport function partition(f, xs) {\r\n    const patternInput = [FSharpList_get_Empty(), FSharpList_get_Empty()];\r\n    const root2 = patternInput[1];\r\n    const root1 = patternInput[0];\r\n    const patternInput_1 = fold(uncurry(2, (tupledArg) => {\r\n        const lacc = tupledArg[0];\r\n        const racc = tupledArg[1];\r\n        return (x) => {\r\n            let t, t_2;\r\n            return f(x) ? [(t = (new FSharpList(x, void 0)), (lacc.tail = t, t)), racc] : [lacc, (t_2 = (new FSharpList(x, void 0)), (racc.tail = t_2, t_2))];\r\n        };\r\n    }), [root1, root2], xs);\r\n    const t_4 = FSharpList_get_Empty();\r\n    patternInput_1[0].tail = t_4;\r\n    const t_5 = FSharpList_get_Empty();\r\n    patternInput_1[1].tail = t_5;\r\n    return [FSharpList__get_Tail(root1), FSharpList__get_Tail(root2)];\r\n}\r\n\r\nexport function choose(f, xs) {\r\n    const root = FSharpList_get_Empty();\r\n    const node = fold((acc, x) => {\r\n        const matchValue = f(x);\r\n        if (matchValue == null) {\r\n            return acc;\r\n        }\r\n        else {\r\n            const t = new FSharpList(value_1(matchValue), void 0);\r\n            acc.tail = t;\r\n            return t;\r\n        }\r\n    }, root, xs);\r\n    const t_2 = FSharpList_get_Empty();\r\n    node.tail = t_2;\r\n    return FSharpList__get_Tail(root);\r\n}\r\n\r\nexport function contains(value, xs, eq) {\r\n    return tryFindIndex((v) => eq.Equals(value, v), xs) != null;\r\n}\r\n\r\nexport function initialize(n, f) {\r\n    let xs, t;\r\n    const root = FSharpList_get_Empty();\r\n    let node = root;\r\n    for (let i = 0; i <= (n - 1); i++) {\r\n        node = ((xs = node, (t = (new FSharpList(f(i), void 0)), (xs.tail = t, t))));\r\n    }\r\n    const xs_2 = node;\r\n    const t_2 = FSharpList_get_Empty();\r\n    xs_2.tail = t_2;\r\n    return FSharpList__get_Tail(root);\r\n}\r\n\r\nexport function replicate(n, x) {\r\n    return initialize(n, (_arg1) => x);\r\n}\r\n\r\nexport function reduce(f, xs) {\r\n    if (FSharpList__get_IsEmpty(xs)) {\r\n        throw (new Error(SR_inputListWasEmpty));\r\n    }\r\n    else {\r\n        return fold(f, head(xs), tail(xs));\r\n    }\r\n}\r\n\r\nexport function reduceBack(f, xs) {\r\n    if (FSharpList__get_IsEmpty(xs)) {\r\n        throw (new Error(SR_inputListWasEmpty));\r\n    }\r\n    else {\r\n        return foldBack(f, tail(xs), head(xs));\r\n    }\r\n}\r\n\r\nexport function forAll(f, xs) {\r\n    return fold((acc, x) => (acc ? f(x) : false), true, xs);\r\n}\r\n\r\nexport function forAll2(f, xs, ys) {\r\n    return fold2((acc, x, y) => (acc ? f(x, y) : false), true, xs, ys);\r\n}\r\n\r\nexport function exists(f, xs) {\r\n    return tryFindIndex(f, xs) != null;\r\n}\r\n\r\nexport function exists2(f_mut, xs_mut, ys_mut) {\r\n    exists2:\r\n    while (true) {\r\n        const f = f_mut, xs = xs_mut, ys = ys_mut;\r\n        const matchValue = [FSharpList__get_IsEmpty(xs), FSharpList__get_IsEmpty(ys)];\r\n        let pattern_matching_result;\r\n        if (matchValue[0]) {\r\n            if (matchValue[1]) {\r\n                pattern_matching_result = 0;\r\n            }\r\n            else {\r\n                pattern_matching_result = 2;\r\n            }\r\n        }\r\n        else if (matchValue[1]) {\r\n            pattern_matching_result = 2;\r\n        }\r\n        else {\r\n            pattern_matching_result = 1;\r\n        }\r\n        switch (pattern_matching_result) {\r\n            case 0: {\r\n                return false;\r\n            }\r\n            case 1: {\r\n                if (f(FSharpList__get_Head(xs), FSharpList__get_Head(ys))) {\r\n                    return true;\r\n                }\r\n                else {\r\n                    f_mut = f;\r\n                    xs_mut = FSharpList__get_Tail(xs);\r\n                    ys_mut = FSharpList__get_Tail(ys);\r\n                    continue exists2;\r\n                }\r\n            }\r\n            case 2: {\r\n                throw (new Error((SR_listsHadDifferentLengths + \"\\\\nParameter name: \") + \"list2\"));\r\n            }\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function unzip(xs) {\r\n    return foldBack((tupledArg, tupledArg_1) => [FSharpList_Cons_305B8EAC(tupledArg[0], tupledArg_1[0]), FSharpList_Cons_305B8EAC(tupledArg[1], tupledArg_1[1])], xs, [FSharpList_get_Empty(), FSharpList_get_Empty()]);\r\n}\r\n\r\nexport function unzip3(xs) {\r\n    return foldBack((tupledArg, tupledArg_1) => [FSharpList_Cons_305B8EAC(tupledArg[0], tupledArg_1[0]), FSharpList_Cons_305B8EAC(tupledArg[1], tupledArg_1[1]), FSharpList_Cons_305B8EAC(tupledArg[2], tupledArg_1[2])], xs, [FSharpList_get_Empty(), FSharpList_get_Empty(), FSharpList_get_Empty()]);\r\n}\r\n\r\nexport function zip(xs, ys) {\r\n    return map2((x, y) => [x, y], xs, ys);\r\n}\r\n\r\nexport function zip3(xs, ys, zs) {\r\n    return map3((x, y, z) => [x, y, z], xs, ys, zs);\r\n}\r\n\r\nexport function sortWith(comparer, xs) {\r\n    const arr = toArray(xs);\r\n    arr.sort(comparer);\r\n    return ofArray(arr);\r\n}\r\n\r\nexport function sort(xs, comparer) {\r\n    return sortWith((x, y) => comparer.Compare(x, y), xs);\r\n}\r\n\r\nexport function sortBy(projection, xs, comparer) {\r\n    return sortWith((x, y) => comparer.Compare(projection(x), projection(y)), xs);\r\n}\r\n\r\nexport function sortDescending(xs, comparer) {\r\n    return sortWith((x, y) => (comparer.Compare(x, y) * -1), xs);\r\n}\r\n\r\nexport function sortByDescending(projection, xs, comparer) {\r\n    return sortWith((x, y) => (comparer.Compare(projection(x), projection(y)) * -1), xs);\r\n}\r\n\r\nexport function sum(xs, adder) {\r\n    return fold((acc, x) => adder.Add(acc, x), adder.GetZero(), xs);\r\n}\r\n\r\nexport function sumBy(f, xs, adder) {\r\n    return fold((acc, x) => adder.Add(acc, f(x)), adder.GetZero(), xs);\r\n}\r\n\r\nexport function maxBy(projection, xs, comparer) {\r\n    return reduce((x, y) => ((comparer.Compare(projection(y), projection(x)) > 0) ? y : x), xs);\r\n}\r\n\r\nexport function max(xs, comparer) {\r\n    return reduce((x, y) => ((comparer.Compare(y, x) > 0) ? y : x), xs);\r\n}\r\n\r\nexport function minBy(projection, xs, comparer) {\r\n    return reduce((x, y) => ((comparer.Compare(projection(y), projection(x)) > 0) ? x : y), xs);\r\n}\r\n\r\nexport function min(xs, comparer) {\r\n    return reduce((x, y) => ((comparer.Compare(y, x) > 0) ? x : y), xs);\r\n}\r\n\r\nexport function average(xs, averager) {\r\n    let count = 0;\r\n    return averager.DivideByInt(fold((acc, x) => {\r\n        count = ((count + 1) | 0);\r\n        return averager.Add(acc, x);\r\n    }, averager.GetZero(), xs), count);\r\n}\r\n\r\nexport function averageBy(f, xs, averager) {\r\n    let count = 0;\r\n    return averager.DivideByInt(fold((acc, x) => {\r\n        count = ((count + 1) | 0);\r\n        return averager.Add(acc, f(x));\r\n    }, averager.GetZero(), xs), count);\r\n}\r\n\r\nexport function permute(f, xs) {\r\n    return ofArray(permute_1(f, toArray(xs)));\r\n}\r\n\r\nexport function chunkBySize(chunkSize, xs) {\r\n    return ofArray(map_1((xs_1) => ofArray(xs_1), chunkBySize_1(chunkSize, toArray(xs))));\r\n}\r\n\r\nexport function allPairs(xs, ys) {\r\n    const root = FSharpList_get_Empty();\r\n    let node = root;\r\n    iterate((x) => {\r\n        iterate((y) => {\r\n            let xs_1, t;\r\n            node = ((xs_1 = node, (t = (new FSharpList([x, y], void 0)), (xs_1.tail = t, t))));\r\n        }, ys);\r\n    }, xs);\r\n    const xs_3 = node;\r\n    const t_2 = FSharpList_get_Empty();\r\n    xs_3.tail = t_2;\r\n    return FSharpList__get_Tail(root);\r\n}\r\n\r\nexport function skip(count_mut, xs_mut) {\r\n    skip:\r\n    while (true) {\r\n        const count = count_mut, xs = xs_mut;\r\n        if (count <= 0) {\r\n            return xs;\r\n        }\r\n        else if (FSharpList__get_IsEmpty(xs)) {\r\n            throw (new Error((SR_notEnoughElements + \"\\\\nParameter name: \") + \"list\"));\r\n        }\r\n        else {\r\n            count_mut = (count - 1);\r\n            xs_mut = FSharpList__get_Tail(xs);\r\n            continue skip;\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function skipWhile(predicate_mut, xs_mut) {\r\n    skipWhile:\r\n    while (true) {\r\n        const predicate = predicate_mut, xs = xs_mut;\r\n        if (FSharpList__get_IsEmpty(xs)) {\r\n            return xs;\r\n        }\r\n        else if (!predicate(FSharpList__get_Head(xs))) {\r\n            return xs;\r\n        }\r\n        else {\r\n            predicate_mut = predicate;\r\n            xs_mut = FSharpList__get_Tail(xs);\r\n            continue skipWhile;\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function take(count, xs) {\r\n    if (count < 0) {\r\n        throw (new Error((SR_inputMustBeNonNegative + \"\\\\nParameter name: \") + \"count\"));\r\n    }\r\n    const loop = (i_mut, acc_mut, xs_1_mut) => {\r\n        let t;\r\n        loop:\r\n        while (true) {\r\n            const i = i_mut, acc = acc_mut, xs_1 = xs_1_mut;\r\n            if (i <= 0) {\r\n                return acc;\r\n            }\r\n            else if (FSharpList__get_IsEmpty(xs_1)) {\r\n                throw (new Error((SR_notEnoughElements + \"\\\\nParameter name: \") + \"list\"));\r\n            }\r\n            else {\r\n                i_mut = (i - 1);\r\n                acc_mut = ((t = (new FSharpList(FSharpList__get_Head(xs_1), void 0)), (acc.tail = t, t)));\r\n                xs_1_mut = FSharpList__get_Tail(xs_1);\r\n                continue loop;\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    const root = FSharpList_get_Empty();\r\n    const node = loop(count, root, xs);\r\n    const t_2 = FSharpList_get_Empty();\r\n    node.tail = t_2;\r\n    return FSharpList__get_Tail(root);\r\n}\r\n\r\nexport function takeWhile(predicate, xs) {\r\n    const loop = (acc_mut, xs_1_mut) => {\r\n        let t;\r\n        loop:\r\n        while (true) {\r\n            const acc = acc_mut, xs_1 = xs_1_mut;\r\n            if (FSharpList__get_IsEmpty(xs_1)) {\r\n                return acc;\r\n            }\r\n            else if (!predicate(FSharpList__get_Head(xs_1))) {\r\n                return acc;\r\n            }\r\n            else {\r\n                acc_mut = ((t = (new FSharpList(FSharpList__get_Head(xs_1), void 0)), (acc.tail = t, t)));\r\n                xs_1_mut = FSharpList__get_Tail(xs_1);\r\n                continue loop;\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    const root = FSharpList_get_Empty();\r\n    const node = loop(root, xs);\r\n    const t_2 = FSharpList_get_Empty();\r\n    node.tail = t_2;\r\n    return FSharpList__get_Tail(root);\r\n}\r\n\r\nexport function truncate(count, xs) {\r\n    const loop = (i_mut, acc_mut, xs_1_mut) => {\r\n        let t;\r\n        loop:\r\n        while (true) {\r\n            const i = i_mut, acc = acc_mut, xs_1 = xs_1_mut;\r\n            if (i <= 0) {\r\n                return acc;\r\n            }\r\n            else if (FSharpList__get_IsEmpty(xs_1)) {\r\n                return acc;\r\n            }\r\n            else {\r\n                i_mut = (i - 1);\r\n                acc_mut = ((t = (new FSharpList(FSharpList__get_Head(xs_1), void 0)), (acc.tail = t, t)));\r\n                xs_1_mut = FSharpList__get_Tail(xs_1);\r\n                continue loop;\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    const root = FSharpList_get_Empty();\r\n    const node = loop(count, root, xs);\r\n    const t_2 = FSharpList_get_Empty();\r\n    node.tail = t_2;\r\n    return FSharpList__get_Tail(root);\r\n}\r\n\r\nexport function getSlice(startIndex, endIndex, xs) {\r\n    const len = length(xs) | 0;\r\n    const startIndex_1 = defaultArg(startIndex, 0) | 0;\r\n    const endIndex_1 = defaultArg(endIndex, len - 1) | 0;\r\n    if (startIndex_1 < 0) {\r\n        throw (new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"startIndex\"));\r\n    }\r\n    else if (endIndex_1 >= len) {\r\n        throw (new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"endIndex\"));\r\n    }\r\n    else if (endIndex_1 < startIndex_1) {\r\n        return FSharpList_get_Empty();\r\n    }\r\n    else {\r\n        return take((endIndex_1 - startIndex_1) + 1, skip(startIndex_1, xs));\r\n    }\r\n}\r\n\r\nexport function splitAt(index, xs) {\r\n    if (index < 0) {\r\n        throw (new Error((SR_inputMustBeNonNegative + \"\\\\nParameter name: \") + \"index\"));\r\n    }\r\n    if (index > FSharpList__get_Length(xs)) {\r\n        throw (new Error((SR_notEnoughElements + \"\\\\nParameter name: \") + \"index\"));\r\n    }\r\n    return [take(index, xs), skip(index, xs)];\r\n}\r\n\r\nexport function exactlyOne(xs) {\r\n    if (FSharpList__get_IsEmpty(xs)) {\r\n        throw (new Error((SR_inputSequenceEmpty + \"\\\\nParameter name: \") + \"list\"));\r\n    }\r\n    else if (FSharpList__get_IsEmpty(FSharpList__get_Tail(xs))) {\r\n        return FSharpList__get_Head(xs);\r\n    }\r\n    else {\r\n        throw (new Error((SR_inputSequenceTooLong + \"\\\\nParameter name: \") + \"list\"));\r\n    }\r\n}\r\n\r\nexport function tryExactlyOne(xs) {\r\n    if ((!FSharpList__get_IsEmpty(xs)) ? FSharpList__get_IsEmpty(FSharpList__get_Tail(xs)) : false) {\r\n        return some(FSharpList__get_Head(xs));\r\n    }\r\n    else {\r\n        return void 0;\r\n    }\r\n}\r\n\r\nexport function where(predicate, xs) {\r\n    return filter(predicate, xs);\r\n}\r\n\r\nexport function pairwise(xs) {\r\n    return ofArray(pairwise_1(toArray(xs)));\r\n}\r\n\r\nexport function windowed(windowSize, xs) {\r\n    return ofArray(map_1((xs_1) => ofArray(xs_1), windowed_1(windowSize, toArray(xs))));\r\n}\r\n\r\nexport function splitInto(chunks, xs) {\r\n    return ofArray(map_1((xs_1) => ofArray(xs_1), splitInto_1(chunks, toArray(xs))));\r\n}\r\n\r\nexport function transpose(lists) {\r\n    return ofArray(map_1((xs_1) => ofArray(xs_1), transpose_1(map_1((xs) => toArray(xs), Array.from(lists)))));\r\n}\r\n\r\n","export class CancellationToken {\n    constructor(cancelled = false) {\n        this._id = 0;\n        this._cancelled = cancelled;\n        this._listeners = new Map();\n    }\n    get isCancelled() {\n        return this._cancelled;\n    }\n    cancel() {\n        if (!this._cancelled) {\n            this._cancelled = true;\n            for (const [, listener] of this._listeners) {\n                listener();\n            }\n        }\n    }\n    addListener(f) {\n        const id = this._id;\n        this._listeners.set(this._id++, f);\n        return id;\n    }\n    removeListener(id) {\n        return this._listeners.delete(id);\n    }\n    register(f, state) {\n        const $ = this;\n        const id = this.addListener(state == null ? f : () => f(state));\n        return { Dispose() { $.removeListener(id); } };\n    }\n}\nexport class OperationCanceledError extends Error {\n    constructor() {\n        super(\"The operation was canceled\");\n        Object.setPrototypeOf(this, OperationCanceledError.prototype);\n    }\n}\nexport class Trampoline {\n    constructor() {\n        this.callCount = 0;\n    }\n    static get maxTrampolineCallCount() {\n        return 2000;\n    }\n    incrementAndCheck() {\n        return this.callCount++ > Trampoline.maxTrampolineCallCount;\n    }\n    hijack(f) {\n        this.callCount = 0;\n        setTimeout(f, 0);\n    }\n}\nexport function protectedCont(f) {\n    return (ctx) => {\n        if (ctx.cancelToken.isCancelled) {\n            ctx.onCancel(new OperationCanceledError());\n        }\n        else if (ctx.trampoline.incrementAndCheck()) {\n            ctx.trampoline.hijack(() => {\n                try {\n                    f(ctx);\n                }\n                catch (err) {\n                    ctx.onError(err);\n                }\n            });\n        }\n        else {\n            try {\n                f(ctx);\n            }\n            catch (err) {\n                ctx.onError(err);\n            }\n        }\n    };\n}\nexport function protectedBind(computation, binder) {\n    return protectedCont((ctx) => {\n        computation({\n            onSuccess: (x) => {\n                try {\n                    binder(x)(ctx);\n                }\n                catch (ex) {\n                    ctx.onError(ex);\n                }\n            },\n            onError: ctx.onError,\n            onCancel: ctx.onCancel,\n            cancelToken: ctx.cancelToken,\n            trampoline: ctx.trampoline,\n        });\n    });\n}\nexport function protectedReturn(value) {\n    return protectedCont((ctx) => ctx.onSuccess(value));\n}\nexport class AsyncBuilder {\n    Bind(computation, binder) {\n        return protectedBind(computation, binder);\n    }\n    Combine(computation1, computation2) {\n        return this.Bind(computation1, () => computation2);\n    }\n    Delay(generator) {\n        return protectedCont((ctx) => generator()(ctx));\n    }\n    For(sequence, body) {\n        const iter = sequence[Symbol.iterator]();\n        let cur = iter.next();\n        return this.While(() => !cur.done, this.Delay(() => {\n            const res = body(cur.value);\n            cur = iter.next();\n            return res;\n        }));\n    }\n    Return(value) {\n        return protectedReturn(value);\n    }\n    ReturnFrom(computation) {\n        return computation;\n    }\n    TryFinally(computation, compensation) {\n        return protectedCont((ctx) => {\n            computation({\n                onSuccess: (x) => {\n                    compensation();\n                    ctx.onSuccess(x);\n                },\n                onError: (x) => {\n                    compensation();\n                    ctx.onError(x);\n                },\n                onCancel: (x) => {\n                    compensation();\n                    ctx.onCancel(x);\n                },\n                cancelToken: ctx.cancelToken,\n                trampoline: ctx.trampoline,\n            });\n        });\n    }\n    TryWith(computation, catchHandler) {\n        return protectedCont((ctx) => {\n            computation({\n                onSuccess: ctx.onSuccess,\n                onCancel: ctx.onCancel,\n                cancelToken: ctx.cancelToken,\n                trampoline: ctx.trampoline,\n                onError: (ex) => {\n                    try {\n                        catchHandler(ex)(ctx);\n                    }\n                    catch (ex2) {\n                        ctx.onError(ex2);\n                    }\n                },\n            });\n        });\n    }\n    Using(resource, binder) {\n        return this.TryFinally(binder(resource), () => resource.Dispose());\n    }\n    While(guard, computation) {\n        if (guard()) {\n            return this.Bind(computation, () => this.While(guard, computation));\n        }\n        else {\n            return this.Return(void 0);\n        }\n    }\n    Zero() {\n        return protectedCont((ctx) => ctx.onSuccess(void 0));\n    }\n}\nexport const singleton = new AsyncBuilder();\n","import { Union } from \"./Types.js\";\r\nimport { union_type } from \"./Reflection.js\";\r\nimport { some } from \"./Option.js\";\r\n\r\nexport class FSharpResult$2 extends Union {\r\n    constructor(tag, ...fields) {\r\n        super();\r\n        this.tag = (tag | 0);\r\n        this.fields = fields;\r\n    }\r\n    cases() {\r\n        return [\"Ok\", \"Error\"];\r\n    }\r\n}\r\n\r\nexport function FSharpResult$2$reflection(gen0, gen1) {\r\n    return union_type(\"FSharp.Core.FSharpResult`2\", [gen0, gen1], FSharpResult$2, () => [[[\"ResultValue\", gen0]], [[\"ErrorValue\", gen1]]]);\r\n}\r\n\r\nexport function Result_Map(mapping, result) {\r\n    if (result.tag === 0) {\r\n        return new FSharpResult$2(0, mapping(result.fields[0]));\r\n    }\r\n    else {\r\n        return new FSharpResult$2(1, result.fields[0]);\r\n    }\r\n}\r\n\r\nexport function Result_MapError(mapping, result) {\r\n    if (result.tag === 0) {\r\n        return new FSharpResult$2(0, result.fields[0]);\r\n    }\r\n    else {\r\n        return new FSharpResult$2(1, mapping(result.fields[0]));\r\n    }\r\n}\r\n\r\nexport function Result_Bind(binder, result) {\r\n    if (result.tag === 0) {\r\n        return binder(result.fields[0]);\r\n    }\r\n    else {\r\n        return new FSharpResult$2(1, result.fields[0]);\r\n    }\r\n}\r\n\r\nexport class FSharpChoice$2 extends Union {\r\n    constructor(tag, ...fields) {\r\n        super();\r\n        this.tag = (tag | 0);\r\n        this.fields = fields;\r\n    }\r\n    cases() {\r\n        return [\"Choice1Of2\", \"Choice2Of2\"];\r\n    }\r\n}\r\n\r\nexport function FSharpChoice$2$reflection(gen0, gen1) {\r\n    return union_type(\"FSharp.Core.FSharpChoice`2\", [gen0, gen1], FSharpChoice$2, () => [[[\"Item\", gen0]], [[\"Item\", gen1]]]);\r\n}\r\n\r\nexport class FSharpChoice$3 extends Union {\r\n    constructor(tag, ...fields) {\r\n        super();\r\n        this.tag = (tag | 0);\r\n        this.fields = fields;\r\n    }\r\n    cases() {\r\n        return [\"Choice1Of3\", \"Choice2Of3\", \"Choice3Of3\"];\r\n    }\r\n}\r\n\r\nexport function FSharpChoice$3$reflection(gen0, gen1, gen2) {\r\n    return union_type(\"FSharp.Core.FSharpChoice`3\", [gen0, gen1, gen2], FSharpChoice$3, () => [[[\"Item\", gen0]], [[\"Item\", gen1]], [[\"Item\", gen2]]]);\r\n}\r\n\r\nexport class FSharpChoice$4 extends Union {\r\n    constructor(tag, ...fields) {\r\n        super();\r\n        this.tag = (tag | 0);\r\n        this.fields = fields;\r\n    }\r\n    cases() {\r\n        return [\"Choice1Of4\", \"Choice2Of4\", \"Choice3Of4\", \"Choice4Of4\"];\r\n    }\r\n}\r\n\r\nexport function FSharpChoice$4$reflection(gen0, gen1, gen2, gen3) {\r\n    return union_type(\"FSharp.Core.FSharpChoice`4\", [gen0, gen1, gen2, gen3], FSharpChoice$4, () => [[[\"Item\", gen0]], [[\"Item\", gen1]], [[\"Item\", gen2]], [[\"Item\", gen3]]]);\r\n}\r\n\r\nexport class FSharpChoice$5 extends Union {\r\n    constructor(tag, ...fields) {\r\n        super();\r\n        this.tag = (tag | 0);\r\n        this.fields = fields;\r\n    }\r\n    cases() {\r\n        return [\"Choice1Of5\", \"Choice2Of5\", \"Choice3Of5\", \"Choice4Of5\", \"Choice5Of5\"];\r\n    }\r\n}\r\n\r\nexport function FSharpChoice$5$reflection(gen0, gen1, gen2, gen3, gen4) {\r\n    return union_type(\"FSharp.Core.FSharpChoice`5\", [gen0, gen1, gen2, gen3, gen4], FSharpChoice$5, () => [[[\"Item\", gen0]], [[\"Item\", gen1]], [[\"Item\", gen2]], [[\"Item\", gen3]], [[\"Item\", gen4]]]);\r\n}\r\n\r\nexport class FSharpChoice$6 extends Union {\r\n    constructor(tag, ...fields) {\r\n        super();\r\n        this.tag = (tag | 0);\r\n        this.fields = fields;\r\n    }\r\n    cases() {\r\n        return [\"Choice1Of6\", \"Choice2Of6\", \"Choice3Of6\", \"Choice4Of6\", \"Choice5Of6\", \"Choice6Of6\"];\r\n    }\r\n}\r\n\r\nexport function FSharpChoice$6$reflection(gen0, gen1, gen2, gen3, gen4, gen5) {\r\n    return union_type(\"FSharp.Core.FSharpChoice`6\", [gen0, gen1, gen2, gen3, gen4, gen5], FSharpChoice$6, () => [[[\"Item\", gen0]], [[\"Item\", gen1]], [[\"Item\", gen2]], [[\"Item\", gen3]], [[\"Item\", gen4]], [[\"Item\", gen5]]]);\r\n}\r\n\r\nexport class FSharpChoice$7 extends Union {\r\n    constructor(tag, ...fields) {\r\n        super();\r\n        this.tag = (tag | 0);\r\n        this.fields = fields;\r\n    }\r\n    cases() {\r\n        return [\"Choice1Of7\", \"Choice2Of7\", \"Choice3Of7\", \"Choice4Of7\", \"Choice5Of7\", \"Choice6Of7\", \"Choice7Of7\"];\r\n    }\r\n}\r\n\r\nexport function FSharpChoice$7$reflection(gen0, gen1, gen2, gen3, gen4, gen5, gen6) {\r\n    return union_type(\"FSharp.Core.FSharpChoice`7\", [gen0, gen1, gen2, gen3, gen4, gen5, gen6], FSharpChoice$7, () => [[[\"Item\", gen0]], [[\"Item\", gen1]], [[\"Item\", gen2]], [[\"Item\", gen3]], [[\"Item\", gen4]], [[\"Item\", gen5]], [[\"Item\", gen6]]]);\r\n}\r\n\r\nexport function Choice_makeChoice1Of2(x) {\r\n    return new FSharpChoice$2(0, x);\r\n}\r\n\r\nexport function Choice_makeChoice2Of2(x) {\r\n    return new FSharpChoice$2(1, x);\r\n}\r\n\r\nexport function Choice_tryValueIfChoice1Of2(x) {\r\n    if (x.tag === 0) {\r\n        return some(x.fields[0]);\r\n    }\r\n    else {\r\n        return void 0;\r\n    }\r\n}\r\n\r\nexport function Choice_tryValueIfChoice2Of2(x) {\r\n    if (x.tag === 1) {\r\n        return some(x.fields[0]);\r\n    }\r\n    else {\r\n        return void 0;\r\n    }\r\n}\r\n\r\n","(**\nCmd\n---------\nCore abstractions for dispatching messages in Elmish.\n\n*)\n\nnamespace Elmish\n\nopen System\n\n/// Dispatch - feed new message into the processing loop\ntype Dispatch<'msg> = 'msg -> unit\n\n/// Subscription - return immediately, but may schedule dispatch of a message at any time\ntype Sub<'msg> = Dispatch<'msg> -> unit\n\n/// Cmd - container for subscriptions that may produce messages\ntype Cmd<'msg> = Sub<'msg> list\n\n/// Cmd module for creating and manipulating commands\n[<RequireQualifiedAccess>]\nmodule Cmd =\n    /// Execute the commands using the supplied dispatcher\n    let internal exec onError (dispatch: Dispatch<'msg>) (cmd: Cmd<'msg>) =\n        cmd |> List.iter (fun call -> try call dispatch with ex -> onError ex)\n\n    /// None - no commands, also known as `[]`\n    let none : Cmd<'msg> =\n        []\n\n    /// When emitting the message, map to another type\n    let map (f: 'a -> 'msg) (cmd: Cmd<'a>) : Cmd<'msg> =\n        cmd |> List.map (fun g -> (fun dispatch -> f >> dispatch) >> g)\n\n    /// Aggregate multiple commands\n    let batch (cmds: #seq<Cmd<'msg>>) : Cmd<'msg> =\n        cmds |> List.concat\n\n    /// Command to call the subscriber\n    let ofSub (sub: Sub<'msg>) : Cmd<'msg> =\n        [sub]\n\n    module OfFunc =\n        /// Command to evaluate a simple function and map the result\n        /// into success or error (of exception)\n        let either (task: 'a -> _) (arg: 'a) (ofSuccess: _ -> 'msg) (ofError: _ -> 'msg) : Cmd<'msg> =\n            let bind dispatch =\n                try\n                    task arg\n                    |> (ofSuccess >> dispatch)\n                with x ->\n                    x |> (ofError >> dispatch)\n            [bind]\n\n        /// Command to evaluate a simple function and map the success to a message\n        /// discarding any possible error\n        let perform (task: 'a -> _) (arg: 'a) (ofSuccess: _ -> 'msg) : Cmd<'msg> =\n            let bind dispatch =\n                try\n                    task arg\n                    |> (ofSuccess >> dispatch)\n                with x ->\n                    ()\n            [bind]\n\n        /// Command to evaluate a simple function and map the error (in case of exception)\n        let attempt (task: 'a -> unit) (arg: 'a) (ofError: _ -> 'msg) : Cmd<'msg> =\n            let bind dispatch =\n                try\n                    task arg\n                with x ->\n                    x |> (ofError >> dispatch)\n            [bind]\n\n        /// Command to issue a specific message\n        let result (msg:'msg) : Cmd<'msg> =\n            [fun dispatch -> dispatch msg]\n\n    module OfAsyncWith =\n        /// Command that will evaluate an async block and map the result\n        /// into success or error (of exception)\n        let either (start: Async<unit> -> unit) \n                   (task: 'a -> Async<_>)\n                   (arg: 'a)\n                   (ofSuccess: _ -> 'msg)\n                   (ofError: _ -> 'msg) : Cmd<'msg> =\n            let bind dispatch =\n                async {\n                    let! r = task arg |> Async.Catch\n                    dispatch (match r with\n                             | Choice1Of2 x -> ofSuccess x\n                             | Choice2Of2 x -> ofError x)\n                }\n            [bind >> start]\n\n        /// Command that will evaluate an async block and map the success\n        let perform (start: Async<unit> -> unit) \n                    (task: 'a -> Async<_>)\n                    (arg: 'a)\n                    (ofSuccess: _ -> 'msg) : Cmd<'msg> =\n            let bind dispatch =\n                async {\n                    let! r = task arg |> Async.Catch\n                    match r with\n                    | Choice1Of2 x -> dispatch (ofSuccess x)\n                    | _ -> ()\n                }\n            [bind >> start]\n\n        /// Command that will evaluate an async block and map the error (of exception)\n        let attempt (start: Async<unit> -> unit) \n                    (task: 'a -> Async<_>)\n                    (arg: 'a)\n                    (ofError: _ -> 'msg) : Cmd<'msg> =\n            let bind dispatch =\n                async {\n                    let! r = task arg |> Async.Catch\n                    match r with\n                    | Choice2Of2 x -> dispatch (ofError x)\n                    | _ -> ()\n                }\n            [bind >> start]\n\n        /// Command that will evaluate an async block to the message\n        let result (start: Async<unit> -> unit) \n                   (task: Async<'msg>) : Cmd<'msg> =\n            let bind dispatch =\n                async {\n                    let! r = task\n                    dispatch r\n                }\n            [bind >> start]\n\n    module OfAsync =\n#if FABLE_COMPILER\n        let start x = Timer.delay 0 (fun _ -> Async.StartImmediate x)\n#else\n        let inline start x = Async.Start x\n#endif    \n        /// Command that will evaluate an async block and map the result\n        /// into success or error (of exception)\n        let inline either (task: 'a -> Async<_>)\n                          (arg: 'a)\n                          (ofSuccess: _ -> 'msg)\n                          (ofError: _ -> 'msg) : Cmd<'msg> =\n            OfAsyncWith.either start task arg ofSuccess ofError\n\n        /// Command that will evaluate an async block and map the success\n        let inline perform (task: 'a -> Async<_>)\n                           (arg: 'a)\n                           (ofSuccess: _ -> 'msg) : Cmd<'msg> =\n            OfAsyncWith.perform start task arg ofSuccess\n\n        /// Command that will evaluate an async block and map the error (of exception)\n        let inline attempt (task: 'a -> Async<_>)\n                           (arg: 'a)\n                           (ofError: _ -> 'msg) : Cmd<'msg> =\n            OfAsyncWith.attempt start task arg ofError\n\n        /// Command that will evaluate an async block to the message\n        let inline result (task: Async<'msg>) : Cmd<'msg> =\n            OfAsyncWith.result start task\n\n    module OfAsyncImmediate =\n        /// Command that will evaluate an async block and map the result\n        /// into success or error (of exception)\n        let inline either (task: 'a -> Async<_>)\n                          (arg: 'a)\n                          (ofSuccess: _ -> 'msg)\n                          (ofError: _ -> 'msg) : Cmd<'msg> =\n            OfAsyncWith.either Async.StartImmediate task arg ofSuccess ofError\n\n        /// Command that will evaluate an async block and map the success\n        let inline perform (task: 'a -> Async<_>)\n                           (arg: 'a)\n                           (ofSuccess: _ -> 'msg) : Cmd<'msg> =\n            OfAsyncWith.perform Async.StartImmediate task arg ofSuccess\n\n        /// Command that will evaluate an async block and map the error (of exception)\n        let inline attempt (task: 'a -> Async<_>)\n                           (arg: 'a)\n                           (ofError: _ -> 'msg) : Cmd<'msg> =\n            OfAsyncWith.attempt Async.StartImmediate task arg ofError\n\n        /// Command that will evaluate an async block to the message\n        let inline result (task: Async<'msg>) : Cmd<'msg> =\n            OfAsyncWith.result Async.StartImmediate task\n\n#if FABLE_COMPILER\n    module OfPromise =\n        /// Command to call `promise` block and map the results\n        let either (task: 'a -> Fable.Core.JS.Promise<_>)\n                   (arg:'a)\n                   (ofSuccess: _ -> 'msg)\n                   (ofError: #exn -> 'msg) : Cmd<'msg> =\n            let bind dispatch =\n                (task arg)\n                    .``then``(ofSuccess >> dispatch)\n                    .catch(unbox >> ofError >> dispatch)\n                    |> ignore\n            [bind]\n\n        /// Command to call `promise` block and map the success\n        let perform (task: 'a -> Fable.Core.JS.Promise<_>)\n                   (arg:'a)\n                   (ofSuccess: _ -> 'msg) =\n            let bind dispatch =\n                (task arg)\n                    .``then``(ofSuccess >> dispatch)\n                    |> ignore\n            [bind]\n\n        /// Command to call `promise` block and map the error\n        let attempt (task: 'a -> Fable.Core.JS.Promise<_>)\n                    (arg:'a)\n                    (ofError: #exn -> 'msg) : Cmd<'msg> =\n            let bind dispatch =\n                (task arg)\n                    .catch(unbox >> ofError >> dispatch)\n                    |> ignore\n            [bind]\n\n        /// Command to dispatch the `promise` result\n        let result (task: Fable.Core.JS.Promise<'msg>) =\n            let bind dispatch =\n                task.``then`` dispatch\n                |> ignore\n            [bind]\n\n    [<Obsolete(\"Use `OfPromise.either` instead\")>]\n    let inline ofPromise (task: 'a -> Fable.Core.JS.Promise<_>)\n                         (arg:'a)\n                         (ofSuccess: _ -> 'msg)\n                         (ofError: _ -> 'msg) : Cmd<'msg> =\n        OfPromise.either task arg ofSuccess ofError                     \n#else\n    open System.Threading.Tasks\n    module OfTask =\n        /// Command to call a task and map the results\n        let inline either (task: 'a -> Task<_>)\n                          (arg:'a)\n                          (ofSuccess: _ -> 'msg)\n                          (ofError: _ -> 'msg) : Cmd<'msg> =\n            OfAsync.either (task >> Async.AwaitTask) arg ofSuccess ofError\n\n        /// Command to call a task and map the success\n        let inline perform (task: 'a -> Task<_>)\n                           (arg:'a)\n                           (ofSuccess: _ -> 'msg) : Cmd<'msg> =\n            OfAsync.perform (task >> Async.AwaitTask) arg ofSuccess\n\n        /// Command to call a task and map the error\n        let inline attempt (task: 'a -> Task<_>)\n                           (arg:'a)\n                           (ofError: _ -> 'msg) : Cmd<'msg> =\n            OfAsync.attempt (task >> Async.AwaitTask) arg ofError\n\n        /// Command and map the task success\n        let inline result (task: Task<'msg>) : Cmd<'msg> =\n            OfAsync.result (task |> Async.AwaitTask)\n\n    [<Obsolete(\"Use OfTask.either instead\")>]\n    let inline ofTask (task: 'a -> Task<_>)\n                      (arg:'a)\n                      (ofSuccess: _ -> 'msg)\n                      (ofError: _ -> 'msg) : Cmd<'msg> =\n        OfTask.either task arg ofSuccess ofError\n#endif\n\n    // Synonymous with `OfFunc.result`, may be removed in the future\n    let inline ofMsg (msg:'msg) : Cmd<'msg> =\n        OfFunc.result msg\n\n    [<Obsolete(\"Use `Cmd.OfAsync.either` instead\")>]\n    let inline ofAsync (task: 'a -> Async<_>)\n                       (arg: 'a)\n                       (ofSuccess: _ -> 'msg)\n                       (ofError: _ -> 'msg) : Cmd<'msg> =\n        OfAsync.either task arg ofSuccess ofError\n\n    [<Obsolete(\"Use `Cmd.OfFunc.either` instead\")>]\n    let inline ofFunc (task: 'a -> _) (arg: 'a) (ofSuccess: _ -> 'msg) (ofError: _ -> 'msg) : Cmd<'msg> =\n        OfFunc.either task arg ofSuccess ofError\n\n    [<Obsolete(\"Use `Cmd.OfFunc.perform` instead\")>]\n    let inline performFunc (task: 'a -> _) (arg: 'a) (ofSuccess: _ -> 'msg) : Cmd<'msg> =\n        OfFunc.perform task arg ofSuccess\n\n    [<Obsolete(\"Use `Cmd.OfFunc.attempt` instead\")>]\n    let attemptFunc (task: 'a -> unit) (arg: 'a) (ofError: _ -> 'msg) : Cmd<'msg> =\n        OfFunc.attempt task arg ofError\n\n","import { structuralHash, equals } from \"./Util.js\";\r\nimport { HashIdentity_Structural, ComparisonIdentity_Structural } from \"./FSharp.Collections.js\";\r\nimport { StringBuilder__Append_Z721C83C5 } from \"./System.Text.js\";\r\n\r\nexport const LanguagePrimitives_GenericEqualityComparer = {\r\n    [\"System.Collections.IEqualityComparer.Equals541DA560\"](x, y) {\r\n        return equals(x, y);\r\n    },\r\n    [\"System.Collections.IEqualityComparer.GetHashCode4E60E31B\"](x_1) {\r\n        return structuralHash(x_1);\r\n    },\r\n};\r\n\r\nexport const LanguagePrimitives_GenericEqualityERComparer = {\r\n    [\"System.Collections.IEqualityComparer.Equals541DA560\"](x, y) {\r\n        return equals(x, y);\r\n    },\r\n    [\"System.Collections.IEqualityComparer.GetHashCode4E60E31B\"](x_1) {\r\n        return structuralHash(x_1);\r\n    },\r\n};\r\n\r\nexport function LanguagePrimitives_FastGenericComparer() {\r\n    return ComparisonIdentity_Structural();\r\n}\r\n\r\nexport function LanguagePrimitives_FastGenericComparerFromTable() {\r\n    return ComparisonIdentity_Structural();\r\n}\r\n\r\nexport function LanguagePrimitives_FastGenericEqualityComparer() {\r\n    return HashIdentity_Structural();\r\n}\r\n\r\nexport function LanguagePrimitives_FastGenericEqualityComparerFromTable() {\r\n    return HashIdentity_Structural();\r\n}\r\n\r\nexport function Operators_Failure(message) {\r\n    return new Error(message);\r\n}\r\n\r\nexport function Operators_FailurePattern(exn) {\r\n    return exn.message;\r\n}\r\n\r\nexport function Operators_NullArg(x) {\r\n    throw (new Error(x));\r\n}\r\n\r\nexport function Operators_Using(resource, action) {\r\n    try {\r\n        return action(resource);\r\n    }\r\n    finally {\r\n        if (equals(resource, null)) {\r\n        }\r\n        else {\r\n            resource.Dispose();\r\n        }\r\n    }\r\n}\r\n\r\nexport function Operators_Lock(_lockObj, action) {\r\n    return action();\r\n}\r\n\r\nexport function ExtraTopLevelOperators_LazyPattern(input) {\r\n    return input.Value;\r\n}\r\n\r\nexport function PrintfModule_PrintFormatToStringBuilderThen(continuation, builder, format) {\r\n    return format.cont((s) => {\r\n        void StringBuilder__Append_Z721C83C5(builder, s);\r\n        return continuation();\r\n    });\r\n}\r\n\r\nexport function PrintfModule_PrintFormatToStringBuilder(builder, format) {\r\n    return PrintfModule_PrintFormatToStringBuilderThen(() => {\r\n    }, builder, format);\r\n}\r\n\r\n","import { compare, physicalHash, equals, structuralHash } from \"./Util.js\";\r\n\r\nexport function HashIdentity_FromFunctions(hash, eq) {\r\n    return {\r\n        Equals(x, y) {\r\n            return eq(x, y);\r\n        },\r\n        GetHashCode(x_1) {\r\n            return hash(x_1);\r\n        },\r\n    };\r\n}\r\n\r\nexport function HashIdentity_Structural() {\r\n    return HashIdentity_FromFunctions((obj) => structuralHash(obj), (e1, e2) => equals(e1, e2));\r\n}\r\n\r\nexport function HashIdentity_Reference() {\r\n    return HashIdentity_FromFunctions((obj) => physicalHash(obj), (e1, e2) => (e1 === e2));\r\n}\r\n\r\nexport function ComparisonIdentity_FromFunction(comparer) {\r\n    return {\r\n        Compare(x, y) {\r\n            return comparer(x, y);\r\n        },\r\n    };\r\n}\r\n\r\nexport function ComparisonIdentity_Structural() {\r\n    return ComparisonIdentity_FromFunction((e1, e2) => compare(e1, e2));\r\n}\r\n\r\n","import { OperationCanceledError, Trampoline } from \"./AsyncBuilder.js\";\nimport { CancellationToken } from \"./AsyncBuilder.js\";\nimport { protectedCont } from \"./AsyncBuilder.js\";\nimport { protectedBind } from \"./AsyncBuilder.js\";\nimport { protectedReturn } from \"./AsyncBuilder.js\";\nimport { Choice_makeChoice1Of2, Choice_makeChoice2Of2 } from \"./Choice.js\";\n// Implemented just for type references\nexport class Async {\n}\nfunction emptyContinuation(_x) {\n    // NOP\n}\n// MakeAsync: body:(AsyncActivation<'T> -> AsyncReturn) -> Async<'T>\nexport function makeAsync(body) {\n    return body;\n}\n// Invoke: computation: Async<'T> -> ctxt:AsyncActivation<'T> -> AsyncReturn\nexport function invoke(computation, ctx) {\n    return computation(ctx);\n}\n// CallThenInvoke: ctxt:AsyncActivation<'T> -> result1:'U -> part2:('U -> Async<'T>) -> AsyncReturn\nexport function callThenInvoke(ctx, result1, part2) {\n    return part2(result1)(ctx);\n}\n// Bind: ctxt:AsyncActivation<'T> -> part1:Async<'U> -> part2:('U -> Async<'T>) -> AsyncReturn\nexport function bind(ctx, part1, part2) {\n    return protectedBind(part1, part2)(ctx);\n}\nexport function createCancellationToken(arg) {\n    const token = new CancellationToken(typeof arg === \"boolean\" ? arg : false);\n    if (typeof arg === \"number\") {\n        setTimeout(() => { token.cancel(); }, arg);\n    }\n    return token;\n}\nexport function cancel(token) {\n    token.cancel();\n}\nexport function cancelAfter(token, ms) {\n    setTimeout(() => { token.cancel(); }, ms);\n}\nexport function isCancellationRequested(token) {\n    return token != null && token.isCancelled;\n}\nexport function throwIfCancellationRequested(token) {\n    if (token != null && token.isCancelled) {\n        throw new Error(\"Operation is cancelled\");\n    }\n}\nexport function startChild(computation) {\n    const promise = startAsPromise(computation);\n    // JS Promises are hot, computation has already started\n    // but we delay returning the result\n    return protectedCont((ctx) => protectedReturn(awaitPromise(promise))(ctx));\n}\nexport function awaitPromise(p) {\n    return fromContinuations((conts) => p.then(conts[0]).catch((err) => (err instanceof OperationCanceledError\n        ? conts[2] : conts[1])(err)));\n}\nexport function cancellationToken() {\n    return protectedCont((ctx) => ctx.onSuccess(ctx.cancelToken));\n}\nexport const defaultCancellationToken = new CancellationToken();\nexport function catchAsync(work) {\n    return protectedCont((ctx) => {\n        work({\n            onSuccess: (x) => ctx.onSuccess(Choice_makeChoice1Of2(x)),\n            onError: (ex) => ctx.onSuccess(Choice_makeChoice2Of2(ex)),\n            onCancel: ctx.onCancel,\n            cancelToken: ctx.cancelToken,\n            trampoline: ctx.trampoline,\n        });\n    });\n}\nexport function fromContinuations(f) {\n    return protectedCont((ctx) => f([ctx.onSuccess, ctx.onError, ctx.onCancel]));\n}\nexport function ignore(computation) {\n    return protectedBind(computation, (_x) => protectedReturn(void 0));\n}\nexport function parallel(computations) {\n    return awaitPromise(Promise.all(Array.from(computations, (w) => startAsPromise(w))));\n}\nexport function sleep(millisecondsDueTime) {\n    return protectedCont((ctx) => {\n        let tokenId;\n        const timeoutId = setTimeout(() => {\n            ctx.cancelToken.removeListener(tokenId);\n            ctx.onSuccess(void 0);\n        }, millisecondsDueTime);\n        tokenId = ctx.cancelToken.addListener(() => {\n            clearTimeout(timeoutId);\n            ctx.onCancel(new OperationCanceledError());\n        });\n    });\n}\nexport function start(computation, cancellationToken) {\n    return startWithContinuations(computation, cancellationToken);\n}\nexport function startImmediate(computation, cancellationToken) {\n    return start(computation, cancellationToken);\n}\nexport function startWithContinuations(computation, continuation, exceptionContinuation, cancellationContinuation, cancelToken) {\n    if (typeof continuation !== \"function\") {\n        cancelToken = continuation;\n        continuation = undefined;\n    }\n    const trampoline = new Trampoline();\n    computation({\n        onSuccess: continuation ? continuation : emptyContinuation,\n        onError: exceptionContinuation ? exceptionContinuation : emptyContinuation,\n        onCancel: cancellationContinuation ? cancellationContinuation : emptyContinuation,\n        cancelToken: cancelToken ? cancelToken : defaultCancellationToken,\n        trampoline,\n    });\n}\nexport function startAsPromise(computation, cancellationToken) {\n    return new Promise((resolve, reject) => startWithContinuations(computation, resolve, reject, reject, cancellationToken ? cancellationToken : defaultCancellationToken));\n}\nexport default Async;\n","import { equals, isArrayLike, isDisposable, toIterator, getEnumerator } from \"./Util.js\";\r\nimport { toString } from \"./Types.js\";\r\nimport { class_type } from \"./Reflection.js\";\r\nimport { some, value as value_1 } from \"./Option.js\";\r\nimport { Operators_NullArg } from \"./FSharp.Core.js\";\r\nimport { chunkBySize as chunkBySize_1, permute as permute_1, transpose as transpose_1, windowed as windowed_1, splitInto as splitInto_1, map as map_1, pairwise as pairwise_1, scanBack as scanBack_1, reverse as reverse_1, mapFoldBack as mapFoldBack_1, mapFold as mapFold_1, tryItem as tryItem_1, tryHead as tryHead_1, foldBack2 as foldBack2_1, foldBack as foldBack_1, tryFindIndexBack as tryFindIndexBack_1, tryFindBack as tryFindBack_1, singleton as singleton_1 } from \"./Array.js\";\r\nimport { length as length_1, tryItem as tryItem_2, isEmpty as isEmpty_1, tryHead as tryHead_2, ofSeq as ofSeq_1, ofArray as ofArray_1, toArray as toArray_1, FSharpList } from \"./List.js\";\r\n\r\nexport const SR_enumerationAlreadyFinished = \"Enumeration already finished.\";\r\n\r\nexport const SR_enumerationNotStarted = \"Enumeration has not started. Call MoveNext.\";\r\n\r\nexport const SR_inputSequenceEmpty = \"The input sequence was empty.\";\r\n\r\nexport const SR_inputSequenceTooLong = \"The input sequence contains more than one element.\";\r\n\r\nexport const SR_keyNotFoundAlt = \"An index satisfying the predicate was not found in the collection.\";\r\n\r\nexport const SR_notEnoughElements = \"The input sequence has an insufficient number of elements.\";\r\n\r\nexport const SR_resetNotSupported = \"Reset is not supported on this enumerator.\";\r\n\r\nexport function Enumerator_noReset() {\r\n    throw (new Error(SR_resetNotSupported));\r\n}\r\n\r\nexport function Enumerator_notStarted() {\r\n    throw (new Error(SR_enumerationNotStarted));\r\n}\r\n\r\nexport function Enumerator_alreadyFinished() {\r\n    throw (new Error(SR_enumerationAlreadyFinished));\r\n}\r\n\r\nexport class Enumerator_Seq {\r\n    constructor(f) {\r\n        this.f = f;\r\n    }\r\n    toString() {\r\n        const xs = this;\r\n        const maxCount = 4;\r\n        let i = 0;\r\n        let str = \"seq [\";\r\n        const e = getEnumerator(xs);\r\n        try {\r\n            while ((i < maxCount) ? e[\"System.Collections.IEnumerator.MoveNext\"]() : false) {\r\n                if (i > 0) {\r\n                    str = (str + \"; \");\r\n                }\r\n                str = (str + toString(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]()));\r\n                i = ((i + 1) | 0);\r\n            }\r\n            if (i === maxCount) {\r\n                str = (str + \"; ...\");\r\n            }\r\n            return str + \"]\";\r\n        }\r\n        finally {\r\n            e.Dispose();\r\n        }\r\n    }\r\n    GetEnumerator() {\r\n        const x = this;\r\n        return x.f();\r\n    }\r\n    [Symbol.iterator]() {\r\n        return toIterator(this.GetEnumerator());\r\n    }\r\n    [\"System.Collections.IEnumerable.GetEnumerator\"]() {\r\n        const x = this;\r\n        return x.f();\r\n    }\r\n}\r\n\r\nexport function Enumerator_Seq$reflection(gen0) {\r\n    return class_type(\"SeqModule.Enumerator.Seq\", [gen0], Enumerator_Seq);\r\n}\r\n\r\nexport function Enumerator_Seq_$ctor_673A07F2(f) {\r\n    return new Enumerator_Seq(f);\r\n}\r\n\r\nexport class Enumerator_FromFunctions$1 {\r\n    constructor(current, next, dispose) {\r\n        this.current = current;\r\n        this.next = next;\r\n        this.dispose = dispose;\r\n    }\r\n    [\"System.Collections.Generic.IEnumerator`1.get_Current\"]() {\r\n        const __ = this;\r\n        return __.current();\r\n    }\r\n    [\"System.Collections.IEnumerator.get_Current\"]() {\r\n        const __ = this;\r\n        return __.current();\r\n    }\r\n    [\"System.Collections.IEnumerator.MoveNext\"]() {\r\n        const __ = this;\r\n        return __.next();\r\n    }\r\n    [\"System.Collections.IEnumerator.Reset\"]() {\r\n        Enumerator_noReset();\r\n    }\r\n    Dispose() {\r\n        const __ = this;\r\n        __.dispose();\r\n    }\r\n}\r\n\r\nexport function Enumerator_FromFunctions$1$reflection(gen0) {\r\n    return class_type(\"SeqModule.Enumerator.FromFunctions`1\", [gen0], Enumerator_FromFunctions$1);\r\n}\r\n\r\nexport function Enumerator_FromFunctions$1_$ctor_58C54629(current, next, dispose) {\r\n    return new Enumerator_FromFunctions$1(current, next, dispose);\r\n}\r\n\r\nexport function Enumerator_cast(e) {\r\n    return Enumerator_FromFunctions$1_$ctor_58C54629(() => e[\"System.Collections.IEnumerator.get_Current\"](), () => e[\"System.Collections.IEnumerator.MoveNext\"](), () => {\r\n        if (isDisposable(e)) {\r\n            e.Dispose();\r\n        }\r\n    });\r\n}\r\n\r\nexport function Enumerator_concat(sources) {\r\n    let outerOpt = void 0;\r\n    let innerOpt = void 0;\r\n    let started = false;\r\n    let finished = false;\r\n    let curr = void 0;\r\n    const finish = () => {\r\n        finished = true;\r\n        if (innerOpt != null) {\r\n            const inner = innerOpt;\r\n            try {\r\n                inner.Dispose();\r\n            }\r\n            finally {\r\n                innerOpt = (void 0);\r\n            }\r\n        }\r\n        if (outerOpt != null) {\r\n            const outer = outerOpt;\r\n            try {\r\n                outer.Dispose();\r\n            }\r\n            finally {\r\n                outerOpt = (void 0);\r\n            }\r\n        }\r\n    };\r\n    return Enumerator_FromFunctions$1_$ctor_58C54629(() => {\r\n        if (!started) {\r\n            Enumerator_notStarted();\r\n        }\r\n        else if (finished) {\r\n            Enumerator_alreadyFinished();\r\n        }\r\n        if (curr != null) {\r\n            return value_1(curr);\r\n        }\r\n        else {\r\n            return Enumerator_alreadyFinished();\r\n        }\r\n    }, () => {\r\n        let copyOfStruct;\r\n        if (!started) {\r\n            started = true;\r\n        }\r\n        if (finished) {\r\n            return false;\r\n        }\r\n        else {\r\n            let res = void 0;\r\n            while (res == null) {\r\n                const matchValue = [outerOpt, innerOpt];\r\n                if (matchValue[0] != null) {\r\n                    if (matchValue[1] != null) {\r\n                        const inner_1 = matchValue[1];\r\n                        if (inner_1[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n                            curr = some(inner_1[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\r\n                            res = true;\r\n                        }\r\n                        else {\r\n                            try {\r\n                                inner_1.Dispose();\r\n                            }\r\n                            finally {\r\n                                innerOpt = (void 0);\r\n                            }\r\n                        }\r\n                    }\r\n                    else {\r\n                        const outer_1 = matchValue[0];\r\n                        if (outer_1[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n                            const ie = outer_1[\"System.Collections.Generic.IEnumerator`1.get_Current\"]();\r\n                            innerOpt = ((copyOfStruct = ie, getEnumerator(copyOfStruct)));\r\n                        }\r\n                        else {\r\n                            finish();\r\n                            res = false;\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    outerOpt = getEnumerator(sources);\r\n                }\r\n            }\r\n            return value_1(res);\r\n        }\r\n    }, () => {\r\n        if (!finished) {\r\n            finish();\r\n        }\r\n    });\r\n}\r\n\r\nexport function Enumerator_enumerateThenFinally(f, e) {\r\n    return Enumerator_FromFunctions$1_$ctor_58C54629(() => e[\"System.Collections.Generic.IEnumerator`1.get_Current\"](), () => e[\"System.Collections.IEnumerator.MoveNext\"](), () => {\r\n        try {\r\n            e.Dispose();\r\n        }\r\n        finally {\r\n            f();\r\n        }\r\n    });\r\n}\r\n\r\nexport function Enumerator_generateWhileSome(openf, compute, closef) {\r\n    let started = false;\r\n    let curr = void 0;\r\n    let state = some(openf());\r\n    const dispose = () => {\r\n        if (state != null) {\r\n            const x_1 = value_1(state);\r\n            try {\r\n                closef(x_1);\r\n            }\r\n            finally {\r\n                state = (void 0);\r\n            }\r\n        }\r\n    };\r\n    const finish = () => {\r\n        try {\r\n            dispose();\r\n        }\r\n        finally {\r\n            curr = (void 0);\r\n        }\r\n    };\r\n    return Enumerator_FromFunctions$1_$ctor_58C54629(() => {\r\n        if (!started) {\r\n            Enumerator_notStarted();\r\n        }\r\n        if (curr != null) {\r\n            return value_1(curr);\r\n        }\r\n        else {\r\n            return Enumerator_alreadyFinished();\r\n        }\r\n    }, () => {\r\n        if (!started) {\r\n            started = true;\r\n        }\r\n        if (state != null) {\r\n            const s = value_1(state);\r\n            let matchValue_1;\r\n            try {\r\n                matchValue_1 = compute(s);\r\n            }\r\n            catch (matchValue) {\r\n                finish();\r\n                throw matchValue;\r\n            }\r\n            if (matchValue_1 != null) {\r\n                curr = matchValue_1;\r\n                return true;\r\n            }\r\n            else {\r\n                finish();\r\n                return false;\r\n            }\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }, dispose);\r\n}\r\n\r\nexport function Enumerator_unfold(f, state) {\r\n    let curr = void 0;\r\n    let acc = state;\r\n    return Enumerator_FromFunctions$1_$ctor_58C54629(() => {\r\n        if (curr != null) {\r\n            const x = curr[0];\r\n            const st = curr[1];\r\n            return x;\r\n        }\r\n        else {\r\n            return Enumerator_notStarted();\r\n        }\r\n    }, () => {\r\n        curr = f(acc);\r\n        if (curr != null) {\r\n            const x_1 = curr[0];\r\n            const st_1 = curr[1];\r\n            acc = st_1;\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }, () => {\r\n    });\r\n}\r\n\r\nexport function indexNotFound() {\r\n    throw (new Error(SR_keyNotFoundAlt));\r\n}\r\n\r\nexport function checkNonNull(argName, arg) {\r\n    if (arg == null) {\r\n        Operators_NullArg(argName);\r\n    }\r\n}\r\n\r\nexport function mkSeq(f) {\r\n    return Enumerator_Seq_$ctor_673A07F2(f);\r\n}\r\n\r\nexport function ofSeq(xs) {\r\n    checkNonNull(\"source\", xs);\r\n    return getEnumerator(xs);\r\n}\r\n\r\nexport function delay(generator) {\r\n    return mkSeq(() => getEnumerator(generator()));\r\n}\r\n\r\nexport function concat(sources) {\r\n    return mkSeq(() => Enumerator_concat(sources));\r\n}\r\n\r\nexport function unfold(generator, state) {\r\n    return mkSeq(() => Enumerator_unfold(generator, state));\r\n}\r\n\r\nexport function empty() {\r\n    return delay(() => (new Array(0)));\r\n}\r\n\r\nexport function singleton(x) {\r\n    return delay(() => singleton_1(x));\r\n}\r\n\r\nexport function ofArray(arr) {\r\n    return arr;\r\n}\r\n\r\nexport function toArray(xs) {\r\n    if (isArrayLike(xs)) {\r\n        return xs;\r\n    }\r\n    else if (xs instanceof FSharpList) {\r\n        return toArray_1(xs);\r\n    }\r\n    else {\r\n        return Array.from(xs);\r\n    }\r\n}\r\n\r\nexport function ofList(xs) {\r\n    return xs;\r\n}\r\n\r\nexport function toList(xs) {\r\n    if (isArrayLike(xs)) {\r\n        return ofArray_1(xs);\r\n    }\r\n    else if (xs instanceof FSharpList) {\r\n        return xs;\r\n    }\r\n    else {\r\n        return ofSeq_1(xs);\r\n    }\r\n}\r\n\r\nexport function generate(create, compute, dispose) {\r\n    return mkSeq(() => Enumerator_generateWhileSome(create, compute, dispose));\r\n}\r\n\r\nexport function generateIndexed(create, compute, dispose) {\r\n    return mkSeq(() => {\r\n        let i = -1;\r\n        return Enumerator_generateWhileSome(create, (x) => {\r\n            i = ((i + 1) | 0);\r\n            return compute(i, x);\r\n        }, dispose);\r\n    });\r\n}\r\n\r\nexport function append(xs, ys) {\r\n    return concat([xs, ys]);\r\n}\r\n\r\nexport function cast(xs) {\r\n    return mkSeq(() => {\r\n        checkNonNull(\"source\", xs);\r\n        return Enumerator_cast(getEnumerator(xs));\r\n    });\r\n}\r\n\r\nexport function choose(chooser, xs) {\r\n    return generate(() => ofSeq(xs), (e) => {\r\n        let curr = void 0;\r\n        while ((curr == null) ? e[\"System.Collections.IEnumerator.MoveNext\"]() : false) {\r\n            curr = chooser(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\r\n        }\r\n        return curr;\r\n    }, (e_1) => {\r\n        e_1.Dispose();\r\n    });\r\n}\r\n\r\nexport function compareWith(comparer, xs, ys) {\r\n    const e1 = ofSeq(xs);\r\n    try {\r\n        const e2 = ofSeq(ys);\r\n        try {\r\n            let c = 0;\r\n            let b1 = e1[\"System.Collections.IEnumerator.MoveNext\"]();\r\n            let b2 = e2[\"System.Collections.IEnumerator.MoveNext\"]();\r\n            while (((c === 0) ? b1 : false) ? b2 : false) {\r\n                c = (comparer(e1[\"System.Collections.Generic.IEnumerator`1.get_Current\"](), e2[\"System.Collections.Generic.IEnumerator`1.get_Current\"]()) | 0);\r\n                if (c === 0) {\r\n                    b1 = e1[\"System.Collections.IEnumerator.MoveNext\"]();\r\n                    b2 = e2[\"System.Collections.IEnumerator.MoveNext\"]();\r\n                }\r\n            }\r\n            return ((c !== 0) ? c : (b1 ? 1 : (b2 ? -1 : 0))) | 0;\r\n        }\r\n        finally {\r\n            e2.Dispose();\r\n        }\r\n    }\r\n    finally {\r\n        e1.Dispose();\r\n    }\r\n}\r\n\r\nexport function contains(value, xs, comparer) {\r\n    const e = ofSeq(xs);\r\n    try {\r\n        let found = false;\r\n        while ((!found) ? e[\"System.Collections.IEnumerator.MoveNext\"]() : false) {\r\n            found = comparer.Equals(value, e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\r\n        }\r\n        return found;\r\n    }\r\n    finally {\r\n        e.Dispose();\r\n    }\r\n}\r\n\r\nexport function enumerateFromFunctions(create, moveNext, current) {\r\n    return generate(create, (x) => (moveNext(x) ? some(current(x)) : (void 0)), (x_1) => {\r\n        const matchValue = x_1;\r\n        if (isDisposable(matchValue)) {\r\n            matchValue.Dispose();\r\n        }\r\n    });\r\n}\r\n\r\nexport function enumerateThenFinally(source, compensation) {\r\n    const compensation_1 = compensation;\r\n    return mkSeq(() => {\r\n        try {\r\n            return Enumerator_enumerateThenFinally(compensation_1, ofSeq(source));\r\n        }\r\n        catch (matchValue) {\r\n            compensation_1();\r\n            throw matchValue;\r\n        }\r\n    });\r\n}\r\n\r\nexport function enumerateUsing(resource, source) {\r\n    const compensation = () => {\r\n        if (equals(resource, null)) {\r\n        }\r\n        else {\r\n            let copyOfStruct = resource;\r\n            copyOfStruct.Dispose();\r\n        }\r\n    };\r\n    return mkSeq(() => {\r\n        try {\r\n            return Enumerator_enumerateThenFinally(compensation, ofSeq(source(resource)));\r\n        }\r\n        catch (matchValue_1) {\r\n            compensation();\r\n            throw matchValue_1;\r\n        }\r\n    });\r\n}\r\n\r\nexport function enumerateWhile(guard, xs) {\r\n    return concat(unfold((i) => (guard() ? [xs, i + 1] : (void 0)), 0));\r\n}\r\n\r\nexport function filter(f, xs) {\r\n    return choose((x) => {\r\n        if (f(x)) {\r\n            return some(x);\r\n        }\r\n        else {\r\n            return void 0;\r\n        }\r\n    }, xs);\r\n}\r\n\r\nexport function exists(predicate, xs) {\r\n    const e = ofSeq(xs);\r\n    try {\r\n        let found = false;\r\n        while ((!found) ? e[\"System.Collections.IEnumerator.MoveNext\"]() : false) {\r\n            found = predicate(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\r\n        }\r\n        return found;\r\n    }\r\n    finally {\r\n        e.Dispose();\r\n    }\r\n}\r\n\r\nexport function exists2(predicate, xs, ys) {\r\n    const e1 = ofSeq(xs);\r\n    try {\r\n        const e2 = ofSeq(ys);\r\n        try {\r\n            let found = false;\r\n            while (((!found) ? e1[\"System.Collections.IEnumerator.MoveNext\"]() : false) ? e2[\"System.Collections.IEnumerator.MoveNext\"]() : false) {\r\n                found = predicate(e1[\"System.Collections.Generic.IEnumerator`1.get_Current\"](), e2[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\r\n            }\r\n            return found;\r\n        }\r\n        finally {\r\n            e2.Dispose();\r\n        }\r\n    }\r\n    finally {\r\n        e1.Dispose();\r\n    }\r\n}\r\n\r\nexport function exactlyOne(xs) {\r\n    const e = ofSeq(xs);\r\n    try {\r\n        if (e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n            const v = e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]();\r\n            if (e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n                throw (new Error((SR_inputSequenceTooLong + \"\\\\nParameter name: \") + \"source\"));\r\n            }\r\n            else {\r\n                return v;\r\n            }\r\n        }\r\n        else {\r\n            throw (new Error((SR_inputSequenceEmpty + \"\\\\nParameter name: \") + \"source\"));\r\n        }\r\n    }\r\n    finally {\r\n        e.Dispose();\r\n    }\r\n}\r\n\r\nexport function tryExactlyOne(xs) {\r\n    const e = ofSeq(xs);\r\n    try {\r\n        if (e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n            const v = e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]();\r\n            return e[\"System.Collections.IEnumerator.MoveNext\"]() ? (void 0) : some(v);\r\n        }\r\n        else {\r\n            return void 0;\r\n        }\r\n    }\r\n    finally {\r\n        e.Dispose();\r\n    }\r\n}\r\n\r\nexport function tryFind(predicate, xs) {\r\n    const e = ofSeq(xs);\r\n    try {\r\n        let res = void 0;\r\n        while ((res == null) ? e[\"System.Collections.IEnumerator.MoveNext\"]() : false) {\r\n            const c = e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]();\r\n            if (predicate(c)) {\r\n                res = some(c);\r\n            }\r\n        }\r\n        return res;\r\n    }\r\n    finally {\r\n        e.Dispose();\r\n    }\r\n}\r\n\r\nexport function find(predicate, xs) {\r\n    const matchValue = tryFind(predicate, xs);\r\n    if (matchValue == null) {\r\n        return indexNotFound();\r\n    }\r\n    else {\r\n        return value_1(matchValue);\r\n    }\r\n}\r\n\r\nexport function tryFindBack(predicate, xs) {\r\n    return tryFindBack_1(predicate, toArray(xs));\r\n}\r\n\r\nexport function findBack(predicate, xs) {\r\n    const matchValue = tryFindBack(predicate, xs);\r\n    if (matchValue == null) {\r\n        return indexNotFound();\r\n    }\r\n    else {\r\n        return value_1(matchValue);\r\n    }\r\n}\r\n\r\nexport function tryFindIndex(predicate, xs) {\r\n    const e = ofSeq(xs);\r\n    try {\r\n        const loop = (i_mut) => {\r\n            loop:\r\n            while (true) {\r\n                const i = i_mut;\r\n                if (e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n                    if (predicate(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]())) {\r\n                        return i;\r\n                    }\r\n                    else {\r\n                        i_mut = (i + 1);\r\n                        continue loop;\r\n                    }\r\n                }\r\n                else {\r\n                    return void 0;\r\n                }\r\n                break;\r\n            }\r\n        };\r\n        return loop(0);\r\n    }\r\n    finally {\r\n        e.Dispose();\r\n    }\r\n}\r\n\r\nexport function findIndex(predicate, xs) {\r\n    const matchValue = tryFindIndex(predicate, xs);\r\n    if (matchValue == null) {\r\n        return indexNotFound() | 0;\r\n    }\r\n    else {\r\n        return matchValue | 0;\r\n    }\r\n}\r\n\r\nexport function tryFindIndexBack(predicate, xs) {\r\n    return tryFindIndexBack_1(predicate, toArray(xs));\r\n}\r\n\r\nexport function findIndexBack(predicate, xs) {\r\n    const matchValue = tryFindIndexBack(predicate, xs);\r\n    if (matchValue == null) {\r\n        return indexNotFound() | 0;\r\n    }\r\n    else {\r\n        return matchValue | 0;\r\n    }\r\n}\r\n\r\nexport function fold(folder, state, xs) {\r\n    const e = ofSeq(xs);\r\n    try {\r\n        let acc = state;\r\n        while (e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n            acc = folder(acc, e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\r\n        }\r\n        return acc;\r\n    }\r\n    finally {\r\n        e.Dispose();\r\n    }\r\n}\r\n\r\nexport function foldBack(folder, xs, state) {\r\n    return foldBack_1(folder, toArray(xs), state);\r\n}\r\n\r\nexport function fold2(folder, state, xs, ys) {\r\n    const e1 = ofSeq(xs);\r\n    try {\r\n        const e2 = ofSeq(ys);\r\n        try {\r\n            let acc = state;\r\n            while (e1[\"System.Collections.IEnumerator.MoveNext\"]() ? e2[\"System.Collections.IEnumerator.MoveNext\"]() : false) {\r\n                acc = folder(acc, e1[\"System.Collections.Generic.IEnumerator`1.get_Current\"](), e2[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\r\n            }\r\n            return acc;\r\n        }\r\n        finally {\r\n            e2.Dispose();\r\n        }\r\n    }\r\n    finally {\r\n        e1.Dispose();\r\n    }\r\n}\r\n\r\nexport function foldBack2(folder, xs, ys, state) {\r\n    return foldBack2_1(folder, toArray(xs), toArray(ys), state);\r\n}\r\n\r\nexport function forAll(predicate, xs) {\r\n    return !exists((x) => (!predicate(x)), xs);\r\n}\r\n\r\nexport function forAll2(predicate, xs, ys) {\r\n    return !exists2((x, y) => (!predicate(x, y)), xs, ys);\r\n}\r\n\r\nexport function tryHead(xs) {\r\n    if (isArrayLike(xs)) {\r\n        return tryHead_1(xs);\r\n    }\r\n    else if (xs instanceof FSharpList) {\r\n        return tryHead_2(xs);\r\n    }\r\n    else {\r\n        const e = ofSeq(xs);\r\n        try {\r\n            return e[\"System.Collections.IEnumerator.MoveNext\"]() ? some(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]()) : (void 0);\r\n        }\r\n        finally {\r\n            e.Dispose();\r\n        }\r\n    }\r\n}\r\n\r\nexport function head(xs) {\r\n    const matchValue = tryHead(xs);\r\n    if (matchValue == null) {\r\n        throw (new Error((SR_inputSequenceEmpty + \"\\\\nParameter name: \") + \"source\"));\r\n    }\r\n    else {\r\n        return value_1(matchValue);\r\n    }\r\n}\r\n\r\nexport function initialize(count, f) {\r\n    return unfold((i) => ((i < count) ? [f(i), i + 1] : (void 0)), 0);\r\n}\r\n\r\nexport function initializeInfinite(f) {\r\n    return initialize(2147483647, f);\r\n}\r\n\r\nexport function isEmpty(xs) {\r\n    if (isArrayLike(xs)) {\r\n        return xs.length === 0;\r\n    }\r\n    else if (xs instanceof FSharpList) {\r\n        return isEmpty_1(xs);\r\n    }\r\n    else {\r\n        const e = ofSeq(xs);\r\n        try {\r\n            return !e[\"System.Collections.IEnumerator.MoveNext\"]();\r\n        }\r\n        finally {\r\n            e.Dispose();\r\n        }\r\n    }\r\n}\r\n\r\nexport function tryItem(index, xs) {\r\n    if (isArrayLike(xs)) {\r\n        return tryItem_1(index, xs);\r\n    }\r\n    else if (xs instanceof FSharpList) {\r\n        return tryItem_2(index, xs);\r\n    }\r\n    else {\r\n        const e = ofSeq(xs);\r\n        try {\r\n            const loop = (index_1_mut) => {\r\n                loop:\r\n                while (true) {\r\n                    const index_1 = index_1_mut;\r\n                    if (!e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n                        return void 0;\r\n                    }\r\n                    else if (index_1 === 0) {\r\n                        return some(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\r\n                    }\r\n                    else {\r\n                        index_1_mut = (index_1 - 1);\r\n                        continue loop;\r\n                    }\r\n                    break;\r\n                }\r\n            };\r\n            return loop(index);\r\n        }\r\n        finally {\r\n            e.Dispose();\r\n        }\r\n    }\r\n}\r\n\r\nexport function item(index, xs) {\r\n    const matchValue = tryItem(index, xs);\r\n    if (matchValue == null) {\r\n        throw (new Error((SR_notEnoughElements + \"\\\\nParameter name: \") + \"index\"));\r\n    }\r\n    else {\r\n        return value_1(matchValue);\r\n    }\r\n}\r\n\r\nexport function iterate(action, xs) {\r\n    fold((unitVar0, x) => {\r\n        action(x);\r\n    }, void 0, xs);\r\n}\r\n\r\nexport function iterate2(action, xs, ys) {\r\n    fold2((unitVar0, x, y) => {\r\n        action(x, y);\r\n    }, void 0, xs, ys);\r\n}\r\n\r\nexport function iterateIndexed(action, xs) {\r\n    void fold((i, x) => {\r\n        action(i, x);\r\n        return (i + 1) | 0;\r\n    }, 0, xs);\r\n}\r\n\r\nexport function iterateIndexed2(action, xs, ys) {\r\n    void fold2((i, x, y) => {\r\n        action(i, x, y);\r\n        return (i + 1) | 0;\r\n    }, 0, xs, ys);\r\n}\r\n\r\nexport function tryLast(xs) {\r\n    const e = ofSeq(xs);\r\n    try {\r\n        const loop = (acc_mut) => {\r\n            loop:\r\n            while (true) {\r\n                const acc = acc_mut;\r\n                if (!e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n                    return acc;\r\n                }\r\n                else {\r\n                    acc_mut = e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]();\r\n                    continue loop;\r\n                }\r\n                break;\r\n            }\r\n        };\r\n        return e[\"System.Collections.IEnumerator.MoveNext\"]() ? some(loop(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]())) : (void 0);\r\n    }\r\n    finally {\r\n        e.Dispose();\r\n    }\r\n}\r\n\r\nexport function last(xs) {\r\n    const matchValue = tryLast(xs);\r\n    if (matchValue == null) {\r\n        throw (new Error((SR_notEnoughElements + \"\\\\nParameter name: \") + \"source\"));\r\n    }\r\n    else {\r\n        return value_1(matchValue);\r\n    }\r\n}\r\n\r\nexport function length(xs) {\r\n    if (isArrayLike(xs)) {\r\n        return xs.length | 0;\r\n    }\r\n    else if (xs instanceof FSharpList) {\r\n        return length_1(xs) | 0;\r\n    }\r\n    else {\r\n        const e = ofSeq(xs);\r\n        try {\r\n            let count = 0;\r\n            while (e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n                count = ((count + 1) | 0);\r\n            }\r\n            return count | 0;\r\n        }\r\n        finally {\r\n            e.Dispose();\r\n        }\r\n    }\r\n}\r\n\r\nexport function map(mapping, xs) {\r\n    return generate(() => ofSeq(xs), (e) => (e[\"System.Collections.IEnumerator.MoveNext\"]() ? some(mapping(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]())) : (void 0)), (e_1) => {\r\n        e_1.Dispose();\r\n    });\r\n}\r\n\r\nexport function mapIndexed(mapping, xs) {\r\n    return generateIndexed(() => ofSeq(xs), (i, e) => (e[\"System.Collections.IEnumerator.MoveNext\"]() ? some(mapping(i, e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]())) : (void 0)), (e_1) => {\r\n        e_1.Dispose();\r\n    });\r\n}\r\n\r\nexport function indexed(xs) {\r\n    return mapIndexed((i, x) => [i, x], xs);\r\n}\r\n\r\nexport function map2(mapping, xs, ys) {\r\n    return generate(() => [ofSeq(xs), ofSeq(ys)], (tupledArg) => {\r\n        const e1 = tupledArg[0];\r\n        const e2 = tupledArg[1];\r\n        return (e1[\"System.Collections.IEnumerator.MoveNext\"]() ? e2[\"System.Collections.IEnumerator.MoveNext\"]() : false) ? some(mapping(e1[\"System.Collections.Generic.IEnumerator`1.get_Current\"](), e2[\"System.Collections.Generic.IEnumerator`1.get_Current\"]())) : (void 0);\r\n    }, (tupledArg_1) => {\r\n        try {\r\n            tupledArg_1[0].Dispose();\r\n        }\r\n        finally {\r\n            tupledArg_1[1].Dispose();\r\n        }\r\n    });\r\n}\r\n\r\nexport function mapIndexed2(mapping, xs, ys) {\r\n    return generateIndexed(() => [ofSeq(xs), ofSeq(ys)], (i, tupledArg) => {\r\n        const e1 = tupledArg[0];\r\n        const e2 = tupledArg[1];\r\n        return (e1[\"System.Collections.IEnumerator.MoveNext\"]() ? e2[\"System.Collections.IEnumerator.MoveNext\"]() : false) ? some(mapping(i, e1[\"System.Collections.Generic.IEnumerator`1.get_Current\"](), e2[\"System.Collections.Generic.IEnumerator`1.get_Current\"]())) : (void 0);\r\n    }, (tupledArg_1) => {\r\n        try {\r\n            tupledArg_1[0].Dispose();\r\n        }\r\n        finally {\r\n            tupledArg_1[1].Dispose();\r\n        }\r\n    });\r\n}\r\n\r\nexport function map3(mapping, xs, ys, zs) {\r\n    return generate(() => [ofSeq(xs), ofSeq(ys), ofSeq(zs)], (tupledArg) => {\r\n        const e1 = tupledArg[0];\r\n        const e2 = tupledArg[1];\r\n        const e3 = tupledArg[2];\r\n        return ((e1[\"System.Collections.IEnumerator.MoveNext\"]() ? e2[\"System.Collections.IEnumerator.MoveNext\"]() : false) ? e3[\"System.Collections.IEnumerator.MoveNext\"]() : false) ? some(mapping(e1[\"System.Collections.Generic.IEnumerator`1.get_Current\"](), e2[\"System.Collections.Generic.IEnumerator`1.get_Current\"](), e3[\"System.Collections.Generic.IEnumerator`1.get_Current\"]())) : (void 0);\r\n    }, (tupledArg_1) => {\r\n        try {\r\n            tupledArg_1[0].Dispose();\r\n        }\r\n        finally {\r\n            try {\r\n                tupledArg_1[1].Dispose();\r\n            }\r\n            finally {\r\n                tupledArg_1[2].Dispose();\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\nexport function readOnly(xs) {\r\n    checkNonNull(\"source\", xs);\r\n    return map((x) => x, xs);\r\n}\r\n\r\nexport function cache(xs) {\r\n    let cached = false;\r\n    const xsCache = [];\r\n    return delay(() => {\r\n        if (!cached) {\r\n            cached = true;\r\n            return map((x) => {\r\n                void (xsCache.push(x));\r\n                return x;\r\n            }, xs);\r\n        }\r\n        else {\r\n            return xsCache;\r\n        }\r\n    });\r\n}\r\n\r\nexport function allPairs(xs, ys) {\r\n    const ysCache = cache(ys);\r\n    return delay(() => concat(map((x) => map((y) => [x, y], ysCache), xs)));\r\n}\r\n\r\nexport function mapFold(mapping, state, xs) {\r\n    const patternInput = mapFold_1(mapping, state, toArray(xs));\r\n    return [readOnly(patternInput[0]), patternInput[1]];\r\n}\r\n\r\nexport function mapFoldBack(mapping, xs, state) {\r\n    const patternInput = mapFoldBack_1(mapping, toArray(xs), state);\r\n    return [readOnly(patternInput[0]), patternInput[1]];\r\n}\r\n\r\nexport function tryPick(chooser, xs) {\r\n    const e = ofSeq(xs);\r\n    try {\r\n        let res = void 0;\r\n        while ((res == null) ? e[\"System.Collections.IEnumerator.MoveNext\"]() : false) {\r\n            res = chooser(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\r\n        }\r\n        return res;\r\n    }\r\n    finally {\r\n        e.Dispose();\r\n    }\r\n}\r\n\r\nexport function pick(chooser, xs) {\r\n    const matchValue = tryPick(chooser, xs);\r\n    if (matchValue == null) {\r\n        return indexNotFound();\r\n    }\r\n    else {\r\n        return value_1(matchValue);\r\n    }\r\n}\r\n\r\nexport function reduce(folder, xs) {\r\n    const e = ofSeq(xs);\r\n    try {\r\n        const loop = (acc_mut) => {\r\n            loop:\r\n            while (true) {\r\n                const acc = acc_mut;\r\n                if (e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n                    acc_mut = folder(acc, e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\r\n                    continue loop;\r\n                }\r\n                else {\r\n                    return acc;\r\n                }\r\n                break;\r\n            }\r\n        };\r\n        if (e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n            return loop(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\r\n        }\r\n        else {\r\n            throw (new Error(SR_inputSequenceEmpty));\r\n        }\r\n    }\r\n    finally {\r\n        e.Dispose();\r\n    }\r\n}\r\n\r\nexport function reduceBack(folder, xs) {\r\n    const arr = toArray(xs);\r\n    if (arr.length > 0) {\r\n        return arr.reduceRight(folder);\r\n    }\r\n    else {\r\n        throw (new Error(SR_inputSequenceEmpty));\r\n    }\r\n}\r\n\r\nexport function replicate(n, x) {\r\n    return initialize(n, (_arg1) => x);\r\n}\r\n\r\nexport function reverse(xs) {\r\n    return delay(() => ofArray(reverse_1(toArray(xs))));\r\n}\r\n\r\nexport function scan(folder, state, xs) {\r\n    return delay(() => {\r\n        let acc = state;\r\n        return concat([singleton(state), map((x) => {\r\n            acc = folder(acc, x);\r\n            return acc;\r\n        }, xs)]);\r\n    });\r\n}\r\n\r\nexport function scanBack(folder, xs, state) {\r\n    return delay(() => ofArray(scanBack_1(folder, toArray(xs), state)));\r\n}\r\n\r\nexport function skip(count, xs) {\r\n    return mkSeq(() => {\r\n        const e = ofSeq(xs);\r\n        try {\r\n            for (let i = 1; i <= count; i++) {\r\n                if (!e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n                    throw (new Error((SR_notEnoughElements + \"\\\\nParameter name: \") + \"source\"));\r\n                }\r\n            }\r\n            return Enumerator_enumerateThenFinally(() => {\r\n            }, e);\r\n        }\r\n        catch (matchValue) {\r\n            e.Dispose();\r\n            throw matchValue;\r\n        }\r\n    });\r\n}\r\n\r\nexport function skipWhile(predicate, xs) {\r\n    return delay(() => {\r\n        let skipped = true;\r\n        return filter((x) => {\r\n            if (skipped) {\r\n                skipped = predicate(x);\r\n            }\r\n            return !skipped;\r\n        }, xs);\r\n    });\r\n}\r\n\r\nexport function tail(xs) {\r\n    return skip(1, xs);\r\n}\r\n\r\nexport function take(count, xs) {\r\n    return generateIndexed(() => ofSeq(xs), (i, e) => {\r\n        if (i < count) {\r\n            if (e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n                return some(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\r\n            }\r\n            else {\r\n                throw (new Error((SR_notEnoughElements + \"\\\\nParameter name: \") + \"source\"));\r\n            }\r\n        }\r\n        else {\r\n            return void 0;\r\n        }\r\n    }, (e_1) => {\r\n        e_1.Dispose();\r\n    });\r\n}\r\n\r\nexport function takeWhile(predicate, xs) {\r\n    return generate(() => ofSeq(xs), (e) => ((e[\"System.Collections.IEnumerator.MoveNext\"]() ? predicate(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]()) : false) ? some(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]()) : (void 0)), (e_1) => {\r\n        e_1.Dispose();\r\n    });\r\n}\r\n\r\nexport function truncate(count, xs) {\r\n    return generateIndexed(() => ofSeq(xs), (i, e) => (((i < count) ? e[\"System.Collections.IEnumerator.MoveNext\"]() : false) ? some(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]()) : (void 0)), (e_1) => {\r\n        e_1.Dispose();\r\n    });\r\n}\r\n\r\nexport function zip(xs, ys) {\r\n    return map2((x, y) => [x, y], xs, ys);\r\n}\r\n\r\nexport function zip3(xs, ys, zs) {\r\n    return map3((x, y, z) => [x, y, z], xs, ys, zs);\r\n}\r\n\r\nexport function collect(mapping, xs) {\r\n    return delay(() => concat(map(mapping, xs)));\r\n}\r\n\r\nexport function where(predicate, xs) {\r\n    return filter(predicate, xs);\r\n}\r\n\r\nexport function pairwise(xs) {\r\n    return delay(() => ofArray(pairwise_1(toArray(xs))));\r\n}\r\n\r\nexport function splitInto(chunks, xs) {\r\n    return delay(() => ofArray(map_1((arr) => ofArray(arr), splitInto_1(chunks, toArray(xs)))));\r\n}\r\n\r\nexport function windowed(windowSize, xs) {\r\n    return delay(() => ofArray(map_1((arr) => ofArray(arr), windowed_1(windowSize, toArray(xs)))));\r\n}\r\n\r\nexport function transpose(xss) {\r\n    return delay(() => ofArray(map_1((arr) => ofArray(arr), transpose_1(map_1((xs_1) => toArray(xs_1), toArray(xss))))));\r\n}\r\n\r\nexport function sortWith(comparer, xs) {\r\n    return delay(() => {\r\n        const arr = toArray(xs);\r\n        arr.sort(comparer);\r\n        return ofArray(arr);\r\n    });\r\n}\r\n\r\nexport function sort(xs, comparer) {\r\n    return sortWith((x, y) => comparer.Compare(x, y), xs);\r\n}\r\n\r\nexport function sortBy(projection, xs, comparer) {\r\n    return sortWith((x, y) => comparer.Compare(projection(x), projection(y)), xs);\r\n}\r\n\r\nexport function sortDescending(xs, comparer) {\r\n    return sortWith((x, y) => (comparer.Compare(x, y) * -1), xs);\r\n}\r\n\r\nexport function sortByDescending(projection, xs, comparer) {\r\n    return sortWith((x, y) => (comparer.Compare(projection(x), projection(y)) * -1), xs);\r\n}\r\n\r\nexport function sum(xs, adder) {\r\n    return fold((acc, x) => adder.Add(acc, x), adder.GetZero(), xs);\r\n}\r\n\r\nexport function sumBy(f, xs, adder) {\r\n    return fold((acc, x) => adder.Add(acc, f(x)), adder.GetZero(), xs);\r\n}\r\n\r\nexport function maxBy(projection, xs, comparer) {\r\n    return reduce((x, y) => ((comparer.Compare(projection(y), projection(x)) > 0) ? y : x), xs);\r\n}\r\n\r\nexport function max(xs, comparer) {\r\n    return reduce((x, y) => ((comparer.Compare(y, x) > 0) ? y : x), xs);\r\n}\r\n\r\nexport function minBy(projection, xs, comparer) {\r\n    return reduce((x, y) => ((comparer.Compare(projection(y), projection(x)) > 0) ? x : y), xs);\r\n}\r\n\r\nexport function min(xs, comparer) {\r\n    return reduce((x, y) => ((comparer.Compare(y, x) > 0) ? x : y), xs);\r\n}\r\n\r\nexport function average(xs, averager) {\r\n    let count = 0;\r\n    const total = fold((acc, x) => {\r\n        count = ((count + 1) | 0);\r\n        return averager.Add(acc, x);\r\n    }, averager.GetZero(), xs);\r\n    if (count === 0) {\r\n        throw (new Error(\"The input sequence was empty\\\\nParameter name: xs\"));\r\n    }\r\n    else {\r\n        return averager.DivideByInt(total, count);\r\n    }\r\n}\r\n\r\nexport function averageBy(f, xs, averager) {\r\n    let count = 0;\r\n    const total = fold((acc, x) => {\r\n        count = ((count + 1) | 0);\r\n        return averager.Add(acc, f(x));\r\n    }, averager.GetZero(), xs);\r\n    if (count === 0) {\r\n        throw (new Error(\"The input sequence was empty\\\\nParameter name: xs\"));\r\n    }\r\n    else {\r\n        return averager.DivideByInt(total, count);\r\n    }\r\n}\r\n\r\nexport function permute(f, xs) {\r\n    return delay(() => ofArray(permute_1(f, toArray(xs))));\r\n}\r\n\r\nexport function chunkBySize(chunkSize, xs) {\r\n    return delay(() => ofArray(map_1((arr) => ofArray(arr), chunkBySize_1(chunkSize, toArray(xs)))));\r\n}\r\n\r\n","import { Record } from \"../Types.js\";\r\nimport { record_type, array_type, int32_type } from \"../Reflection.js\";\r\nimport { op_LeftShift, op_BitwiseAnd, op_Addition, compare, op_Subtraction, op_Division, equals, fromInteger, op_Multiply, op_Modulus, toInt, fromBits } from \"../Long.js\";\r\nimport { copy, initialize, map, fill } from \"../Array.js\";\r\nimport { toArray, empty, head, tail, isEmpty, cons } from \"../List.js\";\r\nimport { int32ToString } from \"../Util.js\";\r\nimport { isNullOrEmpty, join } from \"../String.js\";\r\n\r\nexport class BigNat extends Record {\r\n    constructor(bound, digits) {\r\n        super();\r\n        this.bound = (bound | 0);\r\n        this.digits = digits;\r\n    }\r\n}\r\n\r\nexport function BigNat$reflection() {\r\n    return record_type(\"BigInt.BigNat\", [], BigNat, () => [[\"bound\", int32_type], [\"digits\", array_type(int32_type)]]);\r\n}\r\n\r\nexport function BigNatModule_FFT_pow32(x_mut, n_mut) {\r\n    BigNatModule_FFT_pow32:\r\n    while (true) {\r\n        const x = x_mut, n = n_mut;\r\n        if (n === 0) {\r\n            return 1;\r\n        }\r\n        else if ((n % 2) === 0) {\r\n            x_mut = (x * x);\r\n            n_mut = (~(~(n / 2)));\r\n            continue BigNatModule_FFT_pow32;\r\n        }\r\n        else {\r\n            return (x * BigNatModule_FFT_pow32(x * x, ~(~(n / 2)))) | 0;\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function BigNatModule_FFT_leastBounding2Power(b) {\r\n    const findBounding2Power = (b_1_mut, tp_mut, i_mut) => {\r\n        findBounding2Power:\r\n        while (true) {\r\n            const b_1 = b_1_mut, tp = tp_mut, i = i_mut;\r\n            if (b_1 <= tp) {\r\n                return [tp, i];\r\n            }\r\n            else {\r\n                b_1_mut = b_1;\r\n                tp_mut = (tp * 2);\r\n                i_mut = (i + 1);\r\n                continue findBounding2Power;\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    return findBounding2Power(b, 1, 0);\r\n}\r\n\r\nexport const BigNatModule_FFT_p = fromBits(2013265921, 0, false);\r\n\r\nconst BigNatModule_FFT_patternInput$004075 = [27, 15, 31, 440564289];\r\n\r\nexport const BigNatModule_FFT_w = BigNatModule_FFT_patternInput$004075[3];\r\n\r\nexport const BigNatModule_FFT_m = BigNatModule_FFT_patternInput$004075[1];\r\n\r\nexport const BigNatModule_FFT_k = BigNatModule_FFT_patternInput$004075[0];\r\n\r\nexport const BigNatModule_FFT_g = BigNatModule_FFT_patternInput$004075[2];\r\n\r\nexport const BigNatModule_FFT_primeP = BigNatModule_FFT_p;\r\n\r\nexport const BigNatModule_FFT_maxBitsInsideFp = 30;\r\n\r\nexport const BigNatModule_FFT_Fp_p = 2013265921;\r\n\r\nexport const BigNatModule_FFT_Fp_p64 = fromBits(2013265921, 0, true);\r\n\r\nexport function BigNatModule_FFT_Fp_toInt(x) {\r\n    return ~(~x);\r\n}\r\n\r\nexport function BigNatModule_FFT_Fp_ofInt32(x) {\r\n    return x >>> 0;\r\n}\r\n\r\nexport const BigNatModule_FFT_Fp_mzero = 0;\r\n\r\nexport const BigNatModule_FFT_Fp_mone = 1;\r\n\r\nexport const BigNatModule_FFT_Fp_mtwo = 2;\r\n\r\nexport function BigNatModule_FFT_Fp_mpow(x_mut, n_mut) {\r\n    BigNatModule_FFT_Fp_mpow:\r\n    while (true) {\r\n        const x = x_mut, n = n_mut;\r\n        if (n === 0) {\r\n            return BigNatModule_FFT_Fp_mone;\r\n        }\r\n        else if ((n % 2) === 0) {\r\n            x_mut = (toInt(op_Modulus(op_Multiply(fromInteger(x, true, 6), fromInteger(x, true, 6)), BigNatModule_FFT_Fp_p64)) >>> 0);\r\n            n_mut = (~(~(n / 2)));\r\n            continue BigNatModule_FFT_Fp_mpow;\r\n        }\r\n        else {\r\n            const y_2 = BigNatModule_FFT_Fp_mpow(toInt(op_Modulus(op_Multiply(fromInteger(x, true, 6), fromInteger(x, true, 6)), BigNatModule_FFT_Fp_p64)) >>> 0, ~(~(n / 2)));\r\n            return toInt(op_Modulus(op_Multiply(fromInteger(x, true, 6), fromInteger(y_2, true, 6)), BigNatModule_FFT_Fp_p64)) >>> 0;\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function BigNatModule_FFT_Fp_mpowL(x_mut, n_mut) {\r\n    BigNatModule_FFT_Fp_mpowL:\r\n    while (true) {\r\n        const x = x_mut, n = n_mut;\r\n        if (equals(n, fromBits(0, 0, false))) {\r\n            return BigNatModule_FFT_Fp_mone;\r\n        }\r\n        else if (equals(op_Modulus(n, fromBits(2, 0, false)), fromBits(0, 0, false))) {\r\n            x_mut = (toInt(op_Modulus(op_Multiply(fromInteger(x, true, 6), fromInteger(x, true, 6)), BigNatModule_FFT_Fp_p64)) >>> 0);\r\n            n_mut = op_Division(n, fromBits(2, 0, false));\r\n            continue BigNatModule_FFT_Fp_mpowL;\r\n        }\r\n        else {\r\n            const y_2 = BigNatModule_FFT_Fp_mpowL(toInt(op_Modulus(op_Multiply(fromInteger(x, true, 6), fromInteger(x, true, 6)), BigNatModule_FFT_Fp_p64)) >>> 0, op_Division(n, fromBits(2, 0, false)));\r\n            return toInt(op_Modulus(op_Multiply(fromInteger(x, true, 6), fromInteger(y_2, true, 6)), BigNatModule_FFT_Fp_p64)) >>> 0;\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function BigNatModule_FFT_Fp_m2PowNthRoot(n) {\r\n    return BigNatModule_FFT_Fp_mpow(BigNatModule_FFT_w >>> 0, BigNatModule_FFT_pow32(2, BigNatModule_FFT_k - n));\r\n}\r\n\r\nexport function BigNatModule_FFT_Fp_minv(x) {\r\n    return BigNatModule_FFT_Fp_mpowL(x, op_Subtraction(BigNatModule_FFT_primeP, fromBits(2, 0, false)));\r\n}\r\n\r\nexport function BigNatModule_FFT_computeFFT(lambda, mu, n, w, u, res, offset) {\r\n    let x_1, x_3, y_5;\r\n    if (n === 1) {\r\n        res[offset] = u[mu];\r\n    }\r\n    else {\r\n        const halfN = (~(~(n / 2))) | 0;\r\n        const ww = toInt(op_Modulus(op_Multiply(fromInteger(w, true, 6), fromInteger(w, true, 6)), BigNatModule_FFT_Fp_p64)) >>> 0;\r\n        const offsetHalfN = (offset + halfN) | 0;\r\n        BigNatModule_FFT_computeFFT(lambda * 2, mu, halfN, ww, u, res, offset);\r\n        BigNatModule_FFT_computeFFT(lambda * 2, lambda + mu, halfN, ww, u, res, offsetHalfN);\r\n        let wj = BigNatModule_FFT_Fp_mone;\r\n        for (let j = 0; j <= (halfN - 1); j++) {\r\n            const even = res[offset + j];\r\n            const odd = res[offsetHalfN + j];\r\n            res[offset + j] = ((even + ((x_1 = wj, toInt(op_Modulus(op_Multiply(fromInteger(x_1, true, 6), fromInteger(odd, true, 6)), BigNatModule_FFT_Fp_p64)) >>> 0))) % BigNatModule_FFT_Fp_p);\r\n            res[offsetHalfN + j] = (((even + BigNatModule_FFT_Fp_p) - ((x_3 = wj, toInt(op_Modulus(op_Multiply(fromInteger(x_3, true, 6), fromInteger(odd, true, 6)), BigNatModule_FFT_Fp_p64)) >>> 0))) % BigNatModule_FFT_Fp_p);\r\n            wj = ((y_5 = wj, toInt(op_Modulus(op_Multiply(fromInteger(w, true, 6), fromInteger(y_5, true, 6)), BigNatModule_FFT_Fp_p64)) >>> 0));\r\n        }\r\n    }\r\n}\r\n\r\nexport function BigNatModule_FFT_computFftInPlace(n, w, u) {\r\n    const res = fill(new Uint32Array(n), 0, n, BigNatModule_FFT_Fp_mzero);\r\n    BigNatModule_FFT_computeFFT(1, 0, n, w, u, res, 0);\r\n    return res;\r\n}\r\n\r\nexport function BigNatModule_FFT_computeInverseFftInPlace(n, w, uT) {\r\n    const bigKInv = BigNatModule_FFT_Fp_minv(n >>> 0);\r\n    return map((y) => (toInt(op_Modulus(op_Multiply(fromInteger(bigKInv, true, 6), fromInteger(y, true, 6)), BigNatModule_FFT_Fp_p64)) >>> 0), BigNatModule_FFT_computFftInPlace(n, BigNatModule_FFT_Fp_minv(w), uT), Uint32Array);\r\n}\r\n\r\nexport const BigNatModule_FFT_maxTwoPower = 29;\r\n\r\nexport const BigNatModule_FFT_twoPowerTable = initialize(BigNatModule_FFT_maxTwoPower - 1, (i) => BigNatModule_FFT_pow32(2, i), Int32Array);\r\n\r\nexport function BigNatModule_FFT_computeFftPaddedPolynomialProduct(bigK, k, u, v) {\r\n    const w = BigNatModule_FFT_Fp_m2PowNthRoot(k);\r\n    const n = bigK | 0;\r\n    const uT = BigNatModule_FFT_computFftInPlace(n, w, u);\r\n    const vT = BigNatModule_FFT_computFftInPlace(n, w, v);\r\n    return BigNatModule_FFT_computeInverseFftInPlace(n, w, initialize(n, (i) => {\r\n        const x = uT[i];\r\n        const y = vT[i];\r\n        return toInt(op_Modulus(op_Multiply(fromInteger(x, true, 6), fromInteger(y, true, 6)), BigNatModule_FFT_Fp_p64)) >>> 0;\r\n    }, Uint32Array));\r\n}\r\n\r\nexport function BigNatModule_FFT_padTo(n, u) {\r\n    const uBound = u.length | 0;\r\n    return initialize(n, (i) => ((i < uBound) ? BigNatModule_FFT_Fp_ofInt32(u[i]) : BigNatModule_FFT_Fp_mzero), Uint32Array);\r\n}\r\n\r\nexport function BigNatModule_FFT_computeFftPolynomialProduct(degu, u, degv, v) {\r\n    const patternInput = BigNatModule_FFT_leastBounding2Power((degu + degv) + 1);\r\n    const bigK = patternInput[0] | 0;\r\n    const w = BigNatModule_FFT_Fp_m2PowNthRoot(patternInput[1]);\r\n    const u_1 = BigNatModule_FFT_padTo(bigK, u);\r\n    const v_1 = BigNatModule_FFT_padTo(bigK, v);\r\n    const n = bigK | 0;\r\n    const uT = BigNatModule_FFT_computFftInPlace(n, w, u_1);\r\n    const vT = BigNatModule_FFT_computFftInPlace(n, w, v_1);\r\n    return map((x_1) => BigNatModule_FFT_Fp_toInt(x_1), BigNatModule_FFT_computeInverseFftInPlace(n, w, initialize(n, (i) => {\r\n        const x = uT[i];\r\n        const y = vT[i];\r\n        return toInt(op_Modulus(op_Multiply(fromInteger(x, true, 6), fromInteger(y, true, 6)), BigNatModule_FFT_Fp_p64)) >>> 0;\r\n    }, Uint32Array)), Int32Array);\r\n}\r\n\r\nexport const BigNatModule_FFT_mzero = BigNatModule_FFT_Fp_mzero;\r\n\r\nexport const BigNatModule_FFT_mone = BigNatModule_FFT_Fp_mone;\r\n\r\nexport const BigNatModule_FFT_maxFp = ((BigNatModule_FFT_Fp_p + BigNatModule_FFT_Fp_p) - BigNatModule_FFT_mone) % BigNatModule_FFT_Fp_p;\r\n\r\nexport function BigNatModule_bound(n) {\r\n    return n.bound;\r\n}\r\n\r\nexport function BigNatModule_setBound(n, v) {\r\n    n.bound = (v | 0);\r\n}\r\n\r\nexport function BigNatModule_coeff(n, i) {\r\n    return n.digits[i];\r\n}\r\n\r\nexport function BigNatModule_coeff64(n, i) {\r\n    return fromInteger(BigNatModule_coeff(n, i), false, 2);\r\n}\r\n\r\nexport function BigNatModule_setCoeff(n, i, v) {\r\n    n.digits[i] = (v | 0);\r\n}\r\n\r\nexport function BigNatModule_pow64(x_mut, n_mut) {\r\n    BigNatModule_pow64:\r\n    while (true) {\r\n        const x = x_mut, n = n_mut;\r\n        if (n === 0) {\r\n            return fromBits(1, 0, false);\r\n        }\r\n        else if ((n % 2) === 0) {\r\n            x_mut = op_Multiply(x, x);\r\n            n_mut = (~(~(n / 2)));\r\n            continue BigNatModule_pow64;\r\n        }\r\n        else {\r\n            return op_Multiply(x, BigNatModule_pow64(op_Multiply(x, x), ~(~(n / 2))));\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function BigNatModule_pow32(x_mut, n_mut) {\r\n    BigNatModule_pow32:\r\n    while (true) {\r\n        const x = x_mut, n = n_mut;\r\n        if (n === 0) {\r\n            return 1;\r\n        }\r\n        else if ((n % 2) === 0) {\r\n            x_mut = (x * x);\r\n            n_mut = (~(~(n / 2)));\r\n            continue BigNatModule_pow32;\r\n        }\r\n        else {\r\n            return (x * BigNatModule_pow32(x * x, ~(~(n / 2)))) | 0;\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function BigNatModule_hash(n) {\r\n    let res = 0;\r\n    for (let i = 0; i <= (n.bound - 1); i++) {\r\n        res = ((n.digits[i] + (res << 3)) | 0);\r\n    }\r\n    return res | 0;\r\n}\r\n\r\nexport function BigNatModule_maxInt(a, b) {\r\n    if (a < b) {\r\n        return b | 0;\r\n    }\r\n    else {\r\n        return a | 0;\r\n    }\r\n}\r\n\r\nexport function BigNatModule_minInt(a, b) {\r\n    if (a < b) {\r\n        return a | 0;\r\n    }\r\n    else {\r\n        return b | 0;\r\n    }\r\n}\r\n\r\nexport const BigNatModule_baseBits = 24;\r\n\r\nexport const BigNatModule_baseN = 16777216;\r\n\r\nexport const BigNatModule_baseMask = 16777215;\r\n\r\nexport const BigNatModule_baseNi64 = fromBits(16777216, 0, false);\r\n\r\nexport const BigNatModule_baseMaski64 = fromBits(16777215, 0, false);\r\n\r\nexport const BigNatModule_baseMaskU = fromBits(16777215, 0, true);\r\n\r\nexport const BigNatModule_baseMask32A = 16777215;\r\n\r\nexport const BigNatModule_baseMask32B = 255;\r\n\r\nexport const BigNatModule_baseShift32B = 24;\r\n\r\nexport const BigNatModule_baseMask64A = 16777215;\r\n\r\nexport const BigNatModule_baseMask64B = 16777215;\r\n\r\nexport const BigNatModule_baseMask64C = 65535;\r\n\r\nexport const BigNatModule_baseShift64B = 24;\r\n\r\nexport const BigNatModule_baseShift64C = 48;\r\n\r\nexport function BigNatModule_divbase(x) {\r\n    return ~(~((x >>> 0) >>> BigNatModule_baseBits));\r\n}\r\n\r\nexport function BigNatModule_modbase(x) {\r\n    return x & BigNatModule_baseMask;\r\n}\r\n\r\nexport function BigNatModule_createN(b) {\r\n    return new BigNat(b, new Int32Array(b));\r\n}\r\n\r\nexport function BigNatModule_copyN(x) {\r\n    return new BigNat(x.bound, copy(x.digits));\r\n}\r\n\r\nexport function BigNatModule_normN(n) {\r\n    const findLeastBound = (na_mut, i_mut) => {\r\n        findLeastBound:\r\n        while (true) {\r\n            const na = na_mut, i = i_mut;\r\n            if ((i === -1) ? true : (na[i] !== 0)) {\r\n                return (i + 1) | 0;\r\n            }\r\n            else {\r\n                na_mut = na;\r\n                i_mut = (i - 1);\r\n                continue findLeastBound;\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    const bound = findLeastBound(n.digits, n.bound - 1) | 0;\r\n    n.bound = (bound | 0);\r\n    return n;\r\n}\r\n\r\nexport const BigNatModule_boundInt = 2;\r\n\r\nexport const BigNatModule_boundInt64 = 3;\r\n\r\nexport const BigNatModule_boundBase = 1;\r\n\r\nexport function BigNatModule_embed(x) {\r\n    const x_1 = ((x < 0) ? 0 : x) | 0;\r\n    if (x_1 < BigNatModule_baseN) {\r\n        const r = BigNatModule_createN(1);\r\n        r.digits[0] = (x_1 | 0);\r\n        return BigNatModule_normN(r);\r\n    }\r\n    else {\r\n        const r_1 = BigNatModule_createN(BigNatModule_boundInt);\r\n        for (let i = 0; i <= (BigNatModule_boundInt - 1); i++) {\r\n            r_1.digits[i] = (((~(~(x_1 / BigNatModule_pow32(BigNatModule_baseN, i)))) % BigNatModule_baseN) | 0);\r\n        }\r\n        return BigNatModule_normN(r_1);\r\n    }\r\n}\r\n\r\nexport function BigNatModule_embed64(x) {\r\n    const x_1 = (compare(x, fromBits(0, 0, false)) < 0) ? fromBits(0, 0, false) : x;\r\n    const r = BigNatModule_createN(BigNatModule_boundInt64);\r\n    for (let i = 0; i <= (BigNatModule_boundInt64 - 1); i++) {\r\n        r.digits[i] = ((~(~toInt(op_Modulus(op_Division(x_1, BigNatModule_pow64(BigNatModule_baseNi64, i)), BigNatModule_baseNi64)))) | 0);\r\n    }\r\n    return BigNatModule_normN(r);\r\n}\r\n\r\nexport function BigNatModule_eval32(n) {\r\n    if (n.bound === 1) {\r\n        return n.digits[0] | 0;\r\n    }\r\n    else {\r\n        let acc = 0;\r\n        for (let i = n.bound - 1; i >= 0; i--) {\r\n            acc = ((n.digits[i] + (BigNatModule_baseN * acc)) | 0);\r\n        }\r\n        return acc | 0;\r\n    }\r\n}\r\n\r\nexport function BigNatModule_eval64(n) {\r\n    if (n.bound === 1) {\r\n        return fromInteger(n.digits[0], false, 2);\r\n    }\r\n    else {\r\n        let acc = fromBits(0, 0, false);\r\n        for (let i = n.bound - 1; i >= 0; i--) {\r\n            acc = op_Addition(fromInteger(n.digits[i], false, 2), op_Multiply(BigNatModule_baseNi64, acc));\r\n        }\r\n        return acc;\r\n    }\r\n}\r\n\r\nexport const BigNatModule_one = BigNatModule_embed(1);\r\n\r\nexport const BigNatModule_zero = BigNatModule_embed(0);\r\n\r\nexport function BigNatModule_restrictTo(d, n) {\r\n    return new BigNat(BigNatModule_minInt(d, n.bound), n.digits);\r\n}\r\n\r\nexport function BigNatModule_shiftUp(d, n) {\r\n    const m = BigNatModule_createN(n.bound + d);\r\n    for (let i = 0; i <= (n.bound - 1); i++) {\r\n        m.digits[i + d] = (n.digits[i] | 0);\r\n    }\r\n    return m;\r\n}\r\n\r\nexport function BigNatModule_shiftDown(d, n) {\r\n    if ((n.bound - d) <= 0) {\r\n        return BigNatModule_zero;\r\n    }\r\n    else {\r\n        const m = BigNatModule_createN(n.bound - d);\r\n        for (let i = 0; i <= (m.bound - 1); i++) {\r\n            m.digits[i] = (n.digits[i + d] | 0);\r\n        }\r\n        return m;\r\n    }\r\n}\r\n\r\nexport function BigNatModule_degree(n) {\r\n    return n.bound - 1;\r\n}\r\n\r\nexport function BigNatModule_addP(i_mut, n_mut, c_mut, p_mut, q_mut, r_mut) {\r\n    let z, i_1, z_1, i_2;\r\n    BigNatModule_addP:\r\n    while (true) {\r\n        const i = i_mut, n = n_mut, c = c_mut, p = p_mut, q = q_mut, r = r_mut;\r\n        if (i < n) {\r\n            const x = ((((z = p, (i_1 = (i | 0), (i_1 < z.bound) ? z.digits[i_1] : 0))) + ((z_1 = q, (i_2 = (i | 0), (i_2 < z_1.bound) ? z_1.digits[i_2] : 0)))) + c) | 0;\r\n            r.digits[i] = (BigNatModule_modbase(x) | 0);\r\n            i_mut = (i + 1);\r\n            n_mut = n;\r\n            c_mut = BigNatModule_divbase(x);\r\n            p_mut = p;\r\n            q_mut = q;\r\n            r_mut = r;\r\n            continue BigNatModule_addP;\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function BigNatModule_add(p, q) {\r\n    const rbound = (1 + BigNatModule_maxInt(p.bound, q.bound)) | 0;\r\n    const r = BigNatModule_createN(rbound);\r\n    BigNatModule_addP(0, rbound, 0, p, q, r);\r\n    return BigNatModule_normN(r);\r\n}\r\n\r\nexport function BigNatModule_subP(i_mut, n_mut, c_mut, p_mut, q_mut, r_mut) {\r\n    let z, i_1, z_1, i_2;\r\n    BigNatModule_subP:\r\n    while (true) {\r\n        const i = i_mut, n = n_mut, c = c_mut, p = p_mut, q = q_mut, r = r_mut;\r\n        if (i < n) {\r\n            const x = ((((z = p, (i_1 = (i | 0), (i_1 < z.bound) ? z.digits[i_1] : 0))) - ((z_1 = q, (i_2 = (i | 0), (i_2 < z_1.bound) ? z_1.digits[i_2] : 0)))) + c) | 0;\r\n            if (x > 0) {\r\n                r.digits[i] = (BigNatModule_modbase(x) | 0);\r\n                i_mut = (i + 1);\r\n                n_mut = n;\r\n                c_mut = BigNatModule_divbase(x);\r\n                p_mut = p;\r\n                q_mut = q;\r\n                r_mut = r;\r\n                continue BigNatModule_subP;\r\n            }\r\n            else {\r\n                const x_1 = (x + BigNatModule_baseN) | 0;\r\n                r.digits[i] = (BigNatModule_modbase(x_1) | 0);\r\n                i_mut = (i + 1);\r\n                n_mut = n;\r\n                c_mut = (BigNatModule_divbase(x_1) - 1);\r\n                p_mut = p;\r\n                q_mut = q;\r\n                r_mut = r;\r\n                continue BigNatModule_subP;\r\n            }\r\n        }\r\n        else {\r\n            return c !== 0;\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function BigNatModule_sub(p, q) {\r\n    const rbound = BigNatModule_maxInt(p.bound, q.bound) | 0;\r\n    const r = BigNatModule_createN(rbound);\r\n    if (BigNatModule_subP(0, rbound, 0, p, q, r)) {\r\n        return BigNatModule_embed(0);\r\n    }\r\n    else {\r\n        return BigNatModule_normN(r);\r\n    }\r\n}\r\n\r\nexport function BigNatModule_isZero(p) {\r\n    return p.bound === 0;\r\n}\r\n\r\nexport function BigNatModule_IsZero(p) {\r\n    return BigNatModule_isZero(p);\r\n}\r\n\r\nexport function BigNatModule_isOne(p) {\r\n    if (p.bound === 1) {\r\n        return p.digits[0] === 1;\r\n    }\r\n    else {\r\n        return false;\r\n    }\r\n}\r\n\r\nexport function BigNatModule_equal(p, q) {\r\n    if (p.bound === q.bound) {\r\n        const check = (pa_mut, qa_mut, i_mut) => {\r\n            check:\r\n            while (true) {\r\n                const pa = pa_mut, qa = qa_mut, i = i_mut;\r\n                if (i === -1) {\r\n                    return true;\r\n                }\r\n                else if (pa[i] === qa[i]) {\r\n                    pa_mut = pa;\r\n                    qa_mut = qa;\r\n                    i_mut = (i - 1);\r\n                    continue check;\r\n                }\r\n                else {\r\n                    return false;\r\n                }\r\n                break;\r\n            }\r\n        };\r\n        return check(p.digits, q.digits, p.bound - 1);\r\n    }\r\n    else {\r\n        return false;\r\n    }\r\n}\r\n\r\nexport function BigNatModule_shiftCompare(p, pn, q, qn) {\r\n    if ((p.bound + pn) < (q.bound + qn)) {\r\n        return -1;\r\n    }\r\n    else if ((p.bound + pn) > (q.bound + pn)) {\r\n        return 1;\r\n    }\r\n    else {\r\n        const check = (pa_mut, qa_mut, i_mut) => {\r\n            check:\r\n            while (true) {\r\n                const pa = pa_mut, qa = qa_mut, i = i_mut;\r\n                if (i === -1) {\r\n                    return 0;\r\n                }\r\n                else {\r\n                    const pai = ((i < pn) ? 0 : pa[i - pn]) | 0;\r\n                    const qai = ((i < qn) ? 0 : qa[i - qn]) | 0;\r\n                    if (pai === qai) {\r\n                        pa_mut = pa;\r\n                        qa_mut = qa;\r\n                        i_mut = (i - 1);\r\n                        continue check;\r\n                    }\r\n                    else if (pai < qai) {\r\n                        return -1;\r\n                    }\r\n                    else {\r\n                        return 1;\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n        };\r\n        return check(p.digits, q.digits, (p.bound + pn) - 1) | 0;\r\n    }\r\n}\r\n\r\nexport function BigNatModule_compare(p, q) {\r\n    if (p.bound < q.bound) {\r\n        return -1;\r\n    }\r\n    else if (p.bound > q.bound) {\r\n        return 1;\r\n    }\r\n    else {\r\n        const check = (pa_mut, qa_mut, i_mut) => {\r\n            check:\r\n            while (true) {\r\n                const pa = pa_mut, qa = qa_mut, i = i_mut;\r\n                if (i === -1) {\r\n                    return 0;\r\n                }\r\n                else if (pa[i] === qa[i]) {\r\n                    pa_mut = pa;\r\n                    qa_mut = qa;\r\n                    i_mut = (i - 1);\r\n                    continue check;\r\n                }\r\n                else if (pa[i] < qa[i]) {\r\n                    return -1;\r\n                }\r\n                else {\r\n                    return 1;\r\n                }\r\n                break;\r\n            }\r\n        };\r\n        return check(p.digits, q.digits, p.bound - 1) | 0;\r\n    }\r\n}\r\n\r\nexport function BigNatModule_lt(p, q) {\r\n    return BigNatModule_compare(p, q) === -1;\r\n}\r\n\r\nexport function BigNatModule_gt(p, q) {\r\n    return BigNatModule_compare(p, q) === 1;\r\n}\r\n\r\nexport function BigNatModule_lte(p, q) {\r\n    return BigNatModule_compare(p, q) !== 1;\r\n}\r\n\r\nexport function BigNatModule_gte(p, q) {\r\n    return BigNatModule_compare(p, q) !== -1;\r\n}\r\n\r\nexport function BigNatModule_min(a, b) {\r\n    if (BigNatModule_lt(a, b)) {\r\n        return a;\r\n    }\r\n    else {\r\n        return b;\r\n    }\r\n}\r\n\r\nexport function BigNatModule_max(a, b) {\r\n    if (BigNatModule_lt(a, b)) {\r\n        return b;\r\n    }\r\n    else {\r\n        return a;\r\n    }\r\n}\r\n\r\nexport function BigNatModule_contributeArr(a_mut, i_mut, c_mut) {\r\n    BigNatModule_contributeArr:\r\n    while (true) {\r\n        const a = a_mut, i = i_mut, c = c_mut;\r\n        const x = op_Addition(fromInteger(a[i], false, 2), c);\r\n        const c_1 = op_Division(x, BigNatModule_baseNi64);\r\n        const x_3 = (~(~toInt(op_BitwiseAnd(x, BigNatModule_baseMaski64)))) | 0;\r\n        a[i] = (x_3 | 0);\r\n        if (compare(c_1, fromBits(0, 0, false)) > 0) {\r\n            a_mut = a;\r\n            i_mut = (i + 1);\r\n            c_mut = c_1;\r\n            continue BigNatModule_contributeArr;\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function BigNatModule_scale(k, p) {\r\n    const r = BigNatModule_createN(p.bound + BigNatModule_boundInt);\r\n    const k_1 = fromInteger(k, false, 2);\r\n    for (let i = 0; i <= (p.bound - 1); i++) {\r\n        BigNatModule_contributeArr(r.digits, i, op_Multiply(k_1, fromInteger(p.digits[i], false, 2)));\r\n    }\r\n    return BigNatModule_normN(r);\r\n}\r\n\r\nexport function BigNatModule_mulSchoolBookBothSmall(p, q) {\r\n    const r = BigNatModule_createN(2);\r\n    const rak = op_Multiply(fromInteger(p, false, 2), fromInteger(q, false, 2));\r\n    BigNatModule_setCoeff(r, 0, ~(~toInt(op_BitwiseAnd(rak, BigNatModule_baseMaski64))));\r\n    BigNatModule_setCoeff(r, 1, ~(~toInt(op_Division(rak, BigNatModule_baseNi64))));\r\n    return BigNatModule_normN(r);\r\n}\r\n\r\nexport function BigNatModule_mulSchoolBookCarry(r_mut, c_mut, k_mut) {\r\n    BigNatModule_mulSchoolBookCarry:\r\n    while (true) {\r\n        const r = r_mut, c = c_mut, k = k_mut;\r\n        if (compare(c, fromBits(0, 0, false)) > 0) {\r\n            const rak = op_Addition(BigNatModule_coeff64(r, k), c);\r\n            BigNatModule_setCoeff(r, k, ~(~toInt(op_BitwiseAnd(rak, BigNatModule_baseMaski64))));\r\n            r_mut = r;\r\n            c_mut = op_Division(rak, BigNatModule_baseNi64);\r\n            k_mut = (k + 1);\r\n            continue BigNatModule_mulSchoolBookCarry;\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function BigNatModule_mulSchoolBookOneSmall(p, q) {\r\n    const bp = BigNatModule_bound(p) | 0;\r\n    const r = BigNatModule_createN(bp + 1);\r\n    const q_1 = fromInteger(q, false, 2);\r\n    let c = fromBits(0, 0, false);\r\n    for (let i = 0; i <= (bp - 1); i++) {\r\n        const rak = op_Addition(op_Addition(c, BigNatModule_coeff64(r, i)), op_Multiply(BigNatModule_coeff64(p, i), q_1));\r\n        BigNatModule_setCoeff(r, i, ~(~toInt(op_BitwiseAnd(rak, BigNatModule_baseMaski64))));\r\n        c = op_Division(rak, BigNatModule_baseNi64);\r\n    }\r\n    BigNatModule_mulSchoolBookCarry(r, c, bp);\r\n    return BigNatModule_normN(r);\r\n}\r\n\r\nexport function BigNatModule_mulSchoolBookNeitherSmall(p, q) {\r\n    const r = BigNatModule_createN(p.bound + q.bound);\r\n    const ra = r.digits;\r\n    for (let i = 0; i <= (p.bound - 1); i++) {\r\n        const pai = fromInteger(p.digits[i], false, 2);\r\n        let c = fromBits(0, 0, false);\r\n        let k = i;\r\n        for (let j = 0; j <= (q.bound - 1); j++) {\r\n            const qaj = fromInteger(q.digits[j], false, 2);\r\n            const rak = op_Addition(op_Addition(fromInteger(ra[k], false, 2), c), op_Multiply(pai, qaj));\r\n            ra[k] = ((~(~toInt(op_BitwiseAnd(rak, BigNatModule_baseMaski64)))) | 0);\r\n            c = op_Division(rak, BigNatModule_baseNi64);\r\n            k = ((k + 1) | 0);\r\n        }\r\n        BigNatModule_mulSchoolBookCarry(r, c, k);\r\n    }\r\n    return BigNatModule_normN(r);\r\n}\r\n\r\nexport function BigNatModule_mulSchoolBook(p, q) {\r\n    const pSmall = BigNatModule_bound(p) === 1;\r\n    const qSmall = BigNatModule_bound(q) === 1;\r\n    if (pSmall ? qSmall : false) {\r\n        return BigNatModule_mulSchoolBookBothSmall(BigNatModule_coeff(p, 0), BigNatModule_coeff(q, 0));\r\n    }\r\n    else if (pSmall) {\r\n        return BigNatModule_mulSchoolBookOneSmall(q, BigNatModule_coeff(p, 0));\r\n    }\r\n    else if (qSmall) {\r\n        return BigNatModule_mulSchoolBookOneSmall(p, BigNatModule_coeff(q, 0));\r\n    }\r\n    else {\r\n        return BigNatModule_mulSchoolBookNeitherSmall(p, q);\r\n    }\r\n}\r\n\r\nexport class BigNatModule_encoding extends Record {\r\n    constructor(bigL, twoToBigL, k, bigK, bigN, split, splits) {\r\n        super();\r\n        this.bigL = (bigL | 0);\r\n        this.twoToBigL = (twoToBigL | 0);\r\n        this.k = (k | 0);\r\n        this.bigK = (bigK | 0);\r\n        this.bigN = (bigN | 0);\r\n        this.split = (split | 0);\r\n        this.splits = splits;\r\n    }\r\n}\r\n\r\nexport function BigNatModule_encoding$reflection() {\r\n    return record_type(\"BigInt.BigNatModule.encoding\", [], BigNatModule_encoding, () => [[\"bigL\", int32_type], [\"twoToBigL\", int32_type], [\"k\", int32_type], [\"bigK\", int32_type], [\"bigN\", int32_type], [\"split\", int32_type], [\"splits\", array_type(int32_type)]]);\r\n}\r\n\r\nexport function BigNatModule_mkEncoding(bigL, k, bigK, bigN) {\r\n    return new BigNatModule_encoding(bigL, BigNatModule_pow32(2, bigL), k, bigK, bigN, ~(~(BigNatModule_baseBits / bigL)), initialize(~(~(BigNatModule_baseBits / bigL)), (i) => BigNatModule_pow32(2, bigL * i), Int32Array));\r\n}\r\n\r\nexport const BigNatModule_table = [BigNatModule_mkEncoding(1, 28, 268435456, 268435456), BigNatModule_mkEncoding(2, 26, 67108864, 134217728), BigNatModule_mkEncoding(3, 24, 16777216, 50331648), BigNatModule_mkEncoding(4, 22, 4194304, 16777216), BigNatModule_mkEncoding(5, 20, 1048576, 5242880), BigNatModule_mkEncoding(6, 18, 262144, 1572864), BigNatModule_mkEncoding(7, 16, 65536, 458752), BigNatModule_mkEncoding(8, 14, 16384, 131072), BigNatModule_mkEncoding(9, 12, 4096, 36864), BigNatModule_mkEncoding(10, 10, 1024, 10240), BigNatModule_mkEncoding(11, 8, 256, 2816), BigNatModule_mkEncoding(12, 6, 64, 768), BigNatModule_mkEncoding(13, 4, 16, 208)];\r\n\r\nexport function BigNatModule_calculateTableTow(bigL) {\r\n    const k = (BigNatModule_FFT_maxBitsInsideFp - (2 * bigL)) | 0;\r\n    const bigK = BigNatModule_pow64(fromBits(2, 0, false), k);\r\n    return [bigL, k, bigK, op_Multiply(bigK, fromInteger(bigL, false, 2))];\r\n}\r\n\r\nexport function BigNatModule_encodingGivenResultBits(bitsRes) {\r\n    const selectFrom = (i_mut) => {\r\n        selectFrom:\r\n        while (true) {\r\n            const i = i_mut;\r\n            if (((i + 1) < BigNatModule_table.length) ? (bitsRes < BigNatModule_table[i + 1].bigN) : false) {\r\n                i_mut = (i + 1);\r\n                continue selectFrom;\r\n            }\r\n            else {\r\n                return BigNatModule_table[i];\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    if (bitsRes >= BigNatModule_table[0].bigN) {\r\n        throw (new Error(\"Product is huge, around 268435456 bits, beyond quickmul\"));\r\n    }\r\n    else {\r\n        return selectFrom(0);\r\n    }\r\n}\r\n\r\nexport const BigNatModule_bitmask = initialize(BigNatModule_baseBits, (i) => (BigNatModule_pow32(2, i) - 1), Int32Array);\r\n\r\nexport const BigNatModule_twopowers = initialize(BigNatModule_baseBits, (i) => BigNatModule_pow32(2, i), Int32Array);\r\n\r\nexport const BigNatModule_twopowersI64 = initialize(BigNatModule_baseBits, (i) => BigNatModule_pow64(fromBits(2, 0, false), i));\r\n\r\nexport function BigNatModule_wordBits(word) {\r\n    const hi = (k_mut) => {\r\n        hi:\r\n        while (true) {\r\n            const k = k_mut;\r\n            if (k === 0) {\r\n                return 0;\r\n            }\r\n            else if ((word & BigNatModule_twopowers[k - 1]) !== 0) {\r\n                return k | 0;\r\n            }\r\n            else {\r\n                k_mut = (k - 1);\r\n                continue hi;\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    return hi(BigNatModule_baseBits) | 0;\r\n}\r\n\r\nexport function BigNatModule_bits(u) {\r\n    if (u.bound === 0) {\r\n        return 0;\r\n    }\r\n    else {\r\n        return ((BigNatModule_degree(u) * BigNatModule_baseBits) + BigNatModule_wordBits(u.digits[BigNatModule_degree(u)])) | 0;\r\n    }\r\n}\r\n\r\nexport function BigNatModule_extractBits(n, enc, bi) {\r\n    let z, i, z_1, i_1, z_2, i_2;\r\n    const biw = (~(~(bi / BigNatModule_baseBits))) | 0;\r\n    const bjw = (~(~(((bi + enc.bigL) - 1) / BigNatModule_baseBits))) | 0;\r\n    if (biw !== bjw) {\r\n        const xbit = (bi % BigNatModule_baseBits) | 0;\r\n        return (((((z = n, (i = (biw | 0), (i < z.bound) ? z.digits[i] : 0))) >> xbit) | (((z_1 = n, (i_1 = (bjw | 0), (i_1 < z_1.bound) ? z_1.digits[i_1] : 0))) << (BigNatModule_baseBits - xbit))) & BigNatModule_bitmask[enc.bigL]) | 0;\r\n    }\r\n    else {\r\n        return ((((z_2 = n, (i_2 = (biw | 0), (i_2 < z_2.bound) ? z_2.digits[i_2] : 0))) >> (bi % BigNatModule_baseBits)) & BigNatModule_bitmask[enc.bigL]) | 0;\r\n    }\r\n}\r\n\r\nexport function BigNatModule_encodePoly(enc, n) {\r\n    const poly = fill(new Uint32Array(enc.bigK), 0, enc.bigK, BigNatModule_FFT_Fp_ofInt32(0));\r\n    const biMax = (n.bound * BigNatModule_baseBits) | 0;\r\n    const encoder = (i_mut, bi_mut) => {\r\n        encoder:\r\n        while (true) {\r\n            const i = i_mut, bi = bi_mut;\r\n            if ((i === enc.bigK) ? true : (bi > biMax)) {\r\n            }\r\n            else {\r\n                const pi = BigNatModule_extractBits(n, enc, bi) | 0;\r\n                poly[i] = BigNatModule_FFT_Fp_ofInt32(pi);\r\n                i_mut = (i + 1);\r\n                bi_mut = (bi + enc.bigL);\r\n                continue encoder;\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    encoder(0, 0);\r\n    return poly;\r\n}\r\n\r\nexport function BigNatModule_decodeResultBits(enc, poly) {\r\n    let n = 0;\r\n    for (let i = 0; i <= (poly.length - 1); i++) {\r\n        if (poly[i] !== BigNatModule_FFT_mzero) {\r\n            n = (i | 0);\r\n        }\r\n    }\r\n    return (((BigNatModule_FFT_maxBitsInsideFp + (enc.bigL * n)) + 1) + 1) | 0;\r\n}\r\n\r\nexport function BigNatModule_decodePoly(enc, poly) {\r\n    const rbound = ((~(~(BigNatModule_decodeResultBits(enc, poly) / BigNatModule_baseBits))) + 1) | 0;\r\n    const r = BigNatModule_createN(rbound);\r\n    const evaluate = (i_mut, j_mut, d_mut) => {\r\n        evaluate:\r\n        while (true) {\r\n            const i = i_mut, j = j_mut, d = d_mut;\r\n            if (i === enc.bigK) {\r\n            }\r\n            else {\r\n                if (j >= rbound) {\r\n                }\r\n                else {\r\n                    BigNatModule_contributeArr(r.digits, j, op_Multiply(fromInteger(BigNatModule_FFT_Fp_toInt(poly[i]), false, 2), BigNatModule_twopowersI64[d]));\r\n                }\r\n                const d_1 = (d + enc.bigL) | 0;\r\n                const patternInput = (d_1 >= BigNatModule_baseBits) ? [j + 1, d_1 - BigNatModule_baseBits] : [j, d_1];\r\n                i_mut = (i + 1);\r\n                j_mut = patternInput[0];\r\n                d_mut = patternInput[1];\r\n                continue evaluate;\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    evaluate(0, 0, 0);\r\n    return BigNatModule_normN(r);\r\n}\r\n\r\nexport function BigNatModule_quickMulUsingFft(u, v) {\r\n    const enc = BigNatModule_encodingGivenResultBits(BigNatModule_bits(u) + BigNatModule_bits(v));\r\n    return BigNatModule_normN(BigNatModule_decodePoly(enc, BigNatModule_FFT_computeFftPaddedPolynomialProduct(enc.bigK, enc.k, BigNatModule_encodePoly(enc, u), BigNatModule_encodePoly(enc, v))));\r\n}\r\n\r\nexport const BigNatModule_minDigitsKaratsuba = 16;\r\n\r\nexport function BigNatModule_recMulKaratsuba(mul, p, q) {\r\n    const bmax = BigNatModule_maxInt(p.bound, q.bound) | 0;\r\n    if (bmax > BigNatModule_minDigitsKaratsuba) {\r\n        const k = (~(~(bmax / 2))) | 0;\r\n        const a0 = BigNatModule_restrictTo(k, p);\r\n        const a1 = BigNatModule_shiftDown(k, p);\r\n        const b0 = BigNatModule_restrictTo(k, q);\r\n        const b1 = BigNatModule_shiftDown(k, q);\r\n        const q0 = mul(a0, b0);\r\n        const q1 = mul(BigNatModule_add(a0, a1), BigNatModule_add(b0, b1));\r\n        const q2 = mul(a1, b1);\r\n        return BigNatModule_add(q0, BigNatModule_shiftUp(k, BigNatModule_add(BigNatModule_sub(q1, BigNatModule_add(q0, q2)), BigNatModule_shiftUp(k, q2))));\r\n    }\r\n    else {\r\n        return BigNatModule_mulSchoolBook(p, q);\r\n    }\r\n}\r\n\r\nexport function BigNatModule_mulKaratsuba(x, y) {\r\n    return BigNatModule_recMulKaratsuba((x_1, y_1) => BigNatModule_mulKaratsuba(x_1, y_1), x, y);\r\n}\r\n\r\nexport const BigNatModule_productDigitsUpperSchoolBook = ~(~(64000 / BigNatModule_baseBits));\r\n\r\nexport const BigNatModule_singleDigitForceSchoolBook = ~(~(32000 / BigNatModule_baseBits));\r\n\r\nexport const BigNatModule_productDigitsUpperFft = ~(~(BigNatModule_table[0].bigN / BigNatModule_baseBits));\r\n\r\nexport function BigNatModule_mul(p, q) {\r\n    return BigNatModule_mulSchoolBook(p, q);\r\n}\r\n\r\nexport function BigNatModule_scaleSubInPlace(x, f, a, n) {\r\n    const patternInput = [x.digits, BigNatModule_degree(x)];\r\n    const x_1 = patternInput[0];\r\n    const patternInput_1 = [a.digits, BigNatModule_degree(a)];\r\n    const ad = patternInput_1[1] | 0;\r\n    const a_1 = patternInput_1[0];\r\n    const f_1 = fromInteger(f, false, 2);\r\n    let j = 0;\r\n    let z = op_Multiply(f_1, fromInteger(a_1[0], false, 2));\r\n    while ((compare(z, fromBits(0, 0, false)) > 0) ? true : (j < ad)) {\r\n        if (j > patternInput[1]) {\r\n            throw (new Error(\"scaleSubInPlace: pre-condition did not apply, result would be -ve\"));\r\n        }\r\n        let zLo = ~(~toInt(op_BitwiseAnd(z, BigNatModule_baseMaski64)));\r\n        let zHi = op_Division(z, BigNatModule_baseNi64);\r\n        if (zLo <= x_1[j + n]) {\r\n            x_1[j + n] = ((x_1[j + n] - zLo) | 0);\r\n        }\r\n        else {\r\n            x_1[j + n] = ((x_1[j + n] + (BigNatModule_baseN - zLo)) | 0);\r\n            zHi = op_Addition(zHi, fromBits(1, 0, false));\r\n        }\r\n        if (j < ad) {\r\n            z = op_Addition(zHi, op_Multiply(f_1, fromInteger(a_1[j + 1], false, 2)));\r\n        }\r\n        else {\r\n            z = zHi;\r\n        }\r\n        j = ((j + 1) | 0);\r\n    }\r\n    void BigNatModule_normN(x);\r\n}\r\n\r\nexport function BigNatModule_scaleSub(x, f, a, n) {\r\n    const freshx = BigNatModule_add(x, BigNatModule_zero);\r\n    BigNatModule_scaleSubInPlace(freshx, f, a, n);\r\n    return BigNatModule_normN(freshx);\r\n}\r\n\r\nexport function BigNatModule_scaleAddInPlace(x, f, a, n) {\r\n    const patternInput = [x.digits, BigNatModule_degree(x)];\r\n    const x_1 = patternInput[0];\r\n    const patternInput_1 = [a.digits, BigNatModule_degree(a)];\r\n    const ad = patternInput_1[1] | 0;\r\n    const a_1 = patternInput_1[0];\r\n    const f_1 = fromInteger(f, false, 2);\r\n    let j = 0;\r\n    let z = op_Multiply(f_1, fromInteger(a_1[0], false, 2));\r\n    while ((compare(z, fromBits(0, 0, false)) > 0) ? true : (j < ad)) {\r\n        if (j > patternInput[1]) {\r\n            throw (new Error(\"scaleSubInPlace: pre-condition did not apply, result would be -ve\"));\r\n        }\r\n        let zLo = ~(~toInt(op_BitwiseAnd(z, BigNatModule_baseMaski64)));\r\n        let zHi = op_Division(z, BigNatModule_baseNi64);\r\n        if (zLo < (BigNatModule_baseN - x_1[j + n])) {\r\n            x_1[j + n] = ((x_1[j + n] + zLo) | 0);\r\n        }\r\n        else {\r\n            x_1[j + n] = ((zLo - (BigNatModule_baseN - x_1[j + n])) | 0);\r\n            zHi = op_Addition(zHi, fromBits(1, 0, false));\r\n        }\r\n        if (j < ad) {\r\n            z = op_Addition(zHi, op_Multiply(f_1, fromInteger(a_1[j + 1], false, 2)));\r\n        }\r\n        else {\r\n            z = zHi;\r\n        }\r\n        j = ((j + 1) | 0);\r\n    }\r\n    void BigNatModule_normN(x);\r\n}\r\n\r\nexport function BigNatModule_scaleAdd(x, f, a, n) {\r\n    const freshx = BigNatModule_add(x, BigNatModule_zero);\r\n    BigNatModule_scaleAddInPlace(freshx, f, a, n);\r\n    return BigNatModule_normN(freshx);\r\n}\r\n\r\nexport function BigNatModule_removeFactor(x, a, n) {\r\n    const patternInput = [BigNatModule_degree(a), BigNatModule_degree(x)];\r\n    const degx = patternInput[1] | 0;\r\n    const dega = patternInput[0] | 0;\r\n    if (degx < (dega + n)) {\r\n        return 0;\r\n    }\r\n    else {\r\n        const patternInput_1 = [a.digits, x.digits];\r\n        const xa = patternInput_1[1];\r\n        const aa = patternInput_1[0];\r\n        const f = ((dega === 0) ? ((degx === n) ? (~(~(xa[n] / aa[0]))) : (~(~toInt(op_Division(op_Addition(op_Multiply(fromInteger(xa[degx], false, 2), BigNatModule_baseNi64), fromInteger(xa[degx - 1], false, 2)), fromInteger(aa[0], false, 2)))))) : ((degx === (dega + n)) ? (~(~(xa[degx] / (aa[dega] + 1)))) : (~(~toInt(op_Division(op_Addition(op_Multiply(fromInteger(xa[degx], false, 2), BigNatModule_baseNi64), fromInteger(xa[degx - 1], false, 2)), op_Addition(fromInteger(aa[dega], false, 2), fromBits(1, 0, false)))))))) | 0;\r\n        if (f === 0) {\r\n            if (BigNatModule_shiftCompare(a, n, x, 0) !== 1) {\r\n                return 1;\r\n            }\r\n            else {\r\n                return 0;\r\n            }\r\n        }\r\n        else {\r\n            return f | 0;\r\n        }\r\n    }\r\n}\r\n\r\nexport function BigNatModule_divmod(b, a) {\r\n    if (BigNatModule_isZero(a)) {\r\n        throw (new Error());\r\n    }\r\n    else if (BigNatModule_degree(b) < BigNatModule_degree(a)) {\r\n        return [BigNatModule_zero, b];\r\n    }\r\n    else {\r\n        const x = BigNatModule_copyN(b);\r\n        const d = BigNatModule_createN(((BigNatModule_degree(b) - BigNatModule_degree(a)) + 1) + 1);\r\n        let p = BigNatModule_degree(b);\r\n        const m = BigNatModule_degree(a) | 0;\r\n        let n = p - m;\r\n        const Invariant = (tupledArg) => {\r\n        };\r\n        let finished = false;\r\n        while (!finished) {\r\n            Invariant([d, x, n, p]);\r\n            const f = BigNatModule_removeFactor(x, a, n) | 0;\r\n            if (f > 0) {\r\n                BigNatModule_scaleSubInPlace(x, f, a, n);\r\n                BigNatModule_scaleAddInPlace(d, f, BigNatModule_one, n);\r\n                Invariant([d, x, n, p]);\r\n            }\r\n            else {\r\n                finished = ((f === 0) ? (n === 0) : false);\r\n                if (!finished) {\r\n                    if (p === (m + n)) {\r\n                        Invariant([d, x, n - 1, p]);\r\n                        n = ((n - 1) | 0);\r\n                    }\r\n                    else {\r\n                        Invariant([d, x, n - 1, p - 1]);\r\n                        n = ((n - 1) | 0);\r\n                        p = ((p - 1) | 0);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return [BigNatModule_normN(d), BigNatModule_normN(x)];\r\n    }\r\n}\r\n\r\nexport function BigNatModule_div(b, a) {\r\n    return BigNatModule_divmod(b, a)[0];\r\n}\r\n\r\nexport function BigNatModule_rem(b, a) {\r\n    return BigNatModule_divmod(b, a)[1];\r\n}\r\n\r\nexport function BigNatModule_bitAnd(a, b) {\r\n    const r = BigNatModule_createN(BigNatModule_minInt(a.bound, b.bound));\r\n    for (let i = 0; i <= (r.bound - 1); i++) {\r\n        r.digits[i] = ((a.digits[i] & b.digits[i]) | 0);\r\n    }\r\n    return BigNatModule_normN(r);\r\n}\r\n\r\nexport function BigNatModule_bitOr(a, b) {\r\n    const r = BigNatModule_createN(BigNatModule_maxInt(a.bound, b.bound));\r\n    for (let i = 0; i <= (a.bound - 1); i++) {\r\n        r.digits[i] = ((r.digits[i] | a.digits[i]) | 0);\r\n    }\r\n    for (let i_1 = 0; i_1 <= (b.bound - 1); i_1++) {\r\n        r.digits[i_1] = ((r.digits[i_1] | b.digits[i_1]) | 0);\r\n    }\r\n    return BigNatModule_normN(r);\r\n}\r\n\r\nexport function BigNatModule_bitXor(a, b) {\r\n    const r = BigNatModule_createN(BigNatModule_maxInt(a.bound, b.bound));\r\n    for (let i = 0; i <= (a.bound - 1); i++) {\r\n        r.digits[i] = ((r.digits[i] ^ a.digits[i]) | 0);\r\n    }\r\n    for (let i_1 = 0; i_1 <= (b.bound - 1); i_1++) {\r\n        r.digits[i_1] = ((r.digits[i_1] ^ b.digits[i_1]) | 0);\r\n    }\r\n    return BigNatModule_normN(r);\r\n}\r\n\r\nexport function BigNatModule_hcf(a, b) {\r\n    const hcfloop = (a_1_mut, b_1_mut) => {\r\n        hcfloop:\r\n        while (true) {\r\n            const a_1 = a_1_mut, b_1 = b_1_mut;\r\n            if (BigNatModule_equal(BigNatModule_zero, a_1)) {\r\n                return b_1;\r\n            }\r\n            else {\r\n                a_1_mut = BigNatModule_divmod(b_1, a_1)[1];\r\n                b_1_mut = a_1;\r\n                continue hcfloop;\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    if (BigNatModule_lt(a, b)) {\r\n        return hcfloop(a, b);\r\n    }\r\n    else {\r\n        return hcfloop(b, a);\r\n    }\r\n}\r\n\r\nexport const BigNatModule_two = BigNatModule_embed(2);\r\n\r\nexport function BigNatModule_powi(x, n) {\r\n    const power = (acc_mut, x_1_mut, n_1_mut) => {\r\n        power:\r\n        while (true) {\r\n            const acc = acc_mut, x_1 = x_1_mut, n_1 = n_1_mut;\r\n            if (n_1 === 0) {\r\n                return acc;\r\n            }\r\n            else if ((n_1 % 2) === 0) {\r\n                acc_mut = acc;\r\n                x_1_mut = BigNatModule_mul(x_1, x_1);\r\n                n_1_mut = (~(~(n_1 / 2)));\r\n                continue power;\r\n            }\r\n            else {\r\n                acc_mut = BigNatModule_mul(x_1, acc);\r\n                x_1_mut = BigNatModule_mul(x_1, x_1);\r\n                n_1_mut = (~(~(n_1 / 2)));\r\n                continue power;\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    return power(BigNatModule_one, x, n);\r\n}\r\n\r\nexport function BigNatModule_pow(x, n) {\r\n    const power = (acc_mut, x_1_mut, n_1_mut) => {\r\n        power:\r\n        while (true) {\r\n            const acc = acc_mut, x_1 = x_1_mut, n_1 = n_1_mut;\r\n            if (BigNatModule_isZero(n_1)) {\r\n                return acc;\r\n            }\r\n            else {\r\n                const patternInput = BigNatModule_divmod(n_1, BigNatModule_two);\r\n                const ndiv2 = patternInput[0];\r\n                if (BigNatModule_isZero(patternInput[1])) {\r\n                    acc_mut = acc;\r\n                    x_1_mut = BigNatModule_mul(x_1, x_1);\r\n                    n_1_mut = ndiv2;\r\n                    continue power;\r\n                }\r\n                else {\r\n                    acc_mut = BigNatModule_mul(x_1, acc);\r\n                    x_1_mut = BigNatModule_mul(x_1, x_1);\r\n                    n_1_mut = ndiv2;\r\n                    continue power;\r\n                }\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    return power(BigNatModule_one, x, n);\r\n}\r\n\r\nexport function BigNatModule_toFloat(n) {\r\n    const evalFloat = (acc_mut, k_mut, i_mut) => {\r\n        evalFloat:\r\n        while (true) {\r\n            const acc = acc_mut, k = k_mut, i = i_mut;\r\n            if (i === n.bound) {\r\n                return acc;\r\n            }\r\n            else {\r\n                acc_mut = (acc + (k * n.digits[i]));\r\n                k_mut = (k * BigNatModule_baseN);\r\n                i_mut = (i + 1);\r\n                continue evalFloat;\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    return evalFloat(0, 1, 0);\r\n}\r\n\r\nexport function BigNatModule_ofInt32(n) {\r\n    return BigNatModule_embed(n);\r\n}\r\n\r\nexport function BigNatModule_ofInt64(n) {\r\n    return BigNatModule_embed64(n);\r\n}\r\n\r\nexport function BigNatModule_toUInt32(n) {\r\n    const matchValue = n.bound | 0;\r\n    switch (matchValue) {\r\n        case 0: {\r\n            return 0;\r\n        }\r\n        case 1: {\r\n            const value = n.digits[0] | 0;\r\n            return value >>> 0;\r\n        }\r\n        case 2: {\r\n            const patternInput = [n.digits[0], n.digits[1]];\r\n            const xB = patternInput[1] | 0;\r\n            if (xB > BigNatModule_baseMask32B) {\r\n                throw (new Error());\r\n            }\r\n            return ((patternInput[0] & BigNatModule_baseMask32A) >>> 0) + ((((xB & BigNatModule_baseMask32B) >>> 0) << BigNatModule_baseShift32B) >>> 0);\r\n        }\r\n        default: {\r\n            throw (new Error());\r\n        }\r\n    }\r\n}\r\n\r\nexport function BigNatModule_toUInt64(n) {\r\n    const matchValue = n.bound | 0;\r\n    switch (matchValue) {\r\n        case 0: {\r\n            return fromBits(0, 0, true);\r\n        }\r\n        case 1: {\r\n            return fromInteger(n.digits[0], true, 2);\r\n        }\r\n        case 2: {\r\n            const patternInput = [n.digits[0], n.digits[1]];\r\n            return op_Addition(fromInteger(patternInput[0] & BigNatModule_baseMask64A, true, 2), op_LeftShift(fromInteger(patternInput[1] & BigNatModule_baseMask64B, true, 2), BigNatModule_baseShift64B));\r\n        }\r\n        case 3: {\r\n            const patternInput_1 = [n.digits[0], n.digits[1], n.digits[2]];\r\n            const xC = patternInput_1[2] | 0;\r\n            if (xC > BigNatModule_baseMask64C) {\r\n                throw (new Error());\r\n            }\r\n            return op_Addition(op_Addition(fromInteger(patternInput_1[0] & BigNatModule_baseMask64A, true, 2), op_LeftShift(fromInteger(patternInput_1[1] & BigNatModule_baseMask64B, true, 2), BigNatModule_baseShift64B)), op_LeftShift(fromInteger(xC & BigNatModule_baseMask64C, true, 2), BigNatModule_baseShift64C));\r\n        }\r\n        default: {\r\n            throw (new Error());\r\n        }\r\n    }\r\n}\r\n\r\nexport function BigNatModule_toString(n) {\r\n    const degn = BigNatModule_degree(n) | 0;\r\n    const route = (prior_mut, k_mut, ten2k_mut) => {\r\n        route:\r\n        while (true) {\r\n            const prior = prior_mut, k = k_mut, ten2k = ten2k_mut;\r\n            if (BigNatModule_degree(ten2k) > degn) {\r\n                return cons([k, ten2k], prior);\r\n            }\r\n            else {\r\n                prior_mut = cons([k, ten2k], prior);\r\n                k_mut = (k + 1);\r\n                ten2k_mut = BigNatModule_mul(ten2k, ten2k);\r\n                continue route;\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    const collect = (isLeading_mut, digits_mut, n_1_mut, _arg1_mut) => {\r\n        collect:\r\n        while (true) {\r\n            const isLeading = isLeading_mut, digits = digits_mut, n_1 = n_1_mut, _arg1 = _arg1_mut;\r\n            if (!isEmpty(_arg1)) {\r\n                const prior_1 = tail(_arg1);\r\n                const patternInput = BigNatModule_divmod(n_1, head(_arg1)[1]);\r\n                const nL = patternInput[1];\r\n                const nH = patternInput[0];\r\n                if (isLeading ? BigNatModule_isZero(nH) : false) {\r\n                    isLeading_mut = isLeading;\r\n                    digits_mut = digits;\r\n                    n_1_mut = nL;\r\n                    _arg1_mut = prior_1;\r\n                    continue collect;\r\n                }\r\n                else {\r\n                    isLeading_mut = isLeading;\r\n                    digits_mut = collect(false, digits, nL, prior_1);\r\n                    n_1_mut = nH;\r\n                    _arg1_mut = prior_1;\r\n                    continue collect;\r\n                }\r\n            }\r\n            else {\r\n                const n_2 = BigNatModule_eval32(n_1) | 0;\r\n                if (isLeading ? (n_2 === 0) : false) {\r\n                    return digits;\r\n                }\r\n                else {\r\n                    return cons(int32ToString(n_2), digits);\r\n                }\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    const digits_4 = collect(true, empty(), n, route(empty(), 0, BigNatModule_embed(10)));\r\n    if (isEmpty(digits_4)) {\r\n        return \"0\";\r\n    }\r\n    else {\r\n        return join(\"\", toArray(digits_4));\r\n    }\r\n}\r\n\r\nexport function BigNatModule_ofString(str) {\r\n    const len = str.length | 0;\r\n    if (isNullOrEmpty(str)) {\r\n        throw (new Error(\"empty string\\\\nParameter name: str\"));\r\n    }\r\n    const ten = BigNatModule_embed(10);\r\n    const build = (acc_mut, i_mut) => {\r\n        build:\r\n        while (true) {\r\n            const acc = acc_mut, i = i_mut;\r\n            if (i === len) {\r\n                return acc;\r\n            }\r\n            else {\r\n                const d = (str[i].charCodeAt(0) - \"0\".charCodeAt(0)) | 0;\r\n                if ((0 <= d) ? (d <= 9) : false) {\r\n                    acc_mut = BigNatModule_add(BigNatModule_mul(ten, acc), BigNatModule_embed(d));\r\n                    i_mut = (i + 1);\r\n                    continue build;\r\n                }\r\n                else {\r\n                    throw (new Error());\r\n                }\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    return build(BigNatModule_embed(0), 0);\r\n}\r\n\r\nexport function BigNatModule_isSmall(n) {\r\n    return n.bound <= 1;\r\n}\r\n\r\nexport function BigNatModule_getSmall(n) {\r\n    const z = n;\r\n    const i = 0;\r\n    if (i < z.bound) {\r\n        return z.digits[i] | 0;\r\n    }\r\n    else {\r\n        return 0;\r\n    }\r\n}\r\n\r\nexport function BigNatModule_factorial(n) {\r\n    const productR = (a, b) => {\r\n        if (BigNatModule_equal(a, b)) {\r\n            return a;\r\n        }\r\n        else {\r\n            const m = BigNatModule_div(BigNatModule_add(a, b), BigNatModule_ofInt32(2));\r\n            return BigNatModule_mul(productR(a, m), productR(BigNatModule_add(m, BigNatModule_one), b));\r\n        }\r\n    };\r\n    return productR(BigNatModule_one, n);\r\n}\r\n\r\n","// Adapted from https://github.com/MikeMcl/big.js/blob/0f94dc9110d55c4f324a47ba6a2e832ce23ac589/big.mjs\n/* tslint:disable */\nimport { combineHashCodes } from \"../Util.js\";\nimport { symbol } from \"../Numeric.js\";\n// The shared prototype object.\nvar P = {\n    GetHashCode() { return combineHashCodes([this.s, this.e].concat(this.c)); },\n    Equals(x) { return !this.cmp(x); },\n    CompareTo(x) { return this.cmp(x); },\n    [symbol]() {\n        const _this = this;\n        return {\n            multiply: y => _this.mul(y),\n            toPrecision: sd => _this.toPrecision(sd),\n            toExponential: dp => _this.toExponential(dp),\n            toFixed: dp => _this.toFixed(dp),\n            toHex: () => (Number(_this) >>> 0).toString(16),\n        };\n    }\n};\n/*\n *  big.js v6.0.3\n *  A small, fast, easy-to-use library for arbitrary-precision decimal arithmetic.\n *  Copyright (c) 2020 Michael Mclaughlin\n *  https://github.com/MikeMcl/big.js/LICENCE.md\n */\n/************************************** EDITABLE DEFAULTS *****************************************/\n// The default values below must be integers within the stated ranges.\n/*\n * The maximum number of decimal places (DP) of the results of operations involving division:\n * div and sqrt, and pow with negative exponents.\n */\nvar DP = 28, // 0 to MAX_DP\n/*\n * The rounding mode (RM) used when rounding to the above decimal places.\n *\n *  0  Towards zero (i.e. truncate, no rounding).       (ROUND_DOWN)\n *  1  To nearest neighbour. If equidistant, round up.  (ROUND_HALF_UP)\n *  2  To nearest neighbour. If equidistant, to even.   (ROUND_HALF_EVEN)\n *  3  Away from zero.                                  (ROUND_UP)\n */\nRM = 1, // 0, 1, 2 or 3\n// The maximum value of DP and Big.DP.\nMAX_DP = 1E6, // 0 to 1000000\n// The maximum magnitude of the exponent argument to the pow method.\nMAX_POWER = 1E6, // 1 to 1000000\n/*\n * The negative exponent (NE) at and beneath which toString returns exponential notation.\n * (JavaScript numbers: -7)\n * -1000000 is the minimum recommended exponent value of a Big.\n */\nNE = -29, // 0 to -1000000\n/*\n * The positive exponent (PE) at and above which toString returns exponential notation.\n * (JavaScript numbers: 21)\n * 1000000 is the maximum recommended exponent value of a Big, but this limit is not enforced.\n */\nPE = 29, // 0 to 1000000\n/*\n * When true, an error will be thrown if a primitive number is passed to the Big constructor,\n * or if valueOf is called, or if toNumber is called on a Big which cannot be converted to a\n * primitive number without a loss of precision.\n */\nSTRICT = false, // true or false\n/**************************************************************************************************/\n// Error messages.\nNAME = '[big.js] ', INVALID = NAME + 'Invalid ', INVALID_DP = INVALID + 'decimal places', INVALID_RM = INVALID + 'rounding mode', DIV_BY_ZERO = NAME + 'Division by zero', UNDEFINED = void 0, NUMERIC = /^-?(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i;\n/*\n * Create and return a Big constructor.\n */\nfunction _Big_() {\n    /*\n     * The Big constructor and exported function.\n     * Create and return a new instance of a Big number object.\n     *\n     * n {number|string|Big} A numeric value.\n     */\n    function Big(n) {\n        var x = this;\n        // Enable constructor usage without new.\n        if (!(x instanceof Big))\n            return n === UNDEFINED ? _Big_() : new Big(n);\n        // Duplicate.\n        if (n instanceof Big) {\n            x.s = n.s;\n            x.e = n.e;\n            x.c = n.c.slice();\n            normalize(x);\n        }\n        else {\n            if (typeof n !== 'string') {\n                if (Big.strict === true) {\n                    throw TypeError(INVALID + 'number');\n                }\n                // Minus zero?\n                n = n === 0 && 1 / n < 0 ? '-0' : String(n);\n            }\n            parse(x, n);\n        }\n        // Retain a reference to this Big constructor.\n        // Shadow Big.prototype.constructor which points to Object.\n        x.constructor = Big;\n    }\n    Big.prototype = P;\n    Big.DP = DP;\n    Big.RM = RM;\n    Big.NE = NE;\n    Big.PE = PE;\n    Big.strict = STRICT;\n    return Big;\n}\nfunction normalize(x) {\n    // x = round(x, DP, 0);\n    if (x.c.length > 1 && !x.c[0]) {\n        let i = x.c.findIndex(x => x);\n        x.c = x.c.slice(i);\n        x.e = x.e - i;\n    }\n}\n/*\n * Parse the number or string value passed to a Big constructor.\n *\n * x {Big} A Big number instance.\n * n {number|string} A numeric value.\n */\nfunction parse(x, n) {\n    var e, i, nl;\n    if (!NUMERIC.test(n)) {\n        throw Error(INVALID + 'number');\n    }\n    // Determine sign.\n    x.s = n.charAt(0) == '-' ? (n = n.slice(1), -1) : 1;\n    // Decimal point?\n    if ((e = n.indexOf('.')) > -1)\n        n = n.replace('.', '');\n    // Exponential form?\n    if ((i = n.search(/e/i)) > 0) {\n        // Determine exponent.\n        if (e < 0)\n            e = i;\n        e += +n.slice(i + 1);\n        n = n.substring(0, i);\n    }\n    else if (e < 0) {\n        // Integer.\n        e = n.length;\n    }\n    nl = n.length;\n    // Determine leading zeros before decimal point.\n    for (i = 0; i < e && i < nl && n.charAt(i) == '0';)\n        ++i;\n    // original version (ignores decimal point).\n    // // Determine leading zeros.\n    // for (i = 0; i < nl && n.charAt(i) == '0';) ++i;\n    if (i == nl) {\n        // Zero.\n        x.c = [x.e = 0];\n    }\n    else {\n        x.e = e - i - 1;\n        x.c = [];\n        // Convert string to array of digits without leading zeros\n        for (e = 0; i < nl;)\n            x.c[e++] = +n.charAt(i++);\n        // older version (doesn't keep trailing zeroes).\n        // // Determine trailing zeros.\n        // for (; nl > 0 && n.charAt(--nl) == '0';);\n        // // Convert string to array of digits without leading/trailing zeros.\n        // for (e = 0; i <= nl;) x.c[e++] = +n.charAt(i++);\n    }\n    x = round(x, Big.DP + 1, Big.RM);\n    return x;\n}\n/*\n * Round Big x to a maximum of sd significant digits using rounding mode rm.\n *\n * x {Big} The Big to round.\n * sd {number} Significant digits: integer, 0 to MAX_DP inclusive.\n * rm {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).\n * [more] {boolean} Whether the result of division was truncated.\n */\nfunction round(x, sd, rm, more) {\n    var xc = x.c;\n    if (rm === UNDEFINED)\n        rm = Big.RM;\n    if (rm !== 0 && rm !== 1 && rm !== 2 && rm !== 3) {\n        throw Error(INVALID_RM);\n    }\n    if (sd < 1) {\n        more =\n            rm === 3 && (more || !!xc[0]) || sd === 0 && (rm === 1 && xc[0] >= 5 ||\n                rm === 2 && (xc[0] > 5 || xc[0] === 5 && (more || xc[1] !== UNDEFINED)));\n        xc.length = 1;\n        if (more) {\n            // 1, 0.1, 0.01, 0.001, 0.0001 etc.\n            x.e = x.e - sd + 1;\n            xc[0] = 1;\n        }\n        else {\n            // Zero.\n            xc[0] = x.e = 0;\n        }\n    }\n    else if (sd < xc.length) {\n        // xc[sd] is the digit after the digit that may be rounded up.\n        const isZero = xc.findIndex((xci, idx) => idx >= sd && xci > 0) < 0;\n        more =\n            rm === 1 && xc[sd] >= 5 ||\n                rm === 2 && (xc[sd] > 5 || xc[sd] === 5 &&\n                    (more || xc[sd + 1] !== UNDEFINED || xc[sd - 1] & 1)) ||\n                rm === 3 && (more || !isZero);\n        // Remove any digits after the required precision.\n        xc.length = sd--;\n        // Round up?\n        if (more) {\n            // Rounding up may mean the previous digit has to be rounded up.\n            for (; ++xc[sd] > 9;) {\n                xc[sd] = 0;\n                if (!sd--) {\n                    ++x.e;\n                    xc.unshift(1);\n                }\n            }\n        }\n        // Remove trailing zeros.\n        for (sd = xc.length; !xc[--sd];)\n            xc.pop();\n    }\n    return x;\n}\n/*\n * Return a string representing the value of Big x in normal or exponential notation.\n * Handles P.toExponential, P.toFixed, P.toJSON, P.toPrecision, P.toString and P.valueOf.\n */\nfunction stringify(x, doExponential, isNonzero) {\n    var e = x.e, s = x.c.join(''), n = s.length;\n    // Exponential notation?\n    if (doExponential) {\n        s = s.charAt(0) + (n > 1 ? '.' + s.slice(1) : '') + (e < 0 ? 'e' : 'e+') + e;\n        // Normal notation.\n    }\n    else if (e < 0) {\n        for (; ++e;)\n            s = '0' + s;\n        s = '0.' + s;\n    }\n    else if (e > 0) {\n        if (++e > n) {\n            for (e -= n; e--;)\n                s += '0';\n        }\n        else if (e < n) {\n            s = s.slice(0, e) + '.' + s.slice(e);\n        }\n    }\n    else if (n > 1) {\n        s = s.charAt(0) + '.' + s.slice(1);\n    }\n    return x.s < 0 && isNonzero ? '-' + s : s;\n}\n// Prototype/instance methods\n/*\n * Return a new Big whose value is the absolute value of this Big.\n */\nP.abs = function () {\n    var x = new this.constructor(this);\n    x.s = 1;\n    return x;\n};\n/*\n * Return 1 if the value of this Big is greater than the value of Big y,\n *       -1 if the value of this Big is less than the value of Big y, or\n *        0 if they have the same value.\n */\nP.cmp = function (y) {\n    var isneg, Big = this.constructor, x = new Big(this), y = new Big(y), xc = x.c, yc = y.c, i = x.s, j = y.s, k = x.e, l = y.e;\n    // Either zero?\n    if (!xc[0] || !yc[0])\n        return !xc[0] ? !yc[0] ? 0 : -j : i;\n    // Signs differ?\n    if (i != j)\n        return i;\n    isneg = i < 0;\n    // Compare exponents.\n    if (k != l)\n        return k > l ^ isneg ? 1 : -1;\n    // Compare digit by digit.\n    j = Math.max(xc.length, yc.length);\n    for (i = 0; i < j; i++) {\n        k = i < xc.length ? xc[i] : 0;\n        l = i < yc.length ? yc[i] : 0;\n        if (k != l)\n            return k > l ^ isneg ? 1 : -1;\n    }\n    return 0;\n    // original version (doesn't compare well trailing zeroes, e.g. 1.0 with 1.00)\n    // j = (k = xc.length) < (l = yc.length) ? k : l;\n    // // Compare digit by digit.\n    // for (i = -1; ++i < j;) {\n    //   if (xc[i] != yc[i]) return xc[i] > yc[i] ^ isneg ? 1 : -1;\n    // }\n    // // Compare lengths.\n    // return k == l ? 0 : k > l ^ isneg ? 1 : -1;\n};\n/*\n * Return a new Big whose value is the value of this Big divided by the value of Big y, rounded,\n * if necessary, to a maximum of Big.DP decimal places using rounding mode Big.RM.\n */\nP.div = function (y) {\n    var Big = this.constructor, x = new Big(this), y = new Big(y), a = x.c, // dividend\n    b = y.c, // divisor\n    k = x.s == y.s ? 1 : -1, dp = Big.DP;\n    if (dp !== ~~dp || dp < 0 || dp > MAX_DP) {\n        throw Error(INVALID_DP);\n    }\n    // Divisor is zero?\n    if (!b[0]) {\n        throw Error(DIV_BY_ZERO);\n    }\n    // Dividend is 0? Return +-0.\n    if (!a[0]) {\n        y.s = k;\n        y.c = [y.e = 0];\n        return y;\n    }\n    var bl, bt, n, cmp, ri, bz = b.slice(), ai = bl = b.length, al = a.length, r = a.slice(0, bl), // remainder\n    rl = r.length, q = y, // quotient\n    qc = q.c = [], qi = 0, p = dp + (q.e = x.e - y.e) + 1; // precision of the result\n    q.s = k;\n    k = p < 0 ? 0 : p;\n    // Create version of divisor with leading zero.\n    bz.unshift(0);\n    // Add zeros to make remainder as long as divisor.\n    for (; rl++ < bl;)\n        r.push(0);\n    do {\n        // n is how many times the divisor goes into current remainder.\n        for (n = 0; n < 10; n++) {\n            // Compare divisor and remainder.\n            if (bl != (rl = r.length)) {\n                cmp = bl > rl ? 1 : -1;\n            }\n            else {\n                for (ri = -1, cmp = 0; ++ri < bl;) {\n                    if (b[ri] != r[ri]) {\n                        cmp = b[ri] > r[ri] ? 1 : -1;\n                        break;\n                    }\n                }\n            }\n            // If divisor < remainder, subtract divisor from remainder.\n            if (cmp < 0) {\n                // Remainder can't be more than 1 digit longer than divisor.\n                // Equalise lengths using divisor with extra leading zero?\n                for (bt = rl == bl ? b : bz; rl;) {\n                    if (r[--rl] < bt[rl]) {\n                        ri = rl;\n                        for (; ri && !r[--ri];)\n                            r[ri] = 9;\n                        --r[ri];\n                        r[rl] += 10;\n                    }\n                    r[rl] -= bt[rl];\n                }\n                for (; !r[0];)\n                    r.shift();\n            }\n            else {\n                break;\n            }\n        }\n        // Add the digit n to the result array.\n        qc[qi++] = cmp ? n : ++n;\n        // Update the remainder.\n        if (r[0] && cmp)\n            r[rl] = a[ai] || 0;\n        else\n            r = [a[ai]];\n    } while ((ai++ < al || r[0] !== UNDEFINED) && k--);\n    // Leading zero? Do not remove if result is simply zero (qi == 1).\n    if (!qc[0] && qi != 1) {\n        // There can't be more than one zero.\n        qc.shift();\n        q.e--;\n        p--;\n    }\n    // Round?\n    if (qi > p)\n        round(q, p, Big.RM, r[0] !== UNDEFINED);\n    return q;\n};\n/*\n * Return true if the value of this Big is equal to the value of Big y, otherwise return false.\n */\nP.eq = function (y) {\n    return this.cmp(y) === 0;\n};\n/*\n * Return true if the value of this Big is greater than the value of Big y, otherwise return\n * false.\n */\nP.gt = function (y) {\n    return this.cmp(y) > 0;\n};\n/*\n * Return true if the value of this Big is greater than or equal to the value of Big y, otherwise\n * return false.\n */\nP.gte = function (y) {\n    return this.cmp(y) > -1;\n};\n/*\n * Return true if the value of this Big is less than the value of Big y, otherwise return false.\n */\nP.lt = function (y) {\n    return this.cmp(y) < 0;\n};\n/*\n * Return true if the value of this Big is less than or equal to the value of Big y, otherwise\n * return false.\n */\nP.lte = function (y) {\n    return this.cmp(y) < 1;\n};\n/*\n * Return a new Big whose value is the value of this Big minus the value of Big y.\n */\nP.minus = P.sub = function (y) {\n    var i, j, t, xlty, Big = this.constructor, x = new Big(this), y = new Big(y), a = x.s, b = y.s;\n    // Signs differ?\n    if (a != b) {\n        y.s = -b;\n        return x.plus(y);\n    }\n    var xc = x.c.slice(), xe = x.e, yc = y.c, ye = y.e;\n    // Either zero?\n    if (!xc[0] || !yc[0]) {\n        if (yc[0]) {\n            y.s = -b;\n        }\n        else if (xc[0]) {\n            y = new Big(x);\n        }\n        else {\n            y.s = 1;\n        }\n        return y;\n    }\n    // Determine which is the bigger number. Prepend zeros to equalise exponents.\n    if (a = xe - ye) {\n        if (xlty = a < 0) {\n            a = -a;\n            t = xc;\n        }\n        else {\n            ye = xe;\n            t = yc;\n        }\n        t.reverse();\n        for (b = a; b--;)\n            t.push(0);\n        t.reverse();\n    }\n    else {\n        // Exponents equal. Check digit by digit.\n        j = ((xlty = xc.length < yc.length) ? xc : yc).length;\n        for (a = b = 0; b < j; b++) {\n            if (xc[b] != yc[b]) {\n                xlty = xc[b] < yc[b];\n                break;\n            }\n        }\n    }\n    // x < y? Point xc to the array of the bigger number.\n    if (xlty) {\n        t = xc;\n        xc = yc;\n        yc = t;\n        y.s = -y.s;\n    }\n    /*\n     * Append zeros to xc if shorter. No need to add zeros to yc if shorter as subtraction only\n     * needs to start at yc.length.\n     */\n    if ((b = (j = yc.length) - (i = xc.length)) > 0)\n        for (; b--;)\n            xc[i++] = 0;\n    // Subtract yc from xc.\n    for (b = i; j > a;) {\n        if (xc[--j] < yc[j]) {\n            for (i = j; i && !xc[--i];)\n                xc[i] = 9;\n            --xc[i];\n            xc[j] += 10;\n        }\n        xc[j] -= yc[j];\n    }\n    // Remove trailing zeros.\n    for (; xc[--b] === 0;)\n        xc.pop();\n    // Remove leading zeros and adjust exponent accordingly.\n    for (; xc[0] === 0;) {\n        xc.shift();\n        --ye;\n    }\n    if (!xc[0]) {\n        // n - n = +0\n        y.s = 1;\n        // Result must be zero.\n        xc = [ye = 0];\n    }\n    y.c = xc;\n    y.e = ye;\n    return y;\n};\n/*\n * Return a new Big whose value is the value of this Big modulo the value of Big y.\n */\nP.mod = function (y) {\n    var ygtx, Big = this.constructor, x = new Big(this), y = new Big(y), a = x.s, b = y.s;\n    if (!y.c[0]) {\n        throw Error(DIV_BY_ZERO);\n    }\n    x.s = y.s = 1;\n    ygtx = y.cmp(x) == 1;\n    x.s = a;\n    y.s = b;\n    if (ygtx)\n        return new Big(x);\n    a = Big.DP;\n    b = Big.RM;\n    Big.DP = Big.RM = 0;\n    x = x.div(y);\n    Big.DP = a;\n    Big.RM = b;\n    return this.minus(x.times(y));\n};\n/*\n * Return a new Big whose value is the value of this Big plus the value of Big y.\n */\nP.plus = P.add = function (y) {\n    var e, k, t, Big = this.constructor, x = new Big(this), y = new Big(y);\n    // Signs differ?\n    if (x.s != y.s) {\n        y.s = -y.s;\n        return x.minus(y);\n    }\n    var xe = x.e, xc = x.c, ye = y.e, yc = y.c;\n    // Either zero?\n    if (!xc[0] || !yc[0]) {\n        if (!yc[0]) {\n            if (xc[0]) {\n                y = new Big(x);\n            }\n            else {\n                y.s = x.s;\n            }\n        }\n        return y;\n    }\n    xc = xc.slice();\n    // Prepend zeros to equalise exponents.\n    // Note: reverse faster than unshifts.\n    if (e = xe - ye) {\n        if (e > 0) {\n            ye = xe;\n            t = yc;\n        }\n        else {\n            e = -e;\n            t = xc;\n        }\n        t.reverse();\n        for (; e--;)\n            t.push(0);\n        t.reverse();\n    }\n    // Point xc to the longer array.\n    if (xc.length - yc.length < 0) {\n        t = yc;\n        yc = xc;\n        xc = t;\n    }\n    e = yc.length;\n    // Only start adding at yc.length - 1 as the further digits of xc can be left as they are.\n    for (k = 0; e; xc[e] %= 10)\n        k = (xc[--e] = xc[e] + yc[e] + k) / 10 | 0;\n    // No need to check for zero, as +x + +y != 0 && -x + -y != 0\n    if (k) {\n        xc.unshift(k);\n        ++ye;\n    }\n    // Remove trailing zeros.\n    for (e = xc.length; xc[--e] === 0;)\n        xc.pop();\n    y.c = xc;\n    y.e = ye;\n    return y;\n};\n/*\n * Return a Big whose value is the value of this Big raised to the power n.\n * If n is negative, round to a maximum of Big.DP decimal places using rounding\n * mode Big.RM.\n *\n * n {number} Integer, -MAX_POWER to MAX_POWER inclusive.\n */\nP.pow = function (n) {\n    var Big = this.constructor, x = new Big(this), y = new Big('1'), one = new Big('1'), isneg = n < 0;\n    if (n !== ~~n || n < -MAX_POWER || n > MAX_POWER) {\n        throw Error(INVALID + 'exponent');\n    }\n    if (isneg)\n        n = -n;\n    for (;;) {\n        if (n & 1)\n            y = y.times(x);\n        n >>= 1;\n        if (!n)\n            break;\n        x = x.times(x);\n    }\n    return isneg ? one.div(y) : y;\n};\n/*\n * Return a new Big whose value is the value of this Big rounded to a maximum precision of sd\n * significant digits using rounding mode rm, or Big.RM if rm is not specified.\n *\n * sd {number} Significant digits: integer, 1 to MAX_DP inclusive.\n * rm? {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).\n */\nP.prec = function (sd, rm) {\n    if (sd !== ~~sd || sd < 1 || sd > MAX_DP) {\n        throw Error(INVALID + 'precision');\n    }\n    return round(new this.constructor(this), sd, rm);\n};\n/*\n * Return a new Big whose value is the value of this Big rounded to a maximum of dp decimal places\n * using rounding mode rm, or Big.RM if rm is not specified.\n * If dp is negative, round to an integer which is a multiple of 10**-dp.\n * If dp is not specified, round to 0 decimal places.\n *\n * dp? {number} Integer, -MAX_DP to MAX_DP inclusive.\n * rm? {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).\n */\nP.round = function (dp, rm) {\n    if (dp === UNDEFINED)\n        dp = 0;\n    else if (dp !== ~~dp || dp < -MAX_DP || dp > MAX_DP) {\n        throw Error(INVALID_DP);\n    }\n    return round(new this.constructor(this), dp + this.e + 1, rm);\n};\n/*\n * Return a new Big whose value is the square root of the value of this Big, rounded, if\n * necessary, to a maximum of Big.DP decimal places using rounding mode Big.RM.\n */\nP.sqrt = function () {\n    var r, c, t, Big = this.constructor, x = new Big(this), s = x.s, e = x.e, half = new Big('0.5');\n    // Zero?\n    if (!x.c[0])\n        return new Big(x);\n    // Negative?\n    if (s < 0) {\n        throw Error(NAME + 'No square root');\n    }\n    // Estimate.\n    s = Math.sqrt(x + '');\n    // Math.sqrt underflow/overflow?\n    // Re-estimate: pass x coefficient to Math.sqrt as integer, then adjust the result exponent.\n    if (s === 0 || s === 1 / 0) {\n        c = x.c.join('');\n        if (!(c.length + e & 1))\n            c += '0';\n        s = Math.sqrt(c);\n        e = ((e + 1) / 2 | 0) - (e < 0 || e & 1);\n        r = new Big((s == 1 / 0 ? '5e' : (s = s.toExponential()).slice(0, s.indexOf('e') + 1)) + e);\n    }\n    else {\n        r = new Big(s + '');\n    }\n    e = r.e + (Big.DP += 4);\n    // Newton-Raphson iteration.\n    do {\n        t = r;\n        r = half.times(t.plus(x.div(t)));\n    } while (t.c.slice(0, e).join('') !== r.c.slice(0, e).join(''));\n    return round(r, (Big.DP -= 4) + r.e + 1, Big.RM);\n};\n/*\n * Return a new Big whose value is the value of this Big times the value of Big y.\n */\nP.times = P.mul = function (y) {\n    var c, Big = this.constructor, x = new Big(this), y = new Big(y), xc = x.c, yc = y.c, a = xc.length, b = yc.length, i = x.e, j = y.e;\n    // Determine sign of result.\n    y.s = x.s == y.s ? 1 : -1;\n    // Return signed 0 if either 0.\n    if (!xc[0] || !yc[0]) {\n        y.c = [y.e = 0];\n        return y;\n    }\n    // Initialise exponent of result as x.e + y.e.\n    y.e = i + j;\n    // If array xc has fewer digits than yc, swap xc and yc, and lengths.\n    if (a < b) {\n        c = xc;\n        xc = yc;\n        yc = c;\n        j = a;\n        a = b;\n        b = j;\n    }\n    // Initialise coefficient array of result with zeros.\n    for (c = new Array(j = a + b); j--;)\n        c[j] = 0;\n    // Multiply.\n    // i is initially xc.length.\n    for (i = b; i--;) {\n        b = 0;\n        // a is yc.length.\n        for (j = a + i; j > i;) {\n            // Current sum of products at this digit position, plus carry.\n            b = c[j] + yc[i] * xc[j - i - 1] + b;\n            c[j--] = b % 10;\n            // carry\n            b = b / 10 | 0;\n        }\n        c[j] = b;\n    }\n    // Increment result exponent if there is a final carry, otherwise remove leading zero.\n    if (b)\n        ++y.e;\n    else\n        c.shift();\n    // Remove trailing zeros.\n    for (i = c.length; !c[--i];)\n        c.pop();\n    y.c = c;\n    return y;\n};\n/*\n * Return a string representing the value of this Big in exponential notation rounded to dp fixed\n * decimal places using rounding mode rm, or Big.RM if rm is not specified.\n *\n * dp? {number} Decimal places: integer, 0 to MAX_DP inclusive.\n * rm? {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).\n */\nP.toExponential = function (dp, rm) {\n    var x = this, n = x.c[0];\n    if (dp !== UNDEFINED) {\n        if (dp !== ~~dp || dp < 0 || dp > MAX_DP) {\n            throw Error(INVALID_DP);\n        }\n        x = round(new x.constructor(x), ++dp, rm);\n        for (; x.c.length < dp;)\n            x.c.push(0);\n    }\n    return stringify(x, true, !!n);\n};\n/*\n * Return a string representing the value of this Big in normal notation rounded to dp fixed\n * decimal places using rounding mode rm, or Big.RM if rm is not specified.\n *\n * dp? {number} Decimal places: integer, 0 to MAX_DP inclusive.\n * rm? {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).\n *\n * (-0).toFixed(0) is '0', but (-0.1).toFixed(0) is '-0'.\n * (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.\n */\nP.toFixed = function (dp, rm) {\n    var x = this, n = x.c[0];\n    if (dp !== UNDEFINED) {\n        if (dp !== ~~dp || dp < 0 || dp > MAX_DP) {\n            throw Error(INVALID_DP);\n        }\n        x = round(new x.constructor(x), dp + x.e + 1, rm);\n        // x.e may have changed if the value is rounded up.\n        for (dp = dp + x.e + 1; x.c.length < dp;)\n            x.c.push(0);\n    }\n    return stringify(x, false, !!n);\n};\n/*\n * Return a string representing the value of this Big.\n * Return exponential notation if this Big has a positive exponent equal to or greater than\n * Big.PE, or a negative exponent equal to or less than Big.NE.\n * Omit the sign for negative zero.\n */\nP.toJSON = P.toString = function () {\n    var x = this, Big = x.constructor;\n    return stringify(x, x.e <= Big.NE || x.e >= Big.PE, !!x.c[0]);\n};\n/*\n * Return the value of this Big as a primitve number.\n */\nP.toNumber = function () {\n    var n = Number(stringify(this, true, true));\n    if (this.constructor.strict === true && !this.eq(n.toString())) {\n        throw Error(NAME + 'Imprecise conversion');\n    }\n    return n;\n};\n/*\n * Return a string representing the value of this Big rounded to sd significant digits using\n * rounding mode rm, or Big.RM if rm is not specified.\n * Use exponential notation if sd is less than the number of digits necessary to represent\n * the integer part of the value in normal notation.\n *\n * sd {number} Significant digits: integer, 1 to MAX_DP inclusive.\n * rm? {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).\n */\nP.toPrecision = function (sd, rm) {\n    var x = this, Big = x.constructor, n = x.c[0];\n    if (sd !== UNDEFINED) {\n        if (sd !== ~~sd || sd < 1 || sd > MAX_DP) {\n            throw Error(INVALID + 'precision');\n        }\n        x = round(new Big(x), sd, rm);\n        for (; x.c.length < sd;)\n            x.c.push(0);\n    }\n    return stringify(x, sd <= x.e || x.e <= Big.NE || x.e >= Big.PE, !!n);\n};\n/*\n * Return a string representing the value of this Big.\n * Return exponential notation if this Big has a positive exponent equal to or greater than\n * Big.PE, or a negative exponent equal to or less than Big.NE.\n * Include the sign for negative zero.\n */\nP.valueOf = function () {\n    var x = this, Big = x.constructor;\n    if (Big.strict === true) {\n        throw Error(NAME + 'valueOf disallowed');\n    }\n    return stringify(x, x.e <= Big.NE || x.e >= Big.PE, true);\n};\n// Export\nexport var Big = _Big_();\n/// <reference types=\"https://raw.githubusercontent.com/DefinitelyTyped/DefinitelyTyped/master/types/big.js/index.d.ts\" />\nexport default Big;\n","import Decimal from \"./lib/big.js\";\nimport { FSharpRef } from \"./Types.js\";\nexport default Decimal;\nexport const get_Zero = new Decimal(0);\nexport const get_One = new Decimal(1);\nexport const get_MinusOne = new Decimal(-1);\nexport const get_MaxValue = new Decimal(\"79228162514264337593543950335\");\nexport const get_MinValue = new Decimal(\"-79228162514264337593543950335\");\nexport function compare(x, y) {\n    return x.cmp(y);\n}\nexport function equals(x, y) {\n    return !x.cmp(y);\n}\nexport function abs(x) {\n    return x.abs();\n}\nexport function round(x, digits = 0) {\n    return x.round(digits, 2 /* ROUND_HALF_EVEN */);\n}\nexport function truncate(x) {\n    return x.round(0, 0 /* ROUND_DOWN */);\n}\nexport function ceiling(x) {\n    return x.round(0, x.cmp(0) >= 0 ? 3 /* ROUND_UP */ : 0 /* ROUND_DOWN */);\n}\nexport function floor(x) {\n    return x.round(0, x.cmp(0) >= 0 ? 0 /* ROUND_DOWN */ : 3 /* ROUND_UP */);\n}\nexport function pow(x, n) {\n    return x.pow(n);\n}\nexport function sqrt(x) {\n    return x.sqrt();\n}\nexport function op_Addition(x, y) {\n    return x.add(y);\n}\nexport function op_Subtraction(x, y) {\n    return x.sub(y);\n}\nexport function op_Multiply(x, y) {\n    return x.mul(y);\n}\nexport function op_Division(x, y) {\n    return x.div(y);\n}\nexport function op_Modulus(x, y) {\n    return x.mod(y);\n}\nexport function op_UnaryNegation(x) {\n    const x2 = new Decimal(x);\n    x2.s = -x2.s || 0;\n    return x2;\n}\nexport const add = op_Addition;\nexport const subtract = op_Subtraction;\nexport const multiply = op_Multiply;\nexport const divide = op_Division;\nexport const remainder = op_Modulus;\nexport const negate = op_UnaryNegation;\nexport function toString(x) {\n    return x.toString();\n}\nexport function tryParse(str, defValue) {\n    try {\n        defValue.contents = new Decimal(str.trim());\n        return true;\n    }\n    catch (_a) {\n        return false;\n    }\n}\nexport function parse(str) {\n    const defValue = new FSharpRef(get_Zero);\n    if (tryParse(str, defValue)) {\n        return defValue.contents;\n    }\n    else {\n        throw new Error(\"Input string was not in a correct format.\");\n    }\n}\nexport function toNumber(x) {\n    return +x;\n}\nfunction decimalToHex(dec, bitSize) {\n    const hex = new Uint8Array(bitSize / 4 | 0);\n    let hexCount = 1;\n    for (let d = 0; d < dec.length; d++) {\n        let value = dec[d];\n        for (let i = 0; i < hexCount; i++) {\n            const digit = hex[i] * 10 + value | 0;\n            hex[i] = digit & 0xF;\n            value = digit >> 4;\n        }\n        if (value !== 0) {\n            hex[hexCount++] = value;\n        }\n    }\n    return hex.slice(0, hexCount); // digits in reverse order\n}\nfunction hexToDecimal(hex, bitSize) {\n    const dec = new Uint8Array(bitSize * 301 / 1000 + 1 | 0);\n    let decCount = 1;\n    for (let d = hex.length - 1; d >= 0; d--) {\n        let carry = hex[d];\n        for (let i = 0; i < decCount; i++) {\n            const val = dec[i] * 16 + carry | 0;\n            dec[i] = (val % 10) | 0;\n            carry = (val / 10) | 0;\n        }\n        while (carry > 0) {\n            dec[decCount++] = (carry % 10) | 0;\n            carry = (carry / 10) | 0;\n        }\n    }\n    return dec.slice(0, decCount); // digits in reverse order\n}\nfunction setInt32Bits(hexDigits, bits, offset) {\n    for (let i = 0; i < 8; i++) {\n        hexDigits[offset + i] = (bits >> (i * 4)) & 0xF;\n    }\n}\nfunction getInt32Bits(hexDigits, offset) {\n    let bits = 0;\n    for (let i = 0; i < 8; i++) {\n        bits = bits | (hexDigits[offset + i] << (i * 4));\n    }\n    return bits;\n}\nexport function fromIntArray(bits) {\n    return fromInts(bits[0], bits[1], bits[2], bits[3]);\n}\nexport function fromInts(low, mid, high, signExp) {\n    const isNegative = signExp < 0;\n    const scale = (signExp >> 16) & 0x7F;\n    return fromParts(low, mid, high, isNegative, scale);\n}\nexport function fromParts(low, mid, high, isNegative, scale) {\n    const bitSize = 96;\n    const hexDigits = new Uint8Array(bitSize / 4);\n    setInt32Bits(hexDigits, low, 0);\n    setInt32Bits(hexDigits, mid, 8);\n    setInt32Bits(hexDigits, high, 16);\n    const decDigits = hexToDecimal(hexDigits, bitSize);\n    scale = scale & 0x7F;\n    const big = new Decimal(0);\n    big.c = Array.from(decDigits.reverse());\n    big.e = decDigits.length - scale - 1;\n    big.s = isNegative ? -1 : 1;\n    const d = new Decimal(big);\n    return d;\n}\nexport function getBits(d) {\n    const bitSize = 96;\n    const decDigits = Uint8Array.from(d.c);\n    const hexDigits = decimalToHex(decDigits, bitSize);\n    const low = getInt32Bits(hexDigits, 0);\n    const mid = getInt32Bits(hexDigits, 8);\n    const high = getInt32Bits(hexDigits, 16);\n    const decStr = d.toString();\n    const dotPos = decStr.indexOf(\".\");\n    const scale = dotPos < 0 ? 0 : decStr.length - dotPos - 1;\n    const signExp = ((scale & 0x7F) << 16) | (d.s < 0 ? 0x80000000 : 0);\n    return [low, mid, high, signExp];\n}\n// export function makeRangeStepFunction(step: Decimal, last: Decimal) {\n//   const stepComparedWithZero = step.cmp(get_Zero);\n//   if (stepComparedWithZero === 0) {\n//     throw new Error(\"The step of a range cannot be zero\");\n//   }\n//   const stepGreaterThanZero = stepComparedWithZero > 0;\n//   return (x: Decimal) => {\n//     const comparedWithLast = x.cmp(last);\n//     if ((stepGreaterThanZero && comparedWithLast <= 0)\n//       || (!stepGreaterThanZero && comparedWithLast >= 0)) {\n//       return [x, op_Addition(x, step)];\n//     } else {\n//       return undefined;\n//     }\n//   };\n// }\n","import { BigNatModule_factorial, BigNatModule_ofString, BigNatModule_toFloat, BigNatModule_toUInt64, BigNatModule_toUInt32, BigNatModule_pow, BigNatModule_two, BigNatModule_rem, BigNatModule_lte, BigNatModule_hcf, BigNatModule_bitXor, BigNatModule_bitOr, BigNatModule_bitAnd, BigNatModule_divmod, BigNatModule_mul, BigNatModule_isOne, BigNatModule_sub, BigNatModule_gte, BigNatModule_scale, BigNatModule_one, BigNatModule_add, BigNatModule_ofInt64, BigNatModule_hash, BigNatModule_gt, BigNatModule_lt, BigNatModule_equal, BigNatModule_getSmall, BigNatModule_isSmall, BigNatModule_ofInt32, BigNatModule_toString, BigNatModule_isZero } from \"./n.js\";\r\nimport { Record, toString } from \"../Types.js\";\r\nimport { class_type } from \"../Reflection.js\";\r\nimport { initialize } from \"../Array.js\";\r\nimport { op_Addition, op_Multiply, fromValue, equals, fromBits, compare, fromInteger, op_UnaryNegation } from \"../Long.js\";\r\nimport { op_UnaryNegation_Int32 } from \"../Int32.js\";\r\nimport Decimal from \"../Decimal.js\";\r\n\r\nexport class BigInteger extends Record {\r\n    constructor(signInt, v) {\r\n        super();\r\n        this.signInt = (signInt | 0);\r\n        this.v = v;\r\n    }\r\n    toString() {\r\n        const x = this;\r\n        const matchValue = BigInteger__get_SignInt(x) | 0;\r\n        switch (matchValue) {\r\n            case -1: {\r\n                return BigNatModule_isZero(BigInteger__get_V(x)) ? \"0\" : (\"-\" + BigNatModule_toString(BigInteger__get_V(x)));\r\n            }\r\n            case 0: {\r\n                return \"0\";\r\n            }\r\n            case 1: {\r\n                return BigNatModule_toString(BigInteger__get_V(x));\r\n            }\r\n            default: {\r\n                throw (new Error(\"signs should be +/- 1 or 0\"));\r\n            }\r\n        }\r\n    }\r\n    Equals(obj) {\r\n        const this$ = this;\r\n        return (obj instanceof BigInteger) ? BigInteger_op_Equality_56F059C0(this$, obj) : false;\r\n    }\r\n    GetHashCode() {\r\n        const x = this;\r\n        return BigInteger_hash_Z665282C2(x) | 0;\r\n    }\r\n    toJSON(_key) {\r\n        const this$ = this;\r\n        return toString(this$);\r\n    }\r\n    CompareTo(obj) {\r\n        const this$ = this;\r\n        if (obj instanceof BigInteger) {\r\n            return BigInteger_compare_56F059C0(this$, obj) | 0;\r\n        }\r\n        else {\r\n            throw (new Error(\"the objects are not comparable\\\\nParameter name: obj\"));\r\n        }\r\n    }\r\n}\r\n\r\nexport function BigInteger$reflection() {\r\n    return class_type(\"BigInt.BigInteger\", void 0, BigInteger, class_type(\"System.ValueType\"));\r\n}\r\n\r\nexport function BigInteger_$ctor_Z2BE94A1(signInt, v) {\r\n    return new BigInteger(signInt, v);\r\n}\r\n\r\n(() => {\r\n    BigInteger.smallLim = 4096;\r\n    BigInteger.smallPosTab = initialize(BigInteger.smallLim, (n) => BigNatModule_ofInt32(n));\r\n    BigInteger.one = BigInteger_$ctor_Z524259A4(1);\r\n    BigInteger.two = BigInteger_$ctor_Z524259A4(2);\r\n    BigInteger.zero = BigInteger_$ctor_Z524259A4(0);\r\n})();\r\n\r\nexport function BigInteger_nat_Z67CCE57D(n) {\r\n    if (BigNatModule_isSmall(n) ? (BigNatModule_getSmall(n) < BigInteger.smallLim) : false) {\r\n        return BigInteger.smallPosTab[BigNatModule_getSmall(n)];\r\n    }\r\n    else {\r\n        return n;\r\n    }\r\n}\r\n\r\nexport function BigInteger_create_Z2BE94A1(s, n) {\r\n    return BigInteger_$ctor_Z2BE94A1(s, BigInteger_nat_Z67CCE57D(n));\r\n}\r\n\r\nexport function BigInteger_posn_Z67CCE57D(n) {\r\n    return BigInteger_$ctor_Z2BE94A1(1, BigInteger_nat_Z67CCE57D(n));\r\n}\r\n\r\nexport function BigInteger_negn_Z67CCE57D(n) {\r\n    return BigInteger_$ctor_Z2BE94A1(-1, BigInteger_nat_Z67CCE57D(n));\r\n}\r\n\r\nexport function BigInteger__get_Sign(x) {\r\n    if (BigInteger__get_IsZero(x)) {\r\n        return 0;\r\n    }\r\n    else {\r\n        return x.signInt | 0;\r\n    }\r\n}\r\n\r\nexport function BigInteger__get_SignInt(x) {\r\n    return x.signInt;\r\n}\r\n\r\nexport function BigInteger__get_V(x) {\r\n    return x.v;\r\n}\r\n\r\nexport function BigInteger_op_Equality_56F059C0(x, y) {\r\n    const matchValue = [BigInteger__get_SignInt(x), BigInteger__get_SignInt(y)];\r\n    let pattern_matching_result;\r\n    if (matchValue[0] === -1) {\r\n        if (matchValue[1] === -1) {\r\n            pattern_matching_result = 1;\r\n        }\r\n        else if (matchValue[1] === 0) {\r\n            pattern_matching_result = 8;\r\n        }\r\n        else if (matchValue[1] === 1) {\r\n            pattern_matching_result = 3;\r\n        }\r\n        else {\r\n            pattern_matching_result = 9;\r\n        }\r\n    }\r\n    else if (matchValue[0] === 0) {\r\n        if (matchValue[1] === -1) {\r\n            pattern_matching_result = 6;\r\n        }\r\n        else if (matchValue[1] === 0) {\r\n            pattern_matching_result = 4;\r\n        }\r\n        else if (matchValue[1] === 1) {\r\n            pattern_matching_result = 5;\r\n        }\r\n        else {\r\n            pattern_matching_result = 9;\r\n        }\r\n    }\r\n    else if (matchValue[0] === 1) {\r\n        if (matchValue[1] === -1) {\r\n            pattern_matching_result = 2;\r\n        }\r\n        else if (matchValue[1] === 0) {\r\n            pattern_matching_result = 7;\r\n        }\r\n        else if (matchValue[1] === 1) {\r\n            pattern_matching_result = 0;\r\n        }\r\n        else {\r\n            pattern_matching_result = 9;\r\n        }\r\n    }\r\n    else {\r\n        pattern_matching_result = 9;\r\n    }\r\n    switch (pattern_matching_result) {\r\n        case 0: {\r\n            return BigNatModule_equal(BigInteger__get_V(x), BigInteger__get_V(y));\r\n        }\r\n        case 1: {\r\n            return BigNatModule_equal(BigInteger__get_V(x), BigInteger__get_V(y));\r\n        }\r\n        case 2: {\r\n            if (BigNatModule_isZero(BigInteger__get_V(x))) {\r\n                return BigNatModule_isZero(BigInteger__get_V(y));\r\n            }\r\n            else {\r\n                return false;\r\n            }\r\n        }\r\n        case 3: {\r\n            if (BigNatModule_isZero(BigInteger__get_V(x))) {\r\n                return BigNatModule_isZero(BigInteger__get_V(y));\r\n            }\r\n            else {\r\n                return false;\r\n            }\r\n        }\r\n        case 4: {\r\n            return true;\r\n        }\r\n        case 5: {\r\n            return BigNatModule_isZero(BigInteger__get_V(y));\r\n        }\r\n        case 6: {\r\n            return BigNatModule_isZero(BigInteger__get_V(y));\r\n        }\r\n        case 7: {\r\n            return BigNatModule_isZero(BigInteger__get_V(x));\r\n        }\r\n        case 8: {\r\n            return BigNatModule_isZero(BigInteger__get_V(x));\r\n        }\r\n        case 9: {\r\n            throw (new Error(\"signs should be +/- 1 or 0\\\\nParameter name: x\"));\r\n        }\r\n    }\r\n}\r\n\r\nexport function BigInteger_op_Inequality_56F059C0(x, y) {\r\n    return !BigInteger_op_Equality_56F059C0(x, y);\r\n}\r\n\r\nexport function BigInteger_op_LessThan_56F059C0(x, y) {\r\n    const matchValue = [BigInteger__get_SignInt(x), BigInteger__get_SignInt(y)];\r\n    let pattern_matching_result;\r\n    if (matchValue[0] === -1) {\r\n        if (matchValue[1] === -1) {\r\n            pattern_matching_result = 1;\r\n        }\r\n        else if (matchValue[1] === 0) {\r\n            pattern_matching_result = 8;\r\n        }\r\n        else if (matchValue[1] === 1) {\r\n            pattern_matching_result = 3;\r\n        }\r\n        else {\r\n            pattern_matching_result = 9;\r\n        }\r\n    }\r\n    else if (matchValue[0] === 0) {\r\n        if (matchValue[1] === -1) {\r\n            pattern_matching_result = 6;\r\n        }\r\n        else if (matchValue[1] === 0) {\r\n            pattern_matching_result = 4;\r\n        }\r\n        else if (matchValue[1] === 1) {\r\n            pattern_matching_result = 5;\r\n        }\r\n        else {\r\n            pattern_matching_result = 9;\r\n        }\r\n    }\r\n    else if (matchValue[0] === 1) {\r\n        if (matchValue[1] === -1) {\r\n            pattern_matching_result = 2;\r\n        }\r\n        else if (matchValue[1] === 0) {\r\n            pattern_matching_result = 7;\r\n        }\r\n        else if (matchValue[1] === 1) {\r\n            pattern_matching_result = 0;\r\n        }\r\n        else {\r\n            pattern_matching_result = 9;\r\n        }\r\n    }\r\n    else {\r\n        pattern_matching_result = 9;\r\n    }\r\n    switch (pattern_matching_result) {\r\n        case 0: {\r\n            return BigNatModule_lt(BigInteger__get_V(x), BigInteger__get_V(y));\r\n        }\r\n        case 1: {\r\n            return BigNatModule_lt(BigInteger__get_V(y), BigInteger__get_V(x));\r\n        }\r\n        case 2: {\r\n            return false;\r\n        }\r\n        case 3: {\r\n            if (!BigNatModule_isZero(BigInteger__get_V(x))) {\r\n                return true;\r\n            }\r\n            else {\r\n                return !BigNatModule_isZero(BigInteger__get_V(y));\r\n            }\r\n        }\r\n        case 4: {\r\n            return false;\r\n        }\r\n        case 5: {\r\n            return !BigNatModule_isZero(BigInteger__get_V(y));\r\n        }\r\n        case 6: {\r\n            return false;\r\n        }\r\n        case 7: {\r\n            return false;\r\n        }\r\n        case 8: {\r\n            return !BigNatModule_isZero(BigInteger__get_V(x));\r\n        }\r\n        case 9: {\r\n            throw (new Error(\"signs should be +/- 1 or 0\\\\nParameter name: x\"));\r\n        }\r\n    }\r\n}\r\n\r\nexport function BigInteger_op_GreaterThan_56F059C0(x, y) {\r\n    const matchValue = [BigInteger__get_SignInt(x), BigInteger__get_SignInt(y)];\r\n    let pattern_matching_result;\r\n    if (matchValue[0] === -1) {\r\n        if (matchValue[1] === -1) {\r\n            pattern_matching_result = 1;\r\n        }\r\n        else if (matchValue[1] === 0) {\r\n            pattern_matching_result = 8;\r\n        }\r\n        else if (matchValue[1] === 1) {\r\n            pattern_matching_result = 3;\r\n        }\r\n        else {\r\n            pattern_matching_result = 9;\r\n        }\r\n    }\r\n    else if (matchValue[0] === 0) {\r\n        if (matchValue[1] === -1) {\r\n            pattern_matching_result = 6;\r\n        }\r\n        else if (matchValue[1] === 0) {\r\n            pattern_matching_result = 4;\r\n        }\r\n        else if (matchValue[1] === 1) {\r\n            pattern_matching_result = 5;\r\n        }\r\n        else {\r\n            pattern_matching_result = 9;\r\n        }\r\n    }\r\n    else if (matchValue[0] === 1) {\r\n        if (matchValue[1] === -1) {\r\n            pattern_matching_result = 2;\r\n        }\r\n        else if (matchValue[1] === 0) {\r\n            pattern_matching_result = 7;\r\n        }\r\n        else if (matchValue[1] === 1) {\r\n            pattern_matching_result = 0;\r\n        }\r\n        else {\r\n            pattern_matching_result = 9;\r\n        }\r\n    }\r\n    else {\r\n        pattern_matching_result = 9;\r\n    }\r\n    switch (pattern_matching_result) {\r\n        case 0: {\r\n            return BigNatModule_gt(BigInteger__get_V(x), BigInteger__get_V(y));\r\n        }\r\n        case 1: {\r\n            return BigNatModule_gt(BigInteger__get_V(y), BigInteger__get_V(x));\r\n        }\r\n        case 2: {\r\n            if (!BigNatModule_isZero(BigInteger__get_V(x))) {\r\n                return true;\r\n            }\r\n            else {\r\n                return !BigNatModule_isZero(BigInteger__get_V(y));\r\n            }\r\n        }\r\n        case 3: {\r\n            return false;\r\n        }\r\n        case 4: {\r\n            return false;\r\n        }\r\n        case 5: {\r\n            return false;\r\n        }\r\n        case 6: {\r\n            return !BigNatModule_isZero(BigInteger__get_V(y));\r\n        }\r\n        case 7: {\r\n            return !BigNatModule_isZero(BigInteger__get_V(x));\r\n        }\r\n        case 8: {\r\n            return false;\r\n        }\r\n        case 9: {\r\n            throw (new Error(\"signs should be +/- 1 or 0\\\\nParameter name: x\"));\r\n        }\r\n    }\r\n}\r\n\r\nexport function BigInteger_compare_56F059C0(n, nn) {\r\n    if (BigInteger_op_LessThan_56F059C0(n, nn)) {\r\n        return -1;\r\n    }\r\n    else if (BigInteger_op_Equality_56F059C0(n, nn)) {\r\n        return 0;\r\n    }\r\n    else {\r\n        return 1;\r\n    }\r\n}\r\n\r\nexport function BigInteger_hash_Z665282C2(z) {\r\n    if (BigInteger__get_SignInt(z) === 0) {\r\n        return 1;\r\n    }\r\n    else {\r\n        return (BigInteger__get_SignInt(z) + BigNatModule_hash(BigInteger__get_V(z))) | 0;\r\n    }\r\n}\r\n\r\nexport function BigInteger__get_StructuredDisplayString(x) {\r\n    return toString(x);\r\n}\r\n\r\nexport function BigInteger_$ctor_Z524259A4(n) {\r\n    if (n >= 0) {\r\n        return BigInteger_$ctor_Z2BE94A1(1, BigInteger_nat_Z67CCE57D(BigNatModule_ofInt32(n)));\r\n    }\r\n    else if (n === -2147483648) {\r\n        return BigInteger_$ctor_Z2BE94A1(-1, BigInteger_nat_Z67CCE57D(BigNatModule_ofInt64(op_UnaryNegation(fromInteger(n, false, 2)))));\r\n    }\r\n    else {\r\n        return BigInteger_$ctor_Z2BE94A1(-1, BigInteger_nat_Z67CCE57D(BigNatModule_ofInt32(op_UnaryNegation_Int32(n))));\r\n    }\r\n}\r\n\r\nexport function BigInteger_$ctor_Z524259C1(n) {\r\n    if (compare(n, fromBits(0, 0, false)) >= 0) {\r\n        return BigInteger_$ctor_Z2BE94A1(1, BigInteger_nat_Z67CCE57D(BigNatModule_ofInt64(n)));\r\n    }\r\n    else if (equals(n, fromBits(0, 2147483648, false))) {\r\n        return BigInteger_$ctor_Z2BE94A1(-1, BigInteger_nat_Z67CCE57D(BigNatModule_add(BigNatModule_ofInt64(fromBits(4294967295, 2147483647, false)), BigNatModule_one)));\r\n    }\r\n    else {\r\n        return BigInteger_$ctor_Z2BE94A1(-1, BigInteger_nat_Z67CCE57D(BigNatModule_ofInt64(op_UnaryNegation(n))));\r\n    }\r\n}\r\n\r\nexport function BigInteger_get_One() {\r\n    return BigInteger.one;\r\n}\r\n\r\nexport function BigInteger_get_Two() {\r\n    return BigInteger.two;\r\n}\r\n\r\nexport function BigInteger_get_Zero() {\r\n    return BigInteger.zero;\r\n}\r\n\r\nexport function BigInteger_op_UnaryNegation_Z665282C2(z) {\r\n    const matchValue = BigInteger__get_SignInt(z) | 0;\r\n    if (matchValue === 0) {\r\n        return BigInteger_get_Zero();\r\n    }\r\n    else {\r\n        return BigInteger_create_Z2BE94A1(op_UnaryNegation_Int32(matchValue), BigInteger__get_V(z));\r\n    }\r\n}\r\n\r\nexport function BigInteger_Scale_Z320F31E(k, z) {\r\n    if (BigInteger__get_SignInt(z) === 0) {\r\n        return BigInteger_get_Zero();\r\n    }\r\n    else if (k < 0) {\r\n        return BigInteger_create_Z2BE94A1(op_UnaryNegation_Int32(BigInteger__get_SignInt(z)), BigNatModule_scale(op_UnaryNegation_Int32(k), BigInteger__get_V(z)));\r\n    }\r\n    else {\r\n        return BigInteger_create_Z2BE94A1(BigInteger__get_SignInt(z), BigNatModule_scale(k, BigInteger__get_V(z)));\r\n    }\r\n}\r\n\r\nexport function BigInteger_subnn_6A57060(nx, ny) {\r\n    if (BigNatModule_gte(nx, ny)) {\r\n        return BigInteger_posn_Z67CCE57D(BigNatModule_sub(nx, ny));\r\n    }\r\n    else {\r\n        return BigInteger_negn_Z67CCE57D(BigNatModule_sub(ny, nx));\r\n    }\r\n}\r\n\r\nexport function BigInteger_addnn_6A57060(nx, ny) {\r\n    return BigInteger_posn_Z67CCE57D(BigNatModule_add(nx, ny));\r\n}\r\n\r\nexport function BigInteger__get_IsZero(x) {\r\n    if (BigInteger__get_SignInt(x) === 0) {\r\n        return true;\r\n    }\r\n    else {\r\n        return BigNatModule_isZero(BigInteger__get_V(x));\r\n    }\r\n}\r\n\r\nexport function BigInteger__get_IsOne(x) {\r\n    if (BigInteger__get_SignInt(x) === 1) {\r\n        return BigNatModule_isOne(BigInteger__get_V(x));\r\n    }\r\n    else {\r\n        return false;\r\n    }\r\n}\r\n\r\nexport function BigInteger_op_Addition_56F059C0(x, y) {\r\n    if (BigInteger__get_IsZero(y)) {\r\n        return x;\r\n    }\r\n    else if (BigInteger__get_IsZero(x)) {\r\n        return y;\r\n    }\r\n    else {\r\n        const matchValue = [BigInteger__get_SignInt(x), BigInteger__get_SignInt(y)];\r\n        let pattern_matching_result;\r\n        if (matchValue[0] === -1) {\r\n            if (matchValue[1] === -1) {\r\n                pattern_matching_result = 1;\r\n            }\r\n            else if (matchValue[1] === 1) {\r\n                pattern_matching_result = 3;\r\n            }\r\n            else {\r\n                pattern_matching_result = 4;\r\n            }\r\n        }\r\n        else if (matchValue[0] === 1) {\r\n            if (matchValue[1] === -1) {\r\n                pattern_matching_result = 2;\r\n            }\r\n            else if (matchValue[1] === 1) {\r\n                pattern_matching_result = 0;\r\n            }\r\n            else {\r\n                pattern_matching_result = 4;\r\n            }\r\n        }\r\n        else {\r\n            pattern_matching_result = 4;\r\n        }\r\n        switch (pattern_matching_result) {\r\n            case 0: {\r\n                return BigInteger_addnn_6A57060(BigInteger__get_V(x), BigInteger__get_V(y));\r\n            }\r\n            case 1: {\r\n                return BigInteger_op_UnaryNegation_Z665282C2(BigInteger_addnn_6A57060(BigInteger__get_V(x), BigInteger__get_V(y)));\r\n            }\r\n            case 2: {\r\n                return BigInteger_subnn_6A57060(BigInteger__get_V(x), BigInteger__get_V(y));\r\n            }\r\n            case 3: {\r\n                return BigInteger_subnn_6A57060(BigInteger__get_V(y), BigInteger__get_V(x));\r\n            }\r\n            case 4: {\r\n                throw (new Error(\"signs should be +/- 1\\\\nParameter name: x\"));\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport function BigInteger_op_Subtraction_56F059C0(x, y) {\r\n    if (BigInteger__get_IsZero(y)) {\r\n        return x;\r\n    }\r\n    else if (BigInteger__get_IsZero(x)) {\r\n        return BigInteger_op_UnaryNegation_Z665282C2(y);\r\n    }\r\n    else {\r\n        const matchValue = [BigInteger__get_SignInt(x), BigInteger__get_SignInt(y)];\r\n        let pattern_matching_result;\r\n        if (matchValue[0] === -1) {\r\n            if (matchValue[1] === -1) {\r\n                pattern_matching_result = 1;\r\n            }\r\n            else if (matchValue[1] === 1) {\r\n                pattern_matching_result = 3;\r\n            }\r\n            else {\r\n                pattern_matching_result = 4;\r\n            }\r\n        }\r\n        else if (matchValue[0] === 1) {\r\n            if (matchValue[1] === -1) {\r\n                pattern_matching_result = 2;\r\n            }\r\n            else if (matchValue[1] === 1) {\r\n                pattern_matching_result = 0;\r\n            }\r\n            else {\r\n                pattern_matching_result = 4;\r\n            }\r\n        }\r\n        else {\r\n            pattern_matching_result = 4;\r\n        }\r\n        switch (pattern_matching_result) {\r\n            case 0: {\r\n                return BigInteger_subnn_6A57060(BigInteger__get_V(x), BigInteger__get_V(y));\r\n            }\r\n            case 1: {\r\n                return BigInteger_subnn_6A57060(BigInteger__get_V(y), BigInteger__get_V(x));\r\n            }\r\n            case 2: {\r\n                return BigInteger_addnn_6A57060(BigInteger__get_V(x), BigInteger__get_V(y));\r\n            }\r\n            case 3: {\r\n                return BigInteger_op_UnaryNegation_Z665282C2(BigInteger_addnn_6A57060(BigInteger__get_V(x), BigInteger__get_V(y)));\r\n            }\r\n            case 4: {\r\n                throw (new Error(\"signs should be +/- 1\\\\nParameter name: x\"));\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport function BigInteger_op_Multiply_56F059C0(x, y) {\r\n    if (BigInteger__get_IsZero(x)) {\r\n        return x;\r\n    }\r\n    else if (BigInteger__get_IsZero(y)) {\r\n        return y;\r\n    }\r\n    else if (BigInteger__get_IsOne(x)) {\r\n        return y;\r\n    }\r\n    else if (BigInteger__get_IsOne(y)) {\r\n        return x;\r\n    }\r\n    else {\r\n        const m = BigNatModule_mul(BigInteger__get_V(x), BigInteger__get_V(y));\r\n        return BigInteger_create_Z2BE94A1(BigInteger__get_SignInt(x) * BigInteger__get_SignInt(y), m);\r\n    }\r\n}\r\n\r\nexport function BigInteger_DivRem_56F059C0(x, y) {\r\n    if (BigInteger__get_IsZero(y)) {\r\n        throw (new Error());\r\n    }\r\n    if (BigInteger__get_IsZero(x)) {\r\n        return [BigInteger_get_Zero(), BigInteger_get_Zero()];\r\n    }\r\n    else {\r\n        const patternInput = BigNatModule_divmod(BigInteger__get_V(x), BigInteger__get_V(y));\r\n        const r = patternInput[1];\r\n        const d = patternInput[0];\r\n        const matchValue = [BigInteger__get_SignInt(x), BigInteger__get_SignInt(y)];\r\n        let pattern_matching_result;\r\n        if (matchValue[0] === -1) {\r\n            if (matchValue[1] === -1) {\r\n                pattern_matching_result = 1;\r\n            }\r\n            else if (matchValue[1] === 1) {\r\n                pattern_matching_result = 3;\r\n            }\r\n            else {\r\n                pattern_matching_result = 4;\r\n            }\r\n        }\r\n        else if (matchValue[0] === 1) {\r\n            if (matchValue[1] === -1) {\r\n                pattern_matching_result = 2;\r\n            }\r\n            else if (matchValue[1] === 1) {\r\n                pattern_matching_result = 0;\r\n            }\r\n            else {\r\n                pattern_matching_result = 4;\r\n            }\r\n        }\r\n        else {\r\n            pattern_matching_result = 4;\r\n        }\r\n        switch (pattern_matching_result) {\r\n            case 0: {\r\n                return [BigInteger_posn_Z67CCE57D(d), BigInteger_posn_Z67CCE57D(r)];\r\n            }\r\n            case 1: {\r\n                return [BigInteger_posn_Z67CCE57D(d), BigInteger_negn_Z67CCE57D(r)];\r\n            }\r\n            case 2: {\r\n                return [BigInteger_negn_Z67CCE57D(d), BigInteger_posn_Z67CCE57D(r)];\r\n            }\r\n            case 3: {\r\n                return [BigInteger_negn_Z67CCE57D(d), BigInteger_negn_Z67CCE57D(r)];\r\n            }\r\n            case 4: {\r\n                throw (new Error(\"signs should be +/- 1\\\\nParameter name: x\"));\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport function BigInteger_op_Division_56F059C0(x, y) {\r\n    return BigInteger_DivRem_56F059C0(x, y)[0];\r\n}\r\n\r\nexport function BigInteger_op_Modulus_56F059C0(x, y) {\r\n    return BigInteger_DivRem_56F059C0(x, y)[1];\r\n}\r\n\r\nexport function BigInteger_op_RightShift_62E082A2(x, y) {\r\n    return BigInteger_op_Division_56F059C0(x, BigInteger_Pow_62E082A2(BigInteger_get_Two(), y));\r\n}\r\n\r\nexport function BigInteger_op_LeftShift_62E082A2(x, y) {\r\n    return BigInteger_op_Multiply_56F059C0(x, BigInteger_Pow_62E082A2(BigInteger_get_Two(), y));\r\n}\r\n\r\nexport function BigInteger_op_BitwiseAnd_56F059C0(x, y) {\r\n    return BigInteger_posn_Z67CCE57D(BigNatModule_bitAnd(BigInteger__get_V(x), BigInteger__get_V(y)));\r\n}\r\n\r\nexport function BigInteger_op_BitwiseOr_56F059C0(x, y) {\r\n    return BigInteger_posn_Z67CCE57D(BigNatModule_bitOr(BigInteger__get_V(x), BigInteger__get_V(y)));\r\n}\r\n\r\nexport function BigInteger_op_ExclusiveOr_56F059C0(x, y) {\r\n    return BigInteger_posn_Z67CCE57D(BigNatModule_bitXor(BigInteger__get_V(x), BigInteger__get_V(y)));\r\n}\r\n\r\nexport function BigInteger_GreatestCommonDivisor_56F059C0(x, y) {\r\n    const matchValue = [BigInteger__get_SignInt(x), BigInteger__get_SignInt(y)];\r\n    if (matchValue[0] === 0) {\r\n        if (matchValue[1] === 0) {\r\n            return BigInteger_get_Zero();\r\n        }\r\n        else {\r\n            return BigInteger_posn_Z67CCE57D(BigInteger__get_V(y));\r\n        }\r\n    }\r\n    else if (matchValue[1] === 0) {\r\n        return BigInteger_posn_Z67CCE57D(BigInteger__get_V(x));\r\n    }\r\n    else {\r\n        return BigInteger_posn_Z67CCE57D(BigNatModule_hcf(BigInteger__get_V(x), BigInteger__get_V(y)));\r\n    }\r\n}\r\n\r\nexport function BigInteger__get_IsNegative(x) {\r\n    if (BigInteger__get_SignInt(x) === -1) {\r\n        return !BigInteger__get_IsZero(x);\r\n    }\r\n    else {\r\n        return false;\r\n    }\r\n}\r\n\r\nexport function BigInteger__get_IsPositive(x) {\r\n    if (BigInteger__get_SignInt(x) === 1) {\r\n        return !BigInteger__get_IsZero(x);\r\n    }\r\n    else {\r\n        return false;\r\n    }\r\n}\r\n\r\nexport function BigInteger_Abs_Z665282C2(x) {\r\n    if (BigInteger__get_SignInt(x) === -1) {\r\n        return BigInteger_op_UnaryNegation_Z665282C2(x);\r\n    }\r\n    else {\r\n        return x;\r\n    }\r\n}\r\n\r\nexport function BigInteger_op_LessThanOrEqual_56F059C0(x, y) {\r\n    const matchValue = [BigInteger__get_SignInt(x), BigInteger__get_SignInt(y)];\r\n    let pattern_matching_result;\r\n    if (matchValue[0] === -1) {\r\n        if (matchValue[1] === -1) {\r\n            pattern_matching_result = 1;\r\n        }\r\n        else if (matchValue[1] === 0) {\r\n            pattern_matching_result = 6;\r\n        }\r\n        else if (matchValue[1] === 1) {\r\n            pattern_matching_result = 3;\r\n        }\r\n        else {\r\n            pattern_matching_result = 9;\r\n        }\r\n    }\r\n    else if (matchValue[0] === 0) {\r\n        if (matchValue[1] === -1) {\r\n            pattern_matching_result = 8;\r\n        }\r\n        else if (matchValue[1] === 0) {\r\n            pattern_matching_result = 4;\r\n        }\r\n        else if (matchValue[1] === 1) {\r\n            pattern_matching_result = 7;\r\n        }\r\n        else {\r\n            pattern_matching_result = 9;\r\n        }\r\n    }\r\n    else if (matchValue[0] === 1) {\r\n        if (matchValue[1] === -1) {\r\n            pattern_matching_result = 2;\r\n        }\r\n        else if (matchValue[1] === 0) {\r\n            pattern_matching_result = 5;\r\n        }\r\n        else if (matchValue[1] === 1) {\r\n            pattern_matching_result = 0;\r\n        }\r\n        else {\r\n            pattern_matching_result = 9;\r\n        }\r\n    }\r\n    else {\r\n        pattern_matching_result = 9;\r\n    }\r\n    switch (pattern_matching_result) {\r\n        case 0: {\r\n            return BigNatModule_lte(BigInteger__get_V(x), BigInteger__get_V(y));\r\n        }\r\n        case 1: {\r\n            return BigNatModule_lte(BigInteger__get_V(y), BigInteger__get_V(x));\r\n        }\r\n        case 2: {\r\n            if (BigNatModule_isZero(BigInteger__get_V(x))) {\r\n                return BigNatModule_isZero(BigInteger__get_V(y));\r\n            }\r\n            else {\r\n                return false;\r\n            }\r\n        }\r\n        case 3: {\r\n            return true;\r\n        }\r\n        case 4: {\r\n            return true;\r\n        }\r\n        case 5: {\r\n            return BigNatModule_isZero(BigInteger__get_V(x));\r\n        }\r\n        case 6: {\r\n            return true;\r\n        }\r\n        case 7: {\r\n            return true;\r\n        }\r\n        case 8: {\r\n            return BigNatModule_isZero(BigInteger__get_V(y));\r\n        }\r\n        case 9: {\r\n            throw (new Error(\"signs should be +/- 1 or 0\\\\nParameter name: x\"));\r\n        }\r\n    }\r\n}\r\n\r\nexport function BigInteger_op_GreaterThanOrEqual_56F059C0(x, y) {\r\n    const matchValue = [BigInteger__get_SignInt(x), BigInteger__get_SignInt(y)];\r\n    let pattern_matching_result;\r\n    if (matchValue[0] === -1) {\r\n        if (matchValue[1] === -1) {\r\n            pattern_matching_result = 1;\r\n        }\r\n        else if (matchValue[1] === 0) {\r\n            pattern_matching_result = 6;\r\n        }\r\n        else if (matchValue[1] === 1) {\r\n            pattern_matching_result = 3;\r\n        }\r\n        else {\r\n            pattern_matching_result = 9;\r\n        }\r\n    }\r\n    else if (matchValue[0] === 0) {\r\n        if (matchValue[1] === -1) {\r\n            pattern_matching_result = 8;\r\n        }\r\n        else if (matchValue[1] === 0) {\r\n            pattern_matching_result = 4;\r\n        }\r\n        else if (matchValue[1] === 1) {\r\n            pattern_matching_result = 7;\r\n        }\r\n        else {\r\n            pattern_matching_result = 9;\r\n        }\r\n    }\r\n    else if (matchValue[0] === 1) {\r\n        if (matchValue[1] === -1) {\r\n            pattern_matching_result = 2;\r\n        }\r\n        else if (matchValue[1] === 0) {\r\n            pattern_matching_result = 5;\r\n        }\r\n        else if (matchValue[1] === 1) {\r\n            pattern_matching_result = 0;\r\n        }\r\n        else {\r\n            pattern_matching_result = 9;\r\n        }\r\n    }\r\n    else {\r\n        pattern_matching_result = 9;\r\n    }\r\n    switch (pattern_matching_result) {\r\n        case 0: {\r\n            return BigNatModule_gte(BigInteger__get_V(x), BigInteger__get_V(y));\r\n        }\r\n        case 1: {\r\n            return BigNatModule_gte(BigInteger__get_V(y), BigInteger__get_V(x));\r\n        }\r\n        case 2: {\r\n            return true;\r\n        }\r\n        case 3: {\r\n            if (BigNatModule_isZero(BigInteger__get_V(x))) {\r\n                return BigNatModule_isZero(BigInteger__get_V(y));\r\n            }\r\n            else {\r\n                return false;\r\n            }\r\n        }\r\n        case 4: {\r\n            return true;\r\n        }\r\n        case 5: {\r\n            return true;\r\n        }\r\n        case 6: {\r\n            return BigNatModule_isZero(BigInteger__get_V(x));\r\n        }\r\n        case 7: {\r\n            return BigNatModule_isZero(BigInteger__get_V(y));\r\n        }\r\n        case 8: {\r\n            return true;\r\n        }\r\n        case 9: {\r\n            throw (new Error(\"signs should be +/- 1 or 0\\\\nParameter name: x\"));\r\n        }\r\n    }\r\n}\r\n\r\nexport function BigInteger_Pow_62E082A2(x, y) {\r\n    if (y < 0) {\r\n        throw (new Error(\"y\"));\r\n    }\r\n    const matchValue = [BigInteger__get_IsZero(x), y];\r\n    if (matchValue[0]) {\r\n        if (matchValue[1] === 0) {\r\n            return BigInteger_get_One();\r\n        }\r\n        else {\r\n            return BigInteger_get_Zero();\r\n        }\r\n    }\r\n    else {\r\n        const yval = BigInteger_$ctor_Z524259A4(y);\r\n        return BigInteger_create_Z2BE94A1(BigNatModule_isZero(BigNatModule_rem(BigInteger__get_V(yval), BigNatModule_two)) ? 1 : BigInteger__get_SignInt(x), BigNatModule_pow(BigInteger__get_V(x), BigInteger__get_V(yval)));\r\n    }\r\n}\r\n\r\nexport function BigInteger__get_ToInt32(x) {\r\n    if (BigInteger__get_IsZero(x)) {\r\n        return 0;\r\n    }\r\n    else {\r\n        const u = BigNatModule_toUInt32(BigInteger__get_V(x));\r\n        if (u <= (2147483647 >>> 0)) {\r\n            return (BigInteger__get_SignInt(x) * (~(~u))) | 0;\r\n        }\r\n        else if ((BigInteger__get_SignInt(x) === -1) ? (u === ((2147483647 + 1) >>> 0)) : false) {\r\n            return -2147483648;\r\n        }\r\n        else {\r\n            throw (new Error());\r\n        }\r\n    }\r\n}\r\n\r\nexport function BigInteger__get_ToUInt32(x) {\r\n    if (BigInteger__get_IsZero(x)) {\r\n        return 0;\r\n    }\r\n    else {\r\n        return BigNatModule_toUInt32(BigInteger__get_V(x));\r\n    }\r\n}\r\n\r\nexport function BigInteger__get_ToInt64(x) {\r\n    if (BigInteger__get_IsZero(x)) {\r\n        return fromBits(0, 0, false);\r\n    }\r\n    else {\r\n        const u = BigNatModule_toUInt64(BigInteger__get_V(x));\r\n        if (compare(u, fromValue(fromBits(4294967295, 2147483647, false), true)) <= 0) {\r\n            return op_Multiply(fromInteger(BigInteger__get_SignInt(x), false, 2), fromValue(u, false));\r\n        }\r\n        else if ((BigInteger__get_SignInt(x) === -1) ? equals(u, fromValue(op_Addition(fromBits(4294967295, 2147483647, false), fromBits(1, 0, false)), true)) : false) {\r\n            return fromBits(0, 2147483648, false);\r\n        }\r\n        else {\r\n            throw (new Error());\r\n        }\r\n    }\r\n}\r\n\r\nexport function BigInteger__get_ToUInt64(x) {\r\n    if (BigInteger__get_IsZero(x)) {\r\n        return fromBits(0, 0, true);\r\n    }\r\n    else {\r\n        return BigNatModule_toUInt64(BigInteger__get_V(x));\r\n    }\r\n}\r\n\r\nexport function BigInteger__get_ToDouble(x) {\r\n    const matchValue = BigInteger__get_SignInt(x) | 0;\r\n    switch (matchValue) {\r\n        case -1: {\r\n            return -BigNatModule_toFloat(BigInteger__get_V(x));\r\n        }\r\n        case 0: {\r\n            return 0;\r\n        }\r\n        case 1: {\r\n            return BigNatModule_toFloat(BigInteger__get_V(x));\r\n        }\r\n        default: {\r\n            throw (new Error(\"signs should be +/- 1 or 0\\\\nParameter name: x\"));\r\n        }\r\n    }\r\n}\r\n\r\nexport function BigInteger__get_ToSByte(x) {\r\n    return (BigInteger__get_ToInt32(x) + 0x80 & 0xFF) - 0x80;\r\n}\r\n\r\nexport function BigInteger__get_ToByte(x) {\r\n    return BigInteger__get_ToUInt32(x) & 0xFF;\r\n}\r\n\r\nexport function BigInteger__get_ToInt16(x) {\r\n    return (BigInteger__get_ToInt32(x) + 0x8000 & 0xFFFF) - 0x8000;\r\n}\r\n\r\nexport function BigInteger__get_ToUInt16(x) {\r\n    return BigInteger__get_ToUInt32(x) & 0xFFFF;\r\n}\r\n\r\nexport function BigInteger__get_ToSingle(x) {\r\n    return BigInteger__get_ToDouble(x);\r\n}\r\n\r\nexport function BigInteger__get_ToDecimal(x) {\r\n    return new Decimal(BigInteger__get_ToDouble(x));\r\n}\r\n\r\nexport function BigInteger_Parse_Z721C83C5(text) {\r\n    if (text == null) {\r\n        throw (new Error(\"text\"));\r\n    }\r\n    const text_1 = text.trim();\r\n    const len = text_1.length | 0;\r\n    if (len === 0) {\r\n        throw (new Error());\r\n    }\r\n    const matchValue = [text_1[0], len];\r\n    if (matchValue[0] === \"+\") {\r\n        if (matchValue[1] === 1) {\r\n            throw (new Error());\r\n        }\r\n        else {\r\n            return BigInteger_posn_Z67CCE57D(BigNatModule_ofString(text_1.slice(1, (len - 1) + 1)));\r\n        }\r\n    }\r\n    else if (matchValue[0] === \"-\") {\r\n        if (matchValue[1] === 1) {\r\n            throw (new Error());\r\n        }\r\n        else {\r\n            return BigInteger_negn_Z67CCE57D(BigNatModule_ofString(text_1.slice(1, (len - 1) + 1)));\r\n        }\r\n    }\r\n    else {\r\n        return BigInteger_posn_Z67CCE57D(BigNatModule_ofString(text_1));\r\n    }\r\n}\r\n\r\nexport function BigInteger__get_IsSmall(x) {\r\n    if (BigInteger__get_IsZero(x)) {\r\n        return true;\r\n    }\r\n    else {\r\n        return BigNatModule_isSmall(BigInteger__get_V(x));\r\n    }\r\n}\r\n\r\nexport function BigInteger_Factorial_Z665282C2(x) {\r\n    if (BigInteger__get_IsNegative(x)) {\r\n        throw (new Error(\"mustBeNonNegative\\\\nParameter name: x\"));\r\n    }\r\n    if (BigInteger__get_IsPositive(x)) {\r\n        return BigInteger_posn_Z67CCE57D(BigNatModule_factorial(BigInteger__get_V(x)));\r\n    }\r\n    else {\r\n        return BigInteger_get_One();\r\n    }\r\n}\r\n\r\nexport function BigInteger_op_UnaryPlus_Z665282C2(n1) {\r\n    return n1;\r\n}\r\n\r\nexport function BigInteger_FromInt64_Z524259C1(x) {\r\n    return BigInteger_$ctor_Z524259C1(x);\r\n}\r\n\r\nexport function BigInteger_FromInt32_Z524259A4(x) {\r\n    return BigInteger_$ctor_Z524259A4(x);\r\n}\r\n\r\n","import { compare } from \"./Util.js\";\r\nimport { unfold, delay } from \"./Seq.js\";\r\nimport { op_Addition, fromZero } from \"./BigInt.js\";\r\nimport { op_Addition as op_Addition_1, fromParts } from \"./Decimal.js\";\r\nimport { op_Addition as op_Addition_2, fromBits } from \"./Long.js\";\r\n\r\nexport function makeRangeStepFunction(step, stop, zero, add) {\r\n    const stepComparedWithZero = compare(step, zero) | 0;\r\n    if (stepComparedWithZero === 0) {\r\n        throw (new Error(\"The step of a range cannot be zero\"));\r\n    }\r\n    const stepGreaterThanZero = stepComparedWithZero > 0;\r\n    return (x) => {\r\n        const comparedWithLast = compare(x, stop) | 0;\r\n        return ((stepGreaterThanZero ? (comparedWithLast <= 0) : false) ? true : ((!stepGreaterThanZero) ? (comparedWithLast >= 0) : false)) ? [x, add(x, step)] : (void 0);\r\n    };\r\n}\r\n\r\nexport function integralRangeStep(start, step, stop, zero, add) {\r\n    const stepFn = makeRangeStepFunction(step, stop, zero, add);\r\n    return delay(() => unfold(stepFn, start));\r\n}\r\n\r\nexport function rangeBigInt(start, step, stop) {\r\n    return integralRangeStep(start, step, stop, fromZero(), (x, y) => op_Addition(x, y));\r\n}\r\n\r\nexport function rangeDecimal(start, step, stop) {\r\n    return integralRangeStep(start, step, stop, fromParts(0, 0, 0, false, 0), (x, y) => op_Addition_1(x, y));\r\n}\r\n\r\nexport function rangeDouble(start, step, stop) {\r\n    return integralRangeStep(start, step, stop, 0, (x, y) => (x + y));\r\n}\r\n\r\nexport function rangeInt64(start, step, stop) {\r\n    return integralRangeStep(start, step, stop, fromBits(0, 0, false), (x, y) => op_Addition_2(x, y));\r\n}\r\n\r\nexport function rangeUInt64(start, step, stop) {\r\n    return integralRangeStep(start, step, stop, fromBits(0, 0, true), (x, y) => op_Addition_2(x, y));\r\n}\r\n\r\nexport function rangeChar(start, stop) {\r\n    const intStop = stop.charCodeAt(0) | 0;\r\n    return delay(() => unfold((c) => {\r\n        if (c <= intStop) {\r\n            return [String.fromCharCode(c), c + 1];\r\n        }\r\n        else {\r\n            return void 0;\r\n        }\r\n    }, start.charCodeAt(0)));\r\n}\r\n\r\n","import { BigInteger_op_Inequality_56F059C0, BigInteger_op_Equality_56F059C0, BigInteger_op_GreaterThanOrEqual_56F059C0, BigInteger_op_GreaterThan_56F059C0, BigInteger_op_LessThanOrEqual_56F059C0, BigInteger_op_LessThan_56F059C0, BigInteger_op_ExclusiveOr_56F059C0, BigInteger_op_BitwiseOr_56F059C0, BigInteger_op_BitwiseAnd_56F059C0, BigInteger_op_LeftShift_62E082A2, BigInteger_op_RightShift_62E082A2, BigInteger_op_UnaryPlus_Z665282C2, BigInteger_op_UnaryNegation_Z665282C2, BigInteger_op_Modulus_56F059C0, BigInteger_op_Division_56F059C0, BigInteger_op_Multiply_56F059C0, BigInteger_op_Subtraction_56F059C0, BigInteger_op_Addition_56F059C0, BigInteger__get_IsOne, BigInteger__get_IsZero, BigInteger__get_Sign, BigInteger__get_ToDecimal, BigInteger__get_ToDouble, BigInteger__get_ToSingle, BigInteger__get_ToUInt64, BigInteger__get_ToInt64, BigInteger__get_ToUInt32, BigInteger__get_ToInt32, BigInteger__get_ToUInt16, BigInteger__get_ToInt16, BigInteger__get_ToByte, BigInteger__get_ToSByte, BigInteger_$ctor_Z524259A4, BigInteger_$ctor_Z524259C1, BigInteger_get_Two, BigInteger_get_One, BigInteger_get_Zero, BigInteger_Abs_Z665282C2, BigInteger_Pow_62E082A2, BigInteger_GreatestCommonDivisor_56F059C0, BigInteger_DivRem_56F059C0, BigInteger_Parse_Z721C83C5, BigInteger } from \"./BigInt/z.js\";\r\nimport { fromInteger } from \"./Long.js\";\r\nimport { comparePrimitives, min, compare as compare_1, equals as equals_1, safeHash } from \"./Util.js\";\r\nimport { toString as toString_1 } from \"./Types.js\";\r\nimport { fold, empty, ofArrayWithTail, cons, toArray, head, skipWhile } from \"./List.js\";\r\nimport { fill, reverse } from \"./Array.js\";\r\n\r\nexport function isBigInt(x) {\r\n    return x instanceof BigInteger;\r\n}\r\n\r\nexport function tryParse(str, res) {\r\n    try {\r\n        res.contents = BigInteger_Parse_Z721C83C5(str);\r\n        return true;\r\n    }\r\n    catch (matchValue) {\r\n        return false;\r\n    }\r\n}\r\n\r\nexport function divRem(x, y, remainder) {\r\n    const patternInput = BigInteger_DivRem_56F059C0(x, y);\r\n    remainder.contents = patternInput[1];\r\n    return patternInput[0];\r\n}\r\n\r\nexport function parse(arg00) {\r\n    return BigInteger_Parse_Z721C83C5(arg00);\r\n}\r\n\r\nexport function greatestCommonDivisor(arg00, arg01) {\r\n    return BigInteger_GreatestCommonDivisor_56F059C0(arg00, arg01);\r\n}\r\n\r\nexport function pow(arg00, arg01) {\r\n    return BigInteger_Pow_62E082A2(arg00, arg01);\r\n}\r\n\r\nexport function abs(arg00) {\r\n    return BigInteger_Abs_Z665282C2(arg00);\r\n}\r\n\r\nexport const zero = BigInteger_get_Zero();\r\n\r\nexport const one = BigInteger_get_One();\r\n\r\nexport const two = BigInteger_get_Two();\r\n\r\nexport function fromString(s) {\r\n    return BigInteger_Parse_Z721C83C5(s);\r\n}\r\n\r\nexport function fromZero() {\r\n    return BigInteger_get_Zero();\r\n}\r\n\r\nexport function fromOne() {\r\n    return BigInteger_get_One();\r\n}\r\n\r\nexport function fromInt64(i) {\r\n    return BigInteger_$ctor_Z524259C1(i);\r\n}\r\n\r\nexport function fromInt32(i) {\r\n    if (i > 2147483647) {\r\n        return BigInteger_$ctor_Z524259C1(fromInteger(i, false, 6));\r\n    }\r\n    else {\r\n        return BigInteger_$ctor_Z524259A4(i);\r\n    }\r\n}\r\n\r\nexport function toSByte(x) {\r\n    return BigInteger__get_ToSByte(x);\r\n}\r\n\r\nexport function toByte(x) {\r\n    return BigInteger__get_ToByte(x);\r\n}\r\n\r\nexport function toInt16(x) {\r\n    return BigInteger__get_ToInt16(x);\r\n}\r\n\r\nexport function toUInt16(x) {\r\n    return BigInteger__get_ToUInt16(x);\r\n}\r\n\r\nexport function toInt32(x) {\r\n    return BigInteger__get_ToInt32(x);\r\n}\r\n\r\nexport function toUInt32(x) {\r\n    return BigInteger__get_ToUInt32(x);\r\n}\r\n\r\nexport function toInt64(x) {\r\n    return BigInteger__get_ToInt64(x);\r\n}\r\n\r\nexport function toUInt64(x) {\r\n    return BigInteger__get_ToUInt64(x);\r\n}\r\n\r\nexport function toSingle(x) {\r\n    return BigInteger__get_ToSingle(x);\r\n}\r\n\r\nexport function toDouble(x) {\r\n    return BigInteger__get_ToDouble(x);\r\n}\r\n\r\nexport function toDecimal(x) {\r\n    return BigInteger__get_ToDecimal(x);\r\n}\r\n\r\nexport function sign(x) {\r\n    return BigInteger__get_Sign(x);\r\n}\r\n\r\nexport function isZero(x) {\r\n    return BigInteger__get_IsZero(x);\r\n}\r\n\r\nexport function isOne(x) {\r\n    return BigInteger__get_IsOne(x);\r\n}\r\n\r\nexport function hash(x) {\r\n    return safeHash(x);\r\n}\r\n\r\nexport function compare(x, y) {\r\n    return x.CompareTo(y);\r\n}\r\n\r\nexport function equals(x, y) {\r\n    return equals_1(x, y);\r\n}\r\n\r\nexport function toString(x) {\r\n    return toString_1(x);\r\n}\r\n\r\nexport const get_Zero = BigInteger_get_Zero();\r\n\r\nexport const get_One = BigInteger_get_One();\r\n\r\nexport function op_Addition(arg00, arg01) {\r\n    return BigInteger_op_Addition_56F059C0(arg00, arg01);\r\n}\r\n\r\nexport function op_Subtraction(arg00, arg01) {\r\n    return BigInteger_op_Subtraction_56F059C0(arg00, arg01);\r\n}\r\n\r\nexport function op_Multiply(arg00, arg01) {\r\n    return BigInteger_op_Multiply_56F059C0(arg00, arg01);\r\n}\r\n\r\nexport function op_Division(arg00, arg01) {\r\n    return BigInteger_op_Division_56F059C0(arg00, arg01);\r\n}\r\n\r\nexport function op_Modulus(arg00, arg01) {\r\n    return BigInteger_op_Modulus_56F059C0(arg00, arg01);\r\n}\r\n\r\nexport function op_UnaryNegation(arg00) {\r\n    return BigInteger_op_UnaryNegation_Z665282C2(arg00);\r\n}\r\n\r\nexport function op_UnaryPlus(arg00) {\r\n    return BigInteger_op_UnaryPlus_Z665282C2(arg00);\r\n}\r\n\r\nexport function op_RightShift(arg00, arg01) {\r\n    return BigInteger_op_RightShift_62E082A2(arg00, arg01);\r\n}\r\n\r\nexport function op_LeftShift(arg00, arg01) {\r\n    return BigInteger_op_LeftShift_62E082A2(arg00, arg01);\r\n}\r\n\r\nexport function op_BitwiseAnd(arg00, arg01) {\r\n    return BigInteger_op_BitwiseAnd_56F059C0(arg00, arg01);\r\n}\r\n\r\nexport function op_BitwiseOr(arg00, arg01) {\r\n    return BigInteger_op_BitwiseOr_56F059C0(arg00, arg01);\r\n}\r\n\r\nexport function op_ExclusiveOr(arg00, arg01) {\r\n    return BigInteger_op_ExclusiveOr_56F059C0(arg00, arg01);\r\n}\r\n\r\nexport function op_LessThan(arg00, arg01) {\r\n    return BigInteger_op_LessThan_56F059C0(arg00, arg01);\r\n}\r\n\r\nexport function op_LessThanOrEqual(arg00, arg01) {\r\n    return BigInteger_op_LessThanOrEqual_56F059C0(arg00, arg01);\r\n}\r\n\r\nexport function op_GreaterThan(arg00, arg01) {\r\n    return BigInteger_op_GreaterThan_56F059C0(arg00, arg01);\r\n}\r\n\r\nexport function op_GreaterThanOrEqual(arg00, arg01) {\r\n    return BigInteger_op_GreaterThanOrEqual_56F059C0(arg00, arg01);\r\n}\r\n\r\nexport function op_Equality(arg00, arg01) {\r\n    return BigInteger_op_Equality_56F059C0(arg00, arg01);\r\n}\r\n\r\nexport function op_Inequality(arg00, arg01) {\r\n    return BigInteger_op_Inequality_56F059C0(arg00, arg01);\r\n}\r\n\r\nfunction flipTwosComplement(currByte, lowBitFound) {\r\n    const matchValue = [currByte, lowBitFound];\r\n    if (matchValue[1]) {\r\n        return [(currByte ^ 255) & 255, true];\r\n    }\r\n    else if (matchValue[0] === 0) {\r\n        return [0, false];\r\n    }\r\n    else {\r\n        return [(currByte ^ (254 << (new Int32Array([0, 1, 2, 3, 4, 5, 6, 7])).find((i) => ((currByte & (1 << i)) > 0)))) & 255, true];\r\n    }\r\n}\r\n\r\nexport function toByteArray(value) {\r\n    if (equals_1(value, zero)) {\r\n        return new Uint8Array([0]);\r\n    }\r\n    else {\r\n        const isPositive = compare_1(value, zero) > 0;\r\n        const value_1 = isPositive ? value : BigInteger_op_Multiply_56F059C0(BigInteger_$ctor_Z524259A4(-1), value);\r\n        const mask32 = fromInt64(fromInteger(4294967295, false, 6));\r\n        const loop = (accumBytes_mut, consumeValue_mut, lowBitFound_mut) => {\r\n            let value_6, value_8, value_9, value_10;\r\n            loop:\r\n            while (true) {\r\n                const accumBytes = accumBytes_mut, consumeValue = consumeValue_mut, lowBitFound = lowBitFound_mut;\r\n                if (compare_1(consumeValue, zero) <= 0) {\r\n                    const accumBytes_1 = isPositive ? skipWhile((b) => (b === 0), accumBytes) : skipWhile((b_1) => (b_1 === 255), accumBytes);\r\n                    const isHighBitOne = (head(accumBytes_1) & 128) !== 0;\r\n                    return reverse(toArray((isPositive ? isHighBitOne : false) ? cons(0, accumBytes_1) : (((!isPositive) ? (!isHighBitOne) : false) ? cons(255, accumBytes_1) : accumBytes_1)));\r\n                }\r\n                else {\r\n                    const currValue = toUInt32(BigInteger_op_BitwiseAnd_56F059C0(consumeValue, mask32));\r\n                    if (isPositive) {\r\n                        const b0 = currValue & 0xFF;\r\n                        let b1;\r\n                        const value_4 = currValue >>> 8;\r\n                        b1 = (value_4 & 0xFF);\r\n                        let b2;\r\n                        const value_5 = currValue >>> 16;\r\n                        b2 = (value_5 & 0xFF);\r\n                        accumBytes_mut = ofArrayWithTail([(value_6 = (currValue >>> 24), value_6 & 0xFF), b2, b1, b0], accumBytes);\r\n                        consumeValue_mut = BigInteger_op_RightShift_62E082A2(consumeValue, 32);\r\n                        lowBitFound_mut = false;\r\n                        continue loop;\r\n                    }\r\n                    else {\r\n                        const patternInput = flipTwosComplement(currValue & 0xFF, lowBitFound);\r\n                        const patternInput_1 = flipTwosComplement((value_8 = (currValue >>> 8), value_8 & 0xFF), patternInput[1]);\r\n                        const patternInput_2 = flipTwosComplement((value_9 = (currValue >>> 16), value_9 & 0xFF), patternInput_1[1]);\r\n                        const patternInput_3 = flipTwosComplement((value_10 = (currValue >>> 24), value_10 & 0xFF), patternInput_2[1]);\r\n                        accumBytes_mut = ofArrayWithTail([patternInput_3[0], patternInput_2[0], patternInput_1[0], patternInput[0]], accumBytes);\r\n                        consumeValue_mut = BigInteger_op_RightShift_62E082A2(consumeValue, 32);\r\n                        lowBitFound_mut = patternInput_3[1];\r\n                        continue loop;\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n        };\r\n        return loop(empty(), value_1, false);\r\n    }\r\n}\r\n\r\nexport function fromByteArray(bytes) {\r\n    if (bytes == null) {\r\n        throw (new Error(\"bytes\"));\r\n    }\r\n    if (bytes.length === 0) {\r\n        return zero;\r\n    }\r\n    else {\r\n        const isPositive = (bytes[bytes.length - 1] & 128) === 0;\r\n        const buffer = fill(new Uint8Array(4), 0, 4, 0);\r\n        const loop = (accumUInt32_mut, currIndex_mut, bytesRemaining_mut, lowBitFound_mut) => {\r\n            loop:\r\n            while (true) {\r\n                const accumUInt32 = accumUInt32_mut, currIndex = currIndex_mut, bytesRemaining = bytesRemaining_mut, lowBitFound = lowBitFound_mut;\r\n                if (bytesRemaining === 0) {\r\n                    const value_2 = fold((acc, value) => BigInteger_op_Addition_56F059C0(BigInteger_op_LeftShift_62E082A2(acc, 32), fromInt64(fromInteger(value, false, 6))), zero, accumUInt32);\r\n                    if (isPositive) {\r\n                        return value_2;\r\n                    }\r\n                    else {\r\n                        return BigInteger_op_Multiply_56F059C0(BigInteger_$ctor_Z524259A4(-1), value_2);\r\n                    }\r\n                }\r\n                else {\r\n                    const bytesToProcess = min((x, y) => comparePrimitives(x, y), bytesRemaining, 4) | 0;\r\n                    for (let i_1 = 0; i_1 <= (bytesToProcess - 1); i_1++) {\r\n                        buffer[i_1] = bytes[currIndex + i_1];\r\n                    }\r\n                    if (isPositive) {\r\n                        fill(buffer, bytesToProcess, 4 - bytesToProcess, 0);\r\n                        accumUInt32_mut = cons((((((buffer[0] | ((buffer[1] << 8) >>> 0)) >>> 0) | ((buffer[2] << 16) >>> 0)) >>> 0) | ((buffer[3] << 24) >>> 0)) >>> 0, accumUInt32);\r\n                        currIndex_mut = (currIndex + bytesToProcess);\r\n                        bytesRemaining_mut = (bytesRemaining - bytesToProcess);\r\n                        lowBitFound_mut = false;\r\n                        continue loop;\r\n                    }\r\n                    else {\r\n                        fill(buffer, bytesToProcess, 4 - bytesToProcess, 255);\r\n                        const patternInput = flipTwosComplement(buffer[0], lowBitFound);\r\n                        const patternInput_1 = flipTwosComplement(buffer[1], patternInput[1]);\r\n                        const patternInput_2 = flipTwosComplement(buffer[2], patternInput_1[1]);\r\n                        const patternInput_3 = flipTwosComplement(buffer[3], patternInput_2[1]);\r\n                        accumUInt32_mut = cons((((((patternInput[0] | ((patternInput_1[0] << 8) >>> 0)) >>> 0) | ((patternInput_2[0] << 16) >>> 0)) >>> 0) | ((patternInput_3[0] << 24) >>> 0)) >>> 0, accumUInt32);\r\n                        currIndex_mut = (currIndex + bytesToProcess);\r\n                        bytesRemaining_mut = (bytesRemaining - bytesToProcess);\r\n                        lowBitFound_mut = patternInput_3[1];\r\n                        continue loop;\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n        };\r\n        return loop(empty(), 0, bytes.length, false);\r\n    }\r\n}\r\n\r\n","namespace Elmish\nopen System\n\n[<Struct>]\ntype internal RingState<'item> =\n    | Writable of wx:'item array * ix:int\n    | ReadWritable of rw:'item array * wix:int * rix:int\n\ntype internal RingBuffer<'item>(size) =\n    let doubleSize ix (items: 'item array) =\n        seq { yield! items |> Seq.skip ix\n              yield! items |> Seq.take ix\n              for _ in 0..items.Length do\n                yield Unchecked.defaultof<'item> }\n        |> Array.ofSeq\n\n    let mutable state : 'item RingState =\n        Writable (Array.zeroCreate (max size 10), 0)\n\n    member __.Pop() =\n        match state with\n        | ReadWritable (items, wix, rix) ->\n            let rix' = (rix + 1) % items.Length\n            match rix' = wix with\n            | true -> \n                state <- Writable(items, wix)\n            | _ ->\n                state <- ReadWritable(items, wix, rix')\n            Some items.[rix]\n        | _ ->\n            None\n\n    member __.Push (item:'item) =\n        match state with\n        | Writable (items, ix) ->\n            items.[ix] <- item\n            let wix = (ix + 1) % items.Length\n            state <- ReadWritable(items, wix, ix)\n        | ReadWritable (items, wix, rix) ->\n            items.[wix] <- item\n            let wix' = (wix + 1) % items.Length\n            match wix' = rix with\n            | true -> \n                state <- ReadWritable(items |> doubleSize rix, items.Length, 0)\n            | _ -> \n                state <- ReadWritable(items, wix', rix)","(**\nProgram\n---------\nCore abstractions for creating and running the dispatch loop.\n\n*)\n\nnamespace Elmish\n\n\n/// Program type captures various aspects of program behavior\ntype Program<'arg, 'model, 'msg, 'view> = private {\n    init : 'arg -> 'model * Cmd<'msg>\n    update : 'msg -> 'model -> 'model * Cmd<'msg>\n    subscribe : 'model -> Cmd<'msg>\n    view : 'model -> Dispatch<'msg> -> 'view\n    setState : 'model -> Dispatch<'msg> -> unit\n    onError : (string*exn) -> unit\n    syncDispatch: Dispatch<'msg> -> Dispatch<'msg>\n}\n\n/// Program module - functions to manipulate program instances\n[<RequireQualifiedAccess>]\n[<CompilationRepresentation(CompilationRepresentationFlags.ModuleSuffix)>]\nmodule Program =\n    /// Typical program, new commands are produced by `init` and `update` along with the new state.\n    let mkProgram \n        (init : 'arg -> 'model * Cmd<'msg>) \n        (update : 'msg -> 'model -> 'model * Cmd<'msg>)\n        (view : 'model -> Dispatch<'msg> -> 'view) =\n        { init = init\n          update = update\n          view = view\n          setState = fun model -> view model >> ignore\n          subscribe = fun _ -> Cmd.none\n          onError = Log.onError\n          syncDispatch = id }\n\n    /// Simple program that produces only new state with `init` and `update`.\n    let mkSimple \n        (init : 'arg -> 'model) \n        (update : 'msg -> 'model -> 'model)\n        (view : 'model -> Dispatch<'msg> -> 'view) =\n        { init = init >> fun state -> state,Cmd.none\n          update = fun msg -> update msg >> fun state -> state,Cmd.none\n          view = view\n          setState = fun model -> view model >> ignore\n          subscribe = fun _ -> Cmd.none\n          onError = Log.onError\n          syncDispatch = id }\n\n    /// Subscribe to external source of events.\n    /// The subscription is called once - with the initial model, but can dispatch new messages at any time.\n    let withSubscription (subscribe : 'model -> Cmd<'msg>) (program: Program<'arg, 'model, 'msg, 'view>) =\n        let sub model =\n            Cmd.batch [ program.subscribe model\n                        subscribe model ]\n        { program with subscribe = sub }\n\n    /// Trace all the updates to the console\n    let withConsoleTrace (program: Program<'arg, 'model, 'msg, 'view>) =\n        let traceInit (arg:'arg) =\n            let initModel,cmd = program.init arg\n            Log.toConsole (\"Initial state:\", initModel)\n            initModel,cmd\n\n        let traceUpdate msg model =\n            Log.toConsole (\"New message:\", msg)\n            let newModel,cmd = program.update msg model\n            Log.toConsole (\"Updated state:\", newModel)\n            newModel,cmd\n\n        { program with\n            init = traceInit \n            update = traceUpdate }\n\n    /// Trace all the messages as they update the model\n    let withTrace trace (program: Program<'arg, 'model, 'msg, 'view>) =\n        let update msg model =\n            let state,cmd = program.update msg model\n            trace msg state\n            state,cmd\n        { program\n            with update = update }\n\n    /// Handle dispatch loop exceptions\n    let withErrorHandler onError (program: Program<'arg, 'model, 'msg, 'view>) =\n        { program\n            with onError = onError }\n\n    /// For library authors only: map existing error handler and return new `Program` \n    let mapErrorHandler map (program: Program<'arg, 'model, 'msg, 'view>) =\n        { program\n            with onError = map program.onError }\n\n    /// For library authors only: get the current error handler \n    let onError (program: Program<'arg, 'model, 'msg, 'view>) =\n        program.onError\n\n    /// For library authors only: function to render the view with the latest state \n    let withSetState (setState:'model -> Dispatch<'msg> -> unit)\n                     (program: Program<'arg, 'model, 'msg, 'view>) =        \n        { program\n            with setState = setState }\n\n    /// For library authors only: return the function to render the state \n    let setState (program: Program<'arg, 'model, 'msg, 'view>) =        \n        program.setState\n\n    /// For library authors only: return the view function \n    let view (program: Program<'arg, 'model, 'msg, 'view>) =        \n        program.view\n\n    /// For library authors only: function to synchronize the dispatch function\n    let withSyncDispatch (syncDispatch:Dispatch<'msg> -> Dispatch<'msg>)\n                         (program: Program<'arg, 'model, 'msg, 'view>) =        \n        { program\n            with syncDispatch = syncDispatch }\n\n    /// For library authors only: map the program type\n    let map mapInit mapUpdate mapView mapSetState mapSubscribe\n            (program: Program<'arg, 'model, 'msg, 'view>) =\n        { init = mapInit program.init\n          update = mapUpdate program.update\n          view = mapView program.view\n          setState = mapSetState program.setState\n          subscribe = mapSubscribe program.subscribe\n          onError = program.onError\n          syncDispatch = id }\n\n    /// Start the program loop.\n    /// arg: argument to pass to the init() function.\n    /// program: program created with 'mkSimple' or 'mkProgram'.\n    let runWith (arg: 'arg) (program: Program<'arg, 'model, 'msg, 'view>) =\n        let (model,cmd) = program.init arg\n        let rb = RingBuffer 10\n        let mutable reentered = false\n        let mutable state = model        \n        let rec dispatch msg = \n            if reentered then\n                rb.Push msg\n            else\n                reentered <- true\n                let mutable nextMsg = Some msg\n                while Option.isSome nextMsg do\n                    let msg = nextMsg.Value\n                    try\n                        let (model',cmd') = program.update msg state\n                        program.setState model' syncDispatch\n                        cmd' |> Cmd.exec (fun ex -> program.onError (sprintf \"Error in command while handling: %A\" msg, ex)) syncDispatch\n                        state <- model'\n                    with ex ->\n                        program.onError (sprintf \"Unable to process the message: %A\" msg, ex)\n                    nextMsg <- rb.Pop()\n                reentered <- false\n        and syncDispatch = program.syncDispatch dispatch            \n\n        program.setState model syncDispatch\n        let sub = \n            try \n                program.subscribe model \n            with ex ->\n                program.onError (\"Unable to subscribe:\", ex)\n                Cmd.none\n        Cmd.batch [sub; cmd]\n        |> Cmd.exec (fun ex -> program.onError (\"Error intitializing:\", ex)) syncDispatch\n\n    /// Start the dispatch loop with `unit` for the init() function.\n    let run (program: Program<unit, 'model, 'msg, 'view>) = runWith () program\n","namespace Elmish.HMR\n\nmodule Bundler =\n\n    type T =\n        | Vite\n        | WebpackESM\n        | WebpackCJS_and_Parcel\n\n    let current =\n        // This code is \"special\" to not call it ugly\n        // But we need to protect against ReferenceError exception\n        // when accessing non existing variables\n        // By doing this detection only once here, we can avoid propagating\n        // this \"special\" code everywhere else\n\n        let mutable result = None\n\n        try\n            if HMR.Webpack.active then\n                result <- Some WebpackESM\n        with\n            | _ ->\n                ()\n\n        if result.IsNone then\n            try\n                if HMR.Parcel.active then\n                    result <- Some WebpackCJS_and_Parcel\n            with\n                | _ ->\n                    ()\n\n        if result.IsNone then\n            try\n                if HMR.Vite.active then\n                    result <- Some Vite\n            with\n                | _ ->\n                    ()\n\n        result\n","namespace Elmish.HMR\n\nopen Fable.Core.JsInterop\nopen Fable.React\nopen Browser\nopen Elmish\n\n[<AutoOpen>]\nmodule Common =\n\n    [<NoComparison; NoEquality>]\n    type LazyProps<'model> = {\n        model: 'model\n        render: unit -> ReactElement\n        equal: 'model -> 'model -> bool\n    }\n\n    type LazyState =\n        { HMRCount : int }\n\n    module Components =\n        type LazyView<'model>(props) =\n            inherit Component<LazyProps<'model>,LazyState>(props)\n\n            let hmrCount =\n                if isNull window?Elmish_HMR_Count then\n                    0\n                else\n                    unbox<int> window?Elmish_HMR_Count\n\n            do base.setInitState({ HMRCount = hmrCount})\n\n            override this.shouldComponentUpdate(nextProps, _nextState) =\n                // Note: It seems like if the tabs is not focus\n                // It can happen that the re-render doesn't happen\n                // I am not sure why\n                // In theory, this should not be a problem most of the times\n                match Bundler.current with\n                | Some _ ->\n                    let currentHmrCount : int = window?Elmish_HMR_Count\n                    if currentHmrCount > this.state.HMRCount then\n                        this.setState(fun _prevState _props ->\n                            { HMRCount = currentHmrCount }\n                        )\n                        // An HMR call has been triggered between two frames we force a rendering\n                        true\n                    else\n                        not <| this.props.equal this.props.model nextProps.model\n\n                | None ->\n                    not <| this.props.equal this.props.model nextProps.model\n\n            override this.render () =\n                this.props.render ()\n\n    #if DEBUG\n    /// Avoid rendering the view unless the model has changed.\n    /// equal: function to compare the previous and the new states\n    /// view: function to render the model\n    /// state: new state to render\n    let lazyViewWith (equal:'model->'model->bool)\n                     (view:'model->ReactElement)\n                     (state:'model) =\n        ofType<Components.LazyView<_>,_,_>\n            { render = fun () -> view state\n              equal = equal\n              model = state }\n            []\n    #else\n    /// Avoid rendering the view unless the model has changed.\n    /// equal: function to compare the previous and the new states\n    /// view: function to render the model\n    /// state: new state to render\n    let inline lazyViewWith (equal:'model->'model->bool)\n                     (view:'model->ReactElement)\n                     (state:'model) =\n        Elmish.React.Common.lazyViewWith equal view state\n    #endif\n\n    #if DEBUG\n    /// Avoid rendering the view unless the model has changed.\n    /// equal: function to compare the previous and the new states\n    /// view: function to render the model using the dispatch\n    /// state: new state to render\n    /// dispatch: dispatch function\n    let lazyView2With (equal:'model->'model->bool)\n                      (view:'model->'msg Dispatch->ReactElement)\n                      (state:'model)\n                      (dispatch:'msg Dispatch) =\n        ofType<Components.LazyView<_>,_,_>\n            { render = fun () -> view state dispatch\n              equal = equal\n              model = state }\n            []\n    #else\n    /// Avoid rendering the view unless the model has changed.\n    /// equal: function to compare the previous and the new states\n    /// view: function to render the model using the dispatch\n    /// state: new state to render\n    /// dispatch: dispatch function\n    let inline lazyView2With (equal:'model->'model->bool)\n                      (view:'model->'msg Dispatch->ReactElement)\n                      (state:'model)\n                      (dispatch:'msg Dispatch) =\n        Elmish.React.Common.lazyView2With equal view state dispatch\n    #endif\n\n    #if DEBUG\n    /// Avoid rendering the view unless the model has changed.\n    /// equal: function to compare the previous and the new model (a tuple of two states)\n    /// view: function to render the model using the dispatch\n    /// state1: new state to render\n    /// state2: new state to render\n    /// dispatch: dispatch function\n    let lazyView3With (equal:_->_->bool) (view:_->_->_->ReactElement) state1 state2 (dispatch:'msg Dispatch) =\n        ofType<Components.LazyView<_>,_,_>\n            { render = fun () -> view state1 state2 dispatch\n              equal = equal\n              model = (state1,state2) }\n            []\n    #else\n    /// Avoid rendering the view unless the model has changed.\n    /// equal: function to compare the previous and the new model (a tuple of two states)\n    /// view: function to render the model using the dispatch\n    /// state1: new state to render\n    /// state2: new state to render\n    /// dispatch: dispatch function\n    let inline lazyView3With (equal:_->_->bool) (view:_->_->_->ReactElement) state1 state2 (dispatch:'msg Dispatch) =\n        Elmish.React.Common.lazyView3With equal view state1 state2 dispatch\n    #endif\n\n\n    #if DEBUG\n    /// Avoid rendering the view unless the model has changed.\n    /// view: function of model to render the view\n    let inline lazyView (view:'model->ReactElement) =\n        lazyViewWith (=) view\n    #else\n    /// Avoid rendering the view unless the model has changed.\n    /// view: function of model to render the view\n    let inline lazyView (view:'model->ReactElement) =\n        Elmish.React.Common.lazyView view\n    #endif\n\n    #if DEBUG\n    /// Avoid rendering the view unless the model has changed.\n    /// view: function of two arguments to render the model using the dispatch\n    let lazyView2 (view:'model->'msg Dispatch->ReactElement) =\n        lazyView2With (=) view\n    #else\n    /// Avoid rendering the view unless the model has changed.\n    /// view: function of two arguments to render the model using the dispatch\n    let inline lazyView2 (view:'model->'msg Dispatch->ReactElement) =\n        Elmish.React.Common.lazyView2 view\n    #endif\n\n    #if DEBUG\n    /// Avoid rendering the view unless the model has changed.\n    /// view: function of three arguments to render the model using the dispatch\n    let lazyView3 (view:_->_->_->ReactElement) =\n        lazyView3With (=) view\n    #else\n    /// Avoid rendering the view unless the model has changed.\n    /// view: function of three arguments to render the model using the dispatch\n    let inline lazyView3 (view:_->_->_->ReactElement) =\n        Elmish.React.Common.lazyView3 view\n    #endif\n","import { equals } from \"./Util.js\";\nimport { Union } from \"./Types.js\";\nconst CaseRules = {\n    None: 0,\n    LowerFirst: 1,\n    SnakeCase: 2,\n    SnakeCaseAllCaps: 3,\n    KebabCase: 4,\n};\nfunction dashify(str, separator) {\n    return str.replace(/[a-z]?[A-Z]/g, (m) => m.length === 1\n        ? m.toLowerCase()\n        : m.charAt(0) + separator + m.charAt(1).toLowerCase());\n}\nfunction changeCase(str, caseRule) {\n    switch (caseRule) {\n        case CaseRules.LowerFirst:\n            return str.charAt(0).toLowerCase() + str.slice(1);\n        case CaseRules.SnakeCase:\n            return dashify(str, \"_\");\n        case CaseRules.SnakeCaseAllCaps:\n            return dashify(str, \"_\").toUpperCase();\n        case CaseRules.KebabCase:\n            return dashify(str, \"-\");\n        case CaseRules.None:\n        default:\n            return str;\n    }\n}\nexport function keyValueList(fields, caseRule = CaseRules.None) {\n    const obj = {};\n    const definedCaseRule = caseRule;\n    function fail(kvPair) {\n        throw new Error(\"Cannot infer key and value of \" + String(kvPair));\n    }\n    function assign(key, caseRule, value) {\n        key = changeCase(key, caseRule);\n        obj[key] = value;\n    }\n    for (let kvPair of fields) {\n        let caseRule = CaseRules.None;\n        if (kvPair == null) {\n            fail(kvPair);\n        }\n        // Deflate unions and use the defined case rule\n        if (kvPair instanceof Union) {\n            const name = kvPair.cases()[kvPair.tag];\n            kvPair = kvPair.fields.length === 0 ? name : [name].concat(kvPair.fields);\n            caseRule = definedCaseRule;\n        }\n        if (Array.isArray(kvPair)) {\n            switch (kvPair.length) {\n                case 0:\n                    fail(kvPair);\n                    break;\n                case 1:\n                    assign(kvPair[0], caseRule, true);\n                    break;\n                case 2:\n                    const value = kvPair[1];\n                    assign(kvPair[0], caseRule, value);\n                    break;\n                default:\n                    assign(kvPair[0], caseRule, kvPair.slice(1));\n            }\n        }\n        else if (typeof kvPair === \"string\") {\n            assign(kvPair, caseRule, true);\n        }\n        else {\n            fail(kvPair);\n        }\n    }\n    return obj;\n}\n// TODO: Move these methods to Map and Set modules\nexport function containsValue(v, map) {\n    for (const kv of map) {\n        if (equals(v, kv[1])) {\n            return true;\n        }\n    }\n    return false;\n}\nexport function tryGetValue(map, key, defaultValue) {\n    if (map.has(key)) {\n        defaultValue.contents = map.get(key);\n        return true;\n    }\n    return false;\n}\nexport function addToSet(v, set) {\n    if (set.has(v)) {\n        return false;\n    }\n    set.add(v);\n    return true;\n}\nexport function addToDict(dict, k, v) {\n    if (dict.has(k)) {\n        throw new Error(\"An item with the same key has already been added. Key: \" + k);\n    }\n    dict.set(k, v);\n}\nexport function getItemFromDict(map, key) {\n    if (map.has(key)) {\n        return map.get(key);\n    }\n    else {\n        throw new Error(`The given key '${key}' was not present in the dictionary.`);\n    }\n}\n","namespace Thoth.Json\nopen System.Text.RegularExpressions\n\ntype JsonValue = obj\n\ntype ErrorReason =\n    | BadPrimitive of string * JsonValue\n    | BadPrimitiveExtra of string * JsonValue * string\n    | BadType of string * JsonValue\n    | BadField of string * JsonValue\n    | BadPath of string * JsonValue * string\n    | TooSmallArray of string * JsonValue\n    | FailMessage of string\n    | BadOneOf of string list\n\ntype CaseStrategy =\n    | PascalCase\n    | CamelCase\n    | SnakeCase\n\ntype DecoderError = string * ErrorReason\n\ntype Decoder<'T> = string -> JsonValue -> Result<'T, DecoderError>\n\ntype Encoder<'T> = 'T -> JsonValue\n\ntype BoxedDecoder = Decoder<obj>\n\ntype BoxedEncoder = Encoder<obj>\n\ntype ExtraCoders =\n    { Hash: string\n      Coders: Map<string, BoxedEncoder * BoxedDecoder> }\n\nmodule internal Util =\n    open System.Collections.Generic\n\n    type Cache<'Value>() =\n        let cache = Dictionary<string, 'Value>()\n        member __.GetOrAdd(key, factory) =\n            match cache.TryGetValue(key) with\n            | true, x -> x\n            | false, _ ->\n                let x = factory()\n                cache.Add(key, x)\n                x\n\n    // Tree shaking will remove this if not used\n    // so no need to make them lazy in Fable\n    let CachedEncoders = Cache<BoxedEncoder>()\n    let CachedDecoders = Cache<BoxedDecoder>()\n\n    module Casing =\n        let lowerFirst (str : string) = str.[..0].ToLowerInvariant() + str.[1..]\n        let convert caseStrategy fieldName =\n            match caseStrategy with\n            | CamelCase -> lowerFirst fieldName\n            | SnakeCase -> Regex.Replace(lowerFirst fieldName, \"[A-Z]\",\"_$0\").ToLowerInvariant()\n            | PascalCase -> fieldName","import { trim } from \"./String.js\";\n// RFC 4122 compliant. From https://stackoverflow.com/a/13653180/3922220\n// const guidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/;\n// Relax GUID parsing, see #1637\nconst guidRegex = /^[\\(\\{]{0,2}[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}[\\)\\}]{0,2}$/;\nconst guidRegexNoHyphen = /^([0-9a-f]{8})([0-9a-f]{4})([0-9a-f]{4})([0-9a-f]{4})([0-9a-f]{12})$/;\nconst guidRegexHex = /^\\{0x[0-9a-f]{8},(0x[0-9a-f]{4},){2}\\{(0x[0-9a-f]{2},){7}0x[0-9a-f]{2}\\}\\}$/;\nconst guidHexCaptures = /^([0-9a-f]{8})-(([0-9a-f]{4})-)(([0-9a-f]{4})-)([0-9a-f]{2})([0-9a-f]{2})-([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})$/;\nexport function toString(str, format, _provider) {\n    if (format && (format === null || format === void 0 ? void 0 : format.length) > 0) {\n        switch (format) {\n            case \"N\":\n                return str.replace(/-/g, '');\n            case \"D\":\n                return str;\n            case \"B\":\n                return \"{\" + str + \"}\";\n            case \"P\":\n                return \"(\" + str + \")\";\n            case \"X\":\n                return str.replace(guidHexCaptures, \"{0x$1,0x$3,0x$5,{0x$6,0x$7,0x$8,0x$9,0x$10,0x$11,0x$12,0x$13}}\");\n            default:\n                throw new Error(\"Unrecognized Guid print format\");\n        }\n    }\n    else {\n        return str;\n    }\n}\n/** Validates UUID as specified in RFC4122 (versions 1-5). */\nexport function parse(str) {\n    function hyphenateGuid(str) {\n        return str.replace(guidRegexNoHyphen, \"$1-$2-$3-$4-$5\");\n    }\n    const wsTrimAndLowered = str.trim().toLowerCase();\n    if (guidRegex.test(wsTrimAndLowered)) {\n        return trim(wsTrimAndLowered, \"{\", \"}\", \"(\", \")\");\n    }\n    else if (guidRegexNoHyphen.test(wsTrimAndLowered)) {\n        return hyphenateGuid(wsTrimAndLowered);\n    }\n    else if (guidRegexHex.test(wsTrimAndLowered)) {\n        return hyphenateGuid(wsTrimAndLowered.replace(/[\\{\\},]|0x/g, ''));\n    }\n    else {\n        throw new Error(\"Guid should contain 32 digits with 4 dashes: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\");\n    }\n}\nexport function tryParse(str, defValue) {\n    try {\n        defValue.contents = parse(str);\n        return true;\n    }\n    catch (_a) {\n        return false;\n    }\n}\n// From https://gist.github.com/LeverOne/1308368\nexport function newGuid() {\n    let b = \"\";\n    for (let a = 0; a++ < 36;) {\n        b += a * 51 & 52\n            ? (a ^ 15 ? 8 ^ Math.random() * (a ^ 20 ? 16 : 4) : 4).toString(16)\n            : \"-\";\n    }\n    return b;\n}\n// Maps for number <-> hex string conversion\nlet _convertMapsInitialized = false;\nlet _byteToHex;\nlet _hexToByte;\nfunction initConvertMaps() {\n    _byteToHex = new Array(256);\n    _hexToByte = {};\n    for (let i = 0; i < 256; i++) {\n        _byteToHex[i] = (i + 0x100).toString(16).substr(1);\n        _hexToByte[_byteToHex[i]] = i;\n    }\n    _convertMapsInitialized = true;\n}\n/** Parse a UUID into it's component bytes */\n// Adapted from https://github.com/zefferus/uuid-parse\nexport function guidToArray(s) {\n    if (!_convertMapsInitialized) {\n        initConvertMaps();\n    }\n    let i = 0;\n    const buf = new Uint8Array(16);\n    s.toLowerCase().replace(/[0-9a-f]{2}/g, ((oct) => {\n        switch (i) {\n            // .NET saves first three byte groups with different endianness\n            // See https://stackoverflow.com/a/16722909/3922220\n            case 0:\n            case 1:\n            case 2:\n            case 3:\n                buf[3 - i++] = _hexToByte[oct];\n                break;\n            case 4:\n            case 5:\n                buf[9 - i++] = _hexToByte[oct];\n                break;\n            case 6:\n            case 7:\n                buf[13 - i++] = _hexToByte[oct];\n                break;\n            case 8:\n            case 9:\n            case 10:\n            case 11:\n            case 12:\n            case 13:\n            case 14:\n            case 15:\n                buf[i++] = _hexToByte[oct];\n                break;\n        }\n    }));\n    // Zero out remaining bytes if string was short\n    while (i < 16) {\n        buf[i++] = 0;\n    }\n    return buf;\n}\n/** Convert UUID byte array into a string */\nexport function arrayToGuid(buf) {\n    if (buf.length !== 16) {\n        throw new Error(\"Byte array for GUID must be exactly 16 bytes long\");\n    }\n    if (!_convertMapsInitialized) {\n        initConvertMaps();\n    }\n    const guid = _byteToHex[buf[3]] + _byteToHex[buf[2]] +\n        _byteToHex[buf[1]] + _byteToHex[buf[0]] + \"-\" +\n        _byteToHex[buf[5]] + _byteToHex[buf[4]] + \"-\" +\n        _byteToHex[buf[7]] + _byteToHex[buf[6]] + \"-\" +\n        _byteToHex[buf[8]] + _byteToHex[buf[9]] + \"-\" +\n        _byteToHex[buf[10]] + _byteToHex[buf[11]] +\n        _byteToHex[buf[12]] + _byteToHex[buf[13]] +\n        _byteToHex[buf[14]] + _byteToHex[buf[15]];\n    return guid;\n}\n","/**\n * DateTimeOffset functions.\n *\n * Note: DateOffset instances are always DateObjects in local\n * timezone (because JS dates are all kinds of messed up).\n * A local date returns UTC epoc when `.getTime()` is called.\n *\n * However, this means that in order to construct an UTC date\n * from a DateOffset with offset of +5 hours, you first need\n * to subtract those 5 hours, than add the \"local\" offset.\n * As said, all kinds of messed up.\n *\n * Basically; invariant: date.getTime() always return UTC time.\n */\nimport { create as createDate, dateOffsetToString, daysInMonth, offsetRegex, parseRaw } from \"./Date.js\";\nimport { fromValue, ticksToUnixEpochMilliseconds, unixEpochMillisecondsToTicks } from \"./Long.js\";\nimport { compareDates, padWithZeros } from \"./Util.js\";\nexport default function DateTimeOffset(value, offset) {\n    checkOffsetInRange(offset);\n    const d = new Date(value);\n    d.offset = offset != null ? offset : new Date().getTimezoneOffset() * -60000;\n    return d;\n}\nfunction checkOffsetInRange(offset) {\n    if (offset != null && offset !== 0) {\n        if (offset % 60000 !== 0) {\n            throw new Error(\"Offset must be specified in whole minutes.\");\n        }\n        if (Math.abs(offset / 3600000) > 14) {\n            throw new Error(\"Offset must be within plus or minus 14 hours.\");\n        }\n    }\n}\nexport function fromDate(date, offset) {\n    let offset2 = 0;\n    switch (date.kind) {\n        case 1 /* UTC */:\n            if (offset != null && offset !== 0) {\n                throw new Error(\"The UTC Offset for Utc DateTime instances must be 0.\");\n            }\n            offset2 = 0;\n            break;\n        case 2 /* Local */:\n            offset2 = date.getTimezoneOffset() * -60000;\n            if (offset != null && offset !== offset2) {\n                throw new Error(\"The UTC Offset of the local dateTime parameter does not match the offset argument.\");\n            }\n            break;\n        case 0 /* Unspecified */:\n        default:\n            if (offset == null) {\n                offset2 = date.getTimezoneOffset() * -60000;\n            }\n            else {\n                offset2 = offset;\n            }\n            break;\n    }\n    return DateTimeOffset(date.getTime(), offset2);\n}\nexport function fromTicks(ticks, offset) {\n    ticks = fromValue(ticks);\n    const epoc = ticksToUnixEpochMilliseconds(ticks) - offset;\n    return DateTimeOffset(epoc, offset);\n}\nexport function getUtcTicks(date) {\n    return unixEpochMillisecondsToTicks(date.getTime(), 0);\n}\nexport function minValue() {\n    // This is \"0001-01-01T00:00:00.000Z\", actual JS min value is -8640000000000000\n    return DateTimeOffset(-62135596800000, 0);\n}\nexport function maxValue() {\n    // This is \"9999-12-31T23:59:59.999Z\", actual JS max value is 8640000000000000\n    return DateTimeOffset(253402300799999, 0);\n}\nexport function parse(str) {\n    const date = parseRaw(str);\n    const offsetMatch = offsetRegex.exec(str);\n    const offset = offsetMatch == null\n        ? date.getTimezoneOffset() * -60000\n        : (offsetMatch[0] === \"Z\"\n            ? 0\n            : parseInt(offsetMatch[1], 10) * 3600000\n                + parseInt(offsetMatch[2], 10) * 60000);\n    return DateTimeOffset(date.getTime(), offset);\n}\nexport function tryParse(v, defValue) {\n    try {\n        defValue.contents = parse(v);\n        return true;\n    }\n    catch (_err) {\n        return false;\n    }\n}\nexport function create(year, month, day, h, m, s, ms, offset) {\n    if (offset == null) {\n        offset = ms;\n        ms = 0;\n    }\n    checkOffsetInRange(offset);\n    let date;\n    if (offset === 0) {\n        date = new Date(Date.UTC(year, month - 1, day, h, m, s, ms));\n        if (year <= 99) {\n            date.setFullYear(year, month - 1, day);\n        }\n    }\n    else {\n        const str = padWithZeros(year, 4) + \"-\" +\n            padWithZeros(month, 2) + \"-\" +\n            padWithZeros(day, 2) + \"T\" +\n            padWithZeros(h, 2) + \":\" +\n            padWithZeros(m, 2) + \":\" +\n            padWithZeros(s, 2) + \".\" +\n            padWithZeros(ms, 3) +\n            dateOffsetToString(offset);\n        date = new Date(str);\n    }\n    const dateValue = date.getTime();\n    if (isNaN(dateValue)) {\n        throw new Error(\"The parameters describe an unrepresentable Date\");\n    }\n    return DateTimeOffset(dateValue, offset);\n}\nexport function now() {\n    const date = new Date();\n    const offset = date.getTimezoneOffset() * -60000;\n    return DateTimeOffset(date.getTime(), offset);\n}\nexport function utcNow() {\n    const date = now();\n    return DateTimeOffset(date.getTime(), 0);\n}\nexport function toUniversalTime(date) {\n    return DateTimeOffset(date.getTime(), 0);\n}\nexport function toLocalTime(date) {\n    return DateTimeOffset(date.getTime(), date.getTimezoneOffset() * -60000);\n}\nexport function timeOfDay(d) {\n    var _a;\n    const d2 = new Date(d.getTime() + ((_a = d.offset) !== null && _a !== void 0 ? _a : 0));\n    return d2.getUTCHours() * 3600000\n        + d2.getUTCMinutes() * 60000\n        + d2.getUTCSeconds() * 1000\n        + d2.getUTCMilliseconds();\n}\nexport function date(d) {\n    var _a;\n    const d2 = new Date(d.getTime() + ((_a = d.offset) !== null && _a !== void 0 ? _a : 0));\n    return createDate(d2.getUTCFullYear(), d2.getUTCMonth() + 1, d2.getUTCDate(), 0, 0, 0, 0);\n}\nexport function day(d) {\n    var _a;\n    return new Date(d.getTime() + ((_a = d.offset) !== null && _a !== void 0 ? _a : 0)).getUTCDate();\n}\nexport function hour(d) {\n    var _a;\n    return new Date(d.getTime() + ((_a = d.offset) !== null && _a !== void 0 ? _a : 0)).getUTCHours();\n}\nexport function millisecond(d) {\n    var _a;\n    return new Date(d.getTime() + ((_a = d.offset) !== null && _a !== void 0 ? _a : 0)).getUTCMilliseconds();\n}\nexport function minute(d) {\n    var _a;\n    return new Date(d.getTime() + ((_a = d.offset) !== null && _a !== void 0 ? _a : 0)).getUTCMinutes();\n}\nexport function month(d) {\n    var _a;\n    return new Date(d.getTime() + ((_a = d.offset) !== null && _a !== void 0 ? _a : 0)).getUTCMonth() + 1;\n}\nexport function second(d) {\n    var _a;\n    return new Date(d.getTime() + ((_a = d.offset) !== null && _a !== void 0 ? _a : 0)).getUTCSeconds();\n}\nexport function year(d) {\n    var _a;\n    return new Date(d.getTime() + ((_a = d.offset) !== null && _a !== void 0 ? _a : 0)).getUTCFullYear();\n}\nexport function dayOfWeek(d) {\n    var _a;\n    return new Date(d.getTime() + ((_a = d.offset) !== null && _a !== void 0 ? _a : 0)).getUTCDay();\n}\nexport function dayOfYear(d) {\n    var _a;\n    const d2 = new Date(d.getTime() + ((_a = d.offset) !== null && _a !== void 0 ? _a : 0));\n    const _year = d2.getUTCFullYear();\n    const _month = d2.getUTCMonth() + 1;\n    let _day = d2.getUTCDate();\n    for (let i = 1; i < _month; i++) {\n        _day += daysInMonth(_year, i);\n    }\n    return _day;\n}\nexport function add(d, ts) {\n    var _a;\n    return DateTimeOffset(d.getTime() + ts, ((_a = d.offset) !== null && _a !== void 0 ? _a : 0));\n}\nexport function addDays(d, v) {\n    var _a;\n    return DateTimeOffset(d.getTime() + v * 86400000, ((_a = d.offset) !== null && _a !== void 0 ? _a : 0));\n}\nexport function addHours(d, v) {\n    var _a;\n    return DateTimeOffset(d.getTime() + v * 3600000, ((_a = d.offset) !== null && _a !== void 0 ? _a : 0));\n}\nexport function addMinutes(d, v) {\n    var _a;\n    return DateTimeOffset(d.getTime() + v * 60000, ((_a = d.offset) !== null && _a !== void 0 ? _a : 0));\n}\nexport function addSeconds(d, v) {\n    var _a;\n    return DateTimeOffset(d.getTime() + v * 1000, ((_a = d.offset) !== null && _a !== void 0 ? _a : 0));\n}\nexport function addMilliseconds(d, v) {\n    var _a;\n    return DateTimeOffset(d.getTime() + v, ((_a = d.offset) !== null && _a !== void 0 ? _a : 0));\n}\nexport function addYears(d, v) {\n    var _a;\n    const newMonth = d.getUTCMonth() + 1;\n    const newYear = d.getUTCFullYear() + v;\n    const _daysInMonth = daysInMonth(newYear, newMonth);\n    const newDay = Math.min(_daysInMonth, d.getUTCDate());\n    return create(newYear, newMonth, newDay, d.getUTCHours(), d.getUTCMinutes(), d.getUTCSeconds(), d.getUTCMilliseconds(), ((_a = d.offset) !== null && _a !== void 0 ? _a : 0));\n}\nexport function addMonths(d, v) {\n    var _a, _b;\n    const d2 = new Date(d.getTime() + ((_a = d.offset) !== null && _a !== void 0 ? _a : 0));\n    let newMonth = d2.getUTCMonth() + 1 + v;\n    let newMonth_ = 0;\n    let yearOffset = 0;\n    if (newMonth > 12) {\n        newMonth_ = newMonth % 12;\n        yearOffset = Math.floor(newMonth / 12);\n        newMonth = newMonth_;\n    }\n    else if (newMonth < 1) {\n        newMonth_ = 12 + newMonth % 12;\n        yearOffset = Math.floor(newMonth / 12) + (newMonth_ === 12 ? -1 : 0);\n        newMonth = newMonth_;\n    }\n    const newYear = d2.getUTCFullYear() + yearOffset;\n    const _daysInMonth = daysInMonth(newYear, newMonth);\n    const newDay = Math.min(_daysInMonth, d2.getUTCDate());\n    return create(newYear, newMonth, newDay, d2.getUTCHours(), d2.getUTCMinutes(), d2.getUTCSeconds(), d2.getUTCMilliseconds(), ((_b = d.offset) !== null && _b !== void 0 ? _b : 0));\n}\nexport function subtract(d, that) {\n    var _a;\n    return typeof that === \"number\"\n        ? DateTimeOffset(d.getTime() - that, ((_a = d.offset) !== null && _a !== void 0 ? _a : 0))\n        : d.getTime() - that.getTime();\n}\nexport function equals(d1, d2) {\n    return d1.getTime() === d2.getTime();\n}\nexport function equalsExact(d1, d2) {\n    return d1.getTime() === d2.getTime() && d1.offset === d2.offset;\n}\nexport function compare(d1, d2) {\n    return compareDates(d1, d2);\n}\nexport const compareTo = compare;\nexport function op_Addition(x, y) {\n    return add(x, y);\n}\nexport function op_Subtraction(x, y) {\n    return subtract(x, y);\n}\nexport function toOffset(d, offset) {\n    return DateTimeOffset(d.getTime(), offset);\n}\n","// tslint:disable:max-line-length\nimport { fromNumber, op_Division, op_Multiply, toNumber } from \"./Long.js\";\nimport { comparePrimitives, padLeftAndRightWithZeros, padWithZeros } from \"./Util.js\";\n// TimeSpan in runtime just becomes a number representing milliseconds\n/**\n * Calls:\n * - `Math.ceil` if the `value` is **negative**\n * - `Math.floor` if the `value` is **positive**\n * @param value Value to round\n */\nfunction signedRound(value) {\n    return value < 0 ? Math.ceil(value) : Math.floor(value);\n}\nexport function create(d = 0, h = 0, m = 0, s = 0, ms = 0) {\n    switch (arguments.length) {\n        case 1:\n            // ticks\n            return fromTicks(arguments[0]);\n        case 3:\n            // h,m,s\n            d = 0, h = arguments[0], m = arguments[1], s = arguments[2], ms = 0;\n            break;\n        default:\n            // d,h,m,s,ms\n            break;\n    }\n    return d * 86400000 + h * 3600000 + m * 60000 + s * 1000 + ms;\n}\nexport function fromTicks(ticks) {\n    return toNumber(op_Division(ticks, 10000));\n}\nexport function fromDays(d) {\n    return create(d, 0, 0, 0);\n}\nexport function fromHours(h) {\n    return create(h, 0, 0);\n}\nexport function fromMinutes(m) {\n    return create(0, m, 0);\n}\nexport function fromSeconds(s) {\n    return create(0, 0, s);\n}\nexport function days(ts) {\n    return signedRound(ts / 86400000);\n}\nexport function hours(ts) {\n    return signedRound(ts % 86400000 / 3600000);\n}\nexport function minutes(ts) {\n    return signedRound(ts % 3600000 / 60000);\n}\nexport function seconds(ts) {\n    return signedRound(ts % 60000 / 1000);\n}\nexport function milliseconds(ts) {\n    return signedRound(ts % 1000);\n}\nexport function ticks(ts) {\n    return op_Multiply(fromNumber(ts), 10000);\n}\nexport function totalDays(ts) {\n    return ts / 86400000;\n}\nexport function totalHours(ts) {\n    return ts / 3600000;\n}\nexport function totalMinutes(ts) {\n    return ts / 60000;\n}\nexport function totalSeconds(ts) {\n    return ts / 1000;\n}\nexport function negate(ts) {\n    return ts * -1;\n}\nexport function add(ts1, ts2) {\n    return ts1 + ts2;\n}\nexport function subtract(ts1, ts2) {\n    return ts1 - ts2;\n}\nexport const op_Addition = add;\nexport const op_Subtraction = subtract;\nexport const compare = comparePrimitives;\nexport const compareTo = comparePrimitives;\nexport function duration(x) {\n    return Math.abs(x);\n}\nexport function toString(ts, format = \"c\", _provider) {\n    if ([\"c\", \"g\", \"G\"].indexOf(format) === -1) {\n        throw new Error(\"Custom formats are not supported\");\n    }\n    const d = Math.abs(days(ts));\n    const h = Math.abs(hours(ts));\n    const m = Math.abs(minutes(ts));\n    const s = Math.abs(seconds(ts));\n    const ms = Math.abs(milliseconds(ts));\n    const sign = ts < 0 ? \"-\" : \"\";\n    return `${sign}${d === 0 && (format === \"c\" || format === \"g\") ? \"\" : format === \"c\" ? d + \".\" : d + \":\"}${format === \"g\" ? h : padWithZeros(h, 2)}:${padWithZeros(m, 2)}:${padWithZeros(s, 2)}${ms === 0 && (format === \"c\" || format === \"g\") ? \"\" : format === \"g\" ? \".\" + padWithZeros(ms, 3) : \".\" + padLeftAndRightWithZeros(ms, 3, 7)}`;\n}\nexport function parse(str) {\n    const firstDot = str.search(\"\\\\.\");\n    const firstColon = str.search(\"\\\\:\");\n    if (firstDot === -1 && firstColon === -1) { // There is only a day ex: 4\n        const d = parseInt(str, 0);\n        if (isNaN(d)) {\n            throw new Error(`String '${str}' was not recognized as a valid TimeSpan.`);\n        }\n        else {\n            return create(d, 0, 0, 0, 0);\n        }\n    }\n    if (firstColon > 0) { // process time part\n        // WIP: (-?)(((\\d+)\\.)?([0-9]|0[0-9]|1[0-9]|2[0-3]):(\\d+)(:\\d+(\\.\\d{1,7})?)?|\\d+(?:(?!\\.)))\n        const r = /^(-?)((\\d+)\\.)?(?:0*)([0-9]|0[0-9]|1[0-9]|2[0-3]):(?:0*)([0-5][0-9]|[0-9])(:(?:0*)([0-5][0-9]|[0-9]))?\\.?(\\d+)?$/.exec(str);\n        if (r != null && r[4] != null && r[5] != null) {\n            let d = 0;\n            let ms = 0;\n            let s = 0;\n            const sign = r[1] != null && r[1] === \"-\" ? -1 : 1;\n            const h = +r[4];\n            const m = +r[5];\n            if (r[3] != null) {\n                d = +r[3];\n            }\n            if (r[7] != null) {\n                s = +r[7];\n            }\n            if (r[8] != null) {\n                // Depending on the number of decimals passed, we need to adapt the numbers\n                switch (r[8].length) {\n                    case 1:\n                        ms = +r[8] * 100;\n                        break;\n                    case 2:\n                        ms = +r[8] * 10;\n                        break;\n                    case 3:\n                        ms = +r[8];\n                        break;\n                    case 4:\n                        ms = +r[8] / 10;\n                        break;\n                    case 5:\n                        ms = +r[8] / 100;\n                        break;\n                    case 6:\n                        ms = +r[8] / 1000;\n                        break;\n                    case 7:\n                        ms = +r[8] / 10000;\n                        break;\n                    default:\n                        throw new Error(`String '${str}' was not recognized as a valid TimeSpan.`);\n                }\n            }\n            return sign * create(d, h, m, s, ms);\n        }\n    }\n    throw new Error(`String '${str}' was not recognized as a valid TimeSpan.`);\n}\nexport function tryParse(v, defValue) {\n    try {\n        defValue.contents = parse(v);\n        return true;\n    }\n    catch (_a) {\n        return false;\n    }\n}\n","import { record_type, bool_type, list_type, option_type, class_type } from \"./Reflection.js\";\r\nimport { some, value as value_1 } from \"./Option.js\";\r\nimport { singleton, ofArrayWithTail, head, tail, isEmpty as isEmpty_1, FSharpList, fold as fold_1, empty as empty_1, cons } from \"./List.js\";\r\nimport { fill } from \"./Array.js\";\r\nimport { structuralHash, compare, toIterator, equals, getEnumerator, isArrayLike } from \"./Util.js\";\r\nimport { Record } from \"./Types.js\";\r\nimport { tryPick as tryPick_1, pick as pick_1, iterate as iterate_1, compareWith, map as map_1, unfold } from \"./Seq.js\";\r\nimport { format, join } from \"./String.js\";\r\nimport { LanguagePrimitives_FastGenericComparer } from \"./FSharp.Core.js\";\r\n\r\nexport class MapTreeLeaf$2 {\r\n    constructor(k, v) {\r\n        this.k = k;\r\n        this.v = v;\r\n    }\r\n}\r\n\r\nexport function MapTreeLeaf$2$reflection(gen0, gen1) {\r\n    return class_type(\"Map.MapTreeLeaf`2\", [gen0, gen1], MapTreeLeaf$2);\r\n}\r\n\r\nexport function MapTreeLeaf$2_$ctor_5BDDA1(k, v) {\r\n    return new MapTreeLeaf$2(k, v);\r\n}\r\n\r\nexport function MapTreeLeaf$2__get_Key(_) {\r\n    return _.k;\r\n}\r\n\r\nexport function MapTreeLeaf$2__get_Value(_) {\r\n    return _.v;\r\n}\r\n\r\nexport class MapTreeNode$2 extends MapTreeLeaf$2 {\r\n    constructor(k, v, left, right, h) {\r\n        super(k, v);\r\n        this.left = left;\r\n        this.right = right;\r\n        this.h = (h | 0);\r\n    }\r\n}\r\n\r\nexport function MapTreeNode$2$reflection(gen0, gen1) {\r\n    return class_type(\"Map.MapTreeNode`2\", [gen0, gen1], MapTreeNode$2, MapTreeLeaf$2$reflection(gen0, gen1));\r\n}\r\n\r\nexport function MapTreeNode$2_$ctor_499A11FD(k, v, left, right, h) {\r\n    return new MapTreeNode$2(k, v, left, right, h);\r\n}\r\n\r\nexport function MapTreeNode$2__get_Left(_) {\r\n    return _.left;\r\n}\r\n\r\nexport function MapTreeNode$2__get_Right(_) {\r\n    return _.right;\r\n}\r\n\r\nexport function MapTreeNode$2__get_Height(_) {\r\n    return _.h;\r\n}\r\n\r\nexport function MapTreeModule_empty() {\r\n    return void 0;\r\n}\r\n\r\nexport function MapTreeModule_sizeAux(acc_mut, m_mut) {\r\n    MapTreeModule_sizeAux:\r\n    while (true) {\r\n        const acc = acc_mut, m = m_mut;\r\n        if (m != null) {\r\n            const m2 = m;\r\n            if (m2 instanceof MapTreeNode$2) {\r\n                acc_mut = MapTreeModule_sizeAux(acc + 1, MapTreeNode$2__get_Left(m2));\r\n                m_mut = MapTreeNode$2__get_Right(m2);\r\n                continue MapTreeModule_sizeAux;\r\n            }\r\n            else {\r\n                return (acc + 1) | 0;\r\n            }\r\n        }\r\n        else {\r\n            return acc | 0;\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function MapTreeModule_size(x) {\r\n    return MapTreeModule_sizeAux(0, x);\r\n}\r\n\r\nexport function MapTreeModule_mk(l, k, v, r) {\r\n    let hl;\r\n    const m = l;\r\n    if (m != null) {\r\n        const m2 = m;\r\n        hl = ((m2 instanceof MapTreeNode$2) ? MapTreeNode$2__get_Height(m2) : 1);\r\n    }\r\n    else {\r\n        hl = 0;\r\n    }\r\n    let hr;\r\n    const m_1 = r;\r\n    if (m_1 != null) {\r\n        const m2_1 = m_1;\r\n        hr = ((m2_1 instanceof MapTreeNode$2) ? MapTreeNode$2__get_Height(m2_1) : 1);\r\n    }\r\n    else {\r\n        hr = 0;\r\n    }\r\n    const m_2 = ((hl < hr) ? hr : hl) | 0;\r\n    if (m_2 === 0) {\r\n        return MapTreeLeaf$2_$ctor_5BDDA1(k, v);\r\n    }\r\n    else {\r\n        return MapTreeNode$2_$ctor_499A11FD(k, v, l, r, m_2 + 1);\r\n    }\r\n}\r\n\r\nexport function MapTreeModule_rebalance(t1, k, v, t2) {\r\n    let m_2, m2_2, m_3, m2_3;\r\n    let t1h;\r\n    const m = t1;\r\n    if (m != null) {\r\n        const m2 = m;\r\n        t1h = ((m2 instanceof MapTreeNode$2) ? MapTreeNode$2__get_Height(m2) : 1);\r\n    }\r\n    else {\r\n        t1h = 0;\r\n    }\r\n    let t2h;\r\n    const m_1 = t2;\r\n    if (m_1 != null) {\r\n        const m2_1 = m_1;\r\n        t2h = ((m2_1 instanceof MapTreeNode$2) ? MapTreeNode$2__get_Height(m2_1) : 1);\r\n    }\r\n    else {\r\n        t2h = 0;\r\n    }\r\n    if (t2h > (t1h + 2)) {\r\n        const matchValue = value_1(t2);\r\n        if (matchValue instanceof MapTreeNode$2) {\r\n            if (((m_2 = MapTreeNode$2__get_Left(matchValue), (m_2 != null) ? ((m2_2 = m_2, (m2_2 instanceof MapTreeNode$2) ? MapTreeNode$2__get_Height(m2_2) : 1)) : 0)) > (t1h + 1)) {\r\n                const matchValue_1 = value_1(MapTreeNode$2__get_Left(matchValue));\r\n                if (matchValue_1 instanceof MapTreeNode$2) {\r\n                    return MapTreeModule_mk(MapTreeModule_mk(t1, k, v, MapTreeNode$2__get_Left(matchValue_1)), MapTreeLeaf$2__get_Key(matchValue_1), MapTreeLeaf$2__get_Value(matchValue_1), MapTreeModule_mk(MapTreeNode$2__get_Right(matchValue_1), MapTreeLeaf$2__get_Key(matchValue), MapTreeLeaf$2__get_Value(matchValue), MapTreeNode$2__get_Right(matchValue)));\r\n                }\r\n                else {\r\n                    throw (new Error(\"internal error: Map.rebalance\"));\r\n                }\r\n            }\r\n            else {\r\n                return MapTreeModule_mk(MapTreeModule_mk(t1, k, v, MapTreeNode$2__get_Left(matchValue)), MapTreeLeaf$2__get_Key(matchValue), MapTreeLeaf$2__get_Value(matchValue), MapTreeNode$2__get_Right(matchValue));\r\n            }\r\n        }\r\n        else {\r\n            throw (new Error(\"internal error: Map.rebalance\"));\r\n        }\r\n    }\r\n    else if (t1h > (t2h + 2)) {\r\n        const matchValue_2 = value_1(t1);\r\n        if (matchValue_2 instanceof MapTreeNode$2) {\r\n            if (((m_3 = MapTreeNode$2__get_Right(matchValue_2), (m_3 != null) ? ((m2_3 = m_3, (m2_3 instanceof MapTreeNode$2) ? MapTreeNode$2__get_Height(m2_3) : 1)) : 0)) > (t2h + 1)) {\r\n                const matchValue_3 = value_1(MapTreeNode$2__get_Right(matchValue_2));\r\n                if (matchValue_3 instanceof MapTreeNode$2) {\r\n                    return MapTreeModule_mk(MapTreeModule_mk(MapTreeNode$2__get_Left(matchValue_2), MapTreeLeaf$2__get_Key(matchValue_2), MapTreeLeaf$2__get_Value(matchValue_2), MapTreeNode$2__get_Left(matchValue_3)), MapTreeLeaf$2__get_Key(matchValue_3), MapTreeLeaf$2__get_Value(matchValue_3), MapTreeModule_mk(MapTreeNode$2__get_Right(matchValue_3), k, v, t2));\r\n                }\r\n                else {\r\n                    throw (new Error(\"internal error: Map.rebalance\"));\r\n                }\r\n            }\r\n            else {\r\n                return MapTreeModule_mk(MapTreeNode$2__get_Left(matchValue_2), MapTreeLeaf$2__get_Key(matchValue_2), MapTreeLeaf$2__get_Value(matchValue_2), MapTreeModule_mk(MapTreeNode$2__get_Right(matchValue_2), k, v, t2));\r\n            }\r\n        }\r\n        else {\r\n            throw (new Error(\"internal error: Map.rebalance\"));\r\n        }\r\n    }\r\n    else {\r\n        return MapTreeModule_mk(t1, k, v, t2);\r\n    }\r\n}\r\n\r\nexport function MapTreeModule_add(comparer, k, v, m) {\r\n    if (m != null) {\r\n        const m2 = m;\r\n        const c = comparer.Compare(k, MapTreeLeaf$2__get_Key(m2)) | 0;\r\n        if (m2 instanceof MapTreeNode$2) {\r\n            if (c < 0) {\r\n                return MapTreeModule_rebalance(MapTreeModule_add(comparer, k, v, MapTreeNode$2__get_Left(m2)), MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2), MapTreeNode$2__get_Right(m2));\r\n            }\r\n            else if (c === 0) {\r\n                return MapTreeNode$2_$ctor_499A11FD(k, v, MapTreeNode$2__get_Left(m2), MapTreeNode$2__get_Right(m2), MapTreeNode$2__get_Height(m2));\r\n            }\r\n            else {\r\n                return MapTreeModule_rebalance(MapTreeNode$2__get_Left(m2), MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2), MapTreeModule_add(comparer, k, v, MapTreeNode$2__get_Right(m2)));\r\n            }\r\n        }\r\n        else if (c < 0) {\r\n            return MapTreeNode$2_$ctor_499A11FD(k, v, MapTreeModule_empty(), m, 2);\r\n        }\r\n        else if (c === 0) {\r\n            return MapTreeLeaf$2_$ctor_5BDDA1(k, v);\r\n        }\r\n        else {\r\n            return MapTreeNode$2_$ctor_499A11FD(k, v, m, MapTreeModule_empty(), 2);\r\n        }\r\n    }\r\n    else {\r\n        return MapTreeLeaf$2_$ctor_5BDDA1(k, v);\r\n    }\r\n}\r\n\r\nexport function MapTreeModule_tryFind(comparer_mut, k_mut, m_mut) {\r\n    MapTreeModule_tryFind:\r\n    while (true) {\r\n        const comparer = comparer_mut, k = k_mut, m = m_mut;\r\n        if (m != null) {\r\n            const m2 = m;\r\n            const c = comparer.Compare(k, MapTreeLeaf$2__get_Key(m2)) | 0;\r\n            if (c === 0) {\r\n                return some(MapTreeLeaf$2__get_Value(m2));\r\n            }\r\n            else if (m2 instanceof MapTreeNode$2) {\r\n                comparer_mut = comparer;\r\n                k_mut = k;\r\n                m_mut = ((c < 0) ? MapTreeNode$2__get_Left(m2) : MapTreeNode$2__get_Right(m2));\r\n                continue MapTreeModule_tryFind;\r\n            }\r\n            else {\r\n                return void 0;\r\n            }\r\n        }\r\n        else {\r\n            return void 0;\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function MapTreeModule_find(comparer, k, m) {\r\n    const matchValue = MapTreeModule_tryFind(comparer, k, m);\r\n    if (matchValue == null) {\r\n        throw (new Error());\r\n    }\r\n    else {\r\n        return value_1(matchValue);\r\n    }\r\n}\r\n\r\nexport function MapTreeModule_partition1(comparer, f, k, v, acc1, acc2) {\r\n    if (f(k, v)) {\r\n        return [MapTreeModule_add(comparer, k, v, acc1), acc2];\r\n    }\r\n    else {\r\n        return [acc1, MapTreeModule_add(comparer, k, v, acc2)];\r\n    }\r\n}\r\n\r\nexport function MapTreeModule_partitionAux(comparer_mut, f_mut, m_mut, acc_0_mut, acc_1_mut) {\r\n    MapTreeModule_partitionAux:\r\n    while (true) {\r\n        const comparer = comparer_mut, f = f_mut, m = m_mut, acc_0 = acc_0_mut, acc_1 = acc_1_mut;\r\n        const acc = [acc_0, acc_1];\r\n        if (m != null) {\r\n            const m2 = m;\r\n            if (m2 instanceof MapTreeNode$2) {\r\n                const acc_2 = MapTreeModule_partitionAux(comparer, f, MapTreeNode$2__get_Right(m2), acc[0], acc[1]);\r\n                const acc_3 = MapTreeModule_partition1(comparer, f, MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2), acc_2[0], acc_2[1]);\r\n                comparer_mut = comparer;\r\n                f_mut = f;\r\n                m_mut = MapTreeNode$2__get_Left(m2);\r\n                acc_0_mut = acc_3[0];\r\n                acc_1_mut = acc_3[1];\r\n                continue MapTreeModule_partitionAux;\r\n            }\r\n            else {\r\n                return MapTreeModule_partition1(comparer, f, MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2), acc[0], acc[1]);\r\n            }\r\n        }\r\n        else {\r\n            return acc;\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function MapTreeModule_partition(comparer, f, m) {\r\n    return MapTreeModule_partitionAux(comparer, f, m, MapTreeModule_empty(), MapTreeModule_empty());\r\n}\r\n\r\nexport function MapTreeModule_filter1(comparer, f, k, v, acc) {\r\n    if (f(k, v)) {\r\n        return MapTreeModule_add(comparer, k, v, acc);\r\n    }\r\n    else {\r\n        return acc;\r\n    }\r\n}\r\n\r\nexport function MapTreeModule_filterAux(comparer_mut, f_mut, m_mut, acc_mut) {\r\n    MapTreeModule_filterAux:\r\n    while (true) {\r\n        const comparer = comparer_mut, f = f_mut, m = m_mut, acc = acc_mut;\r\n        if (m != null) {\r\n            const m2 = m;\r\n            if (m2 instanceof MapTreeNode$2) {\r\n                const acc_1 = MapTreeModule_filterAux(comparer, f, MapTreeNode$2__get_Left(m2), acc);\r\n                const acc_2 = MapTreeModule_filter1(comparer, f, MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2), acc_1);\r\n                comparer_mut = comparer;\r\n                f_mut = f;\r\n                m_mut = MapTreeNode$2__get_Right(m2);\r\n                acc_mut = acc_2;\r\n                continue MapTreeModule_filterAux;\r\n            }\r\n            else {\r\n                return MapTreeModule_filter1(comparer, f, MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2), acc);\r\n            }\r\n        }\r\n        else {\r\n            return acc;\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function MapTreeModule_filter(comparer, f, m) {\r\n    return MapTreeModule_filterAux(comparer, f, m, MapTreeModule_empty());\r\n}\r\n\r\nexport function MapTreeModule_spliceOutSuccessor(m) {\r\n    if (m != null) {\r\n        const m2 = m;\r\n        if (m2 instanceof MapTreeNode$2) {\r\n            if (MapTreeNode$2__get_Left(m2) == null) {\r\n                return [MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2), MapTreeNode$2__get_Right(m2)];\r\n            }\r\n            else {\r\n                const patternInput = MapTreeModule_spliceOutSuccessor(MapTreeNode$2__get_Left(m2));\r\n                return [patternInput[0], patternInput[1], MapTreeModule_mk(patternInput[2], MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2), MapTreeNode$2__get_Right(m2))];\r\n            }\r\n        }\r\n        else {\r\n            return [MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2), MapTreeModule_empty()];\r\n        }\r\n    }\r\n    else {\r\n        throw (new Error(\"internal error: Map.spliceOutSuccessor\"));\r\n    }\r\n}\r\n\r\nexport function MapTreeModule_remove(comparer, k, m) {\r\n    if (m != null) {\r\n        const m2 = m;\r\n        const c = comparer.Compare(k, MapTreeLeaf$2__get_Key(m2)) | 0;\r\n        if (m2 instanceof MapTreeNode$2) {\r\n            if (c < 0) {\r\n                return MapTreeModule_rebalance(MapTreeModule_remove(comparer, k, MapTreeNode$2__get_Left(m2)), MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2), MapTreeNode$2__get_Right(m2));\r\n            }\r\n            else if (c === 0) {\r\n                if (MapTreeNode$2__get_Left(m2) == null) {\r\n                    return MapTreeNode$2__get_Right(m2);\r\n                }\r\n                else if (MapTreeNode$2__get_Right(m2) == null) {\r\n                    return MapTreeNode$2__get_Left(m2);\r\n                }\r\n                else {\r\n                    const patternInput = MapTreeModule_spliceOutSuccessor(MapTreeNode$2__get_Right(m2));\r\n                    return MapTreeModule_mk(MapTreeNode$2__get_Left(m2), patternInput[0], patternInput[1], patternInput[2]);\r\n                }\r\n            }\r\n            else {\r\n                return MapTreeModule_rebalance(MapTreeNode$2__get_Left(m2), MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2), MapTreeModule_remove(comparer, k, MapTreeNode$2__get_Right(m2)));\r\n            }\r\n        }\r\n        else if (c === 0) {\r\n            return MapTreeModule_empty();\r\n        }\r\n        else {\r\n            return m;\r\n        }\r\n    }\r\n    else {\r\n        return MapTreeModule_empty();\r\n    }\r\n}\r\n\r\nexport function MapTreeModule_change(comparer, k, u, m) {\r\n    if (m != null) {\r\n        const m2 = m;\r\n        if (m2 instanceof MapTreeNode$2) {\r\n            const c = comparer.Compare(k, MapTreeLeaf$2__get_Key(m2)) | 0;\r\n            if (c < 0) {\r\n                return MapTreeModule_rebalance(MapTreeModule_change(comparer, k, u, MapTreeNode$2__get_Left(m2)), MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2), MapTreeNode$2__get_Right(m2));\r\n            }\r\n            else if (c === 0) {\r\n                const matchValue_1 = u(some(MapTreeLeaf$2__get_Value(m2)));\r\n                if (matchValue_1 != null) {\r\n                    return MapTreeNode$2_$ctor_499A11FD(k, value_1(matchValue_1), MapTreeNode$2__get_Left(m2), MapTreeNode$2__get_Right(m2), MapTreeNode$2__get_Height(m2));\r\n                }\r\n                else if (MapTreeNode$2__get_Left(m2) == null) {\r\n                    return MapTreeNode$2__get_Right(m2);\r\n                }\r\n                else if (MapTreeNode$2__get_Right(m2) == null) {\r\n                    return MapTreeNode$2__get_Left(m2);\r\n                }\r\n                else {\r\n                    const patternInput = MapTreeModule_spliceOutSuccessor(MapTreeNode$2__get_Right(m2));\r\n                    return MapTreeModule_mk(MapTreeNode$2__get_Left(m2), patternInput[0], patternInput[1], patternInput[2]);\r\n                }\r\n            }\r\n            else {\r\n                return MapTreeModule_rebalance(MapTreeNode$2__get_Left(m2), MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2), MapTreeModule_change(comparer, k, u, MapTreeNode$2__get_Right(m2)));\r\n            }\r\n        }\r\n        else {\r\n            const c_1 = comparer.Compare(k, MapTreeLeaf$2__get_Key(m2)) | 0;\r\n            if (c_1 < 0) {\r\n                const matchValue_2 = u(void 0);\r\n                if (matchValue_2 != null) {\r\n                    return MapTreeNode$2_$ctor_499A11FD(k, value_1(matchValue_2), MapTreeModule_empty(), m, 2);\r\n                }\r\n                else {\r\n                    return m;\r\n                }\r\n            }\r\n            else if (c_1 === 0) {\r\n                const matchValue_3 = u(some(MapTreeLeaf$2__get_Value(m2)));\r\n                if (matchValue_3 != null) {\r\n                    return MapTreeLeaf$2_$ctor_5BDDA1(k, value_1(matchValue_3));\r\n                }\r\n                else {\r\n                    return MapTreeModule_empty();\r\n                }\r\n            }\r\n            else {\r\n                const matchValue_4 = u(void 0);\r\n                if (matchValue_4 != null) {\r\n                    return MapTreeNode$2_$ctor_499A11FD(k, value_1(matchValue_4), m, MapTreeModule_empty(), 2);\r\n                }\r\n                else {\r\n                    return m;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        const matchValue = u(void 0);\r\n        if (matchValue != null) {\r\n            return MapTreeLeaf$2_$ctor_5BDDA1(k, value_1(matchValue));\r\n        }\r\n        else {\r\n            return m;\r\n        }\r\n    }\r\n}\r\n\r\nexport function MapTreeModule_mem(comparer_mut, k_mut, m_mut) {\r\n    MapTreeModule_mem:\r\n    while (true) {\r\n        const comparer = comparer_mut, k = k_mut, m = m_mut;\r\n        if (m != null) {\r\n            const m2 = m;\r\n            const c = comparer.Compare(k, MapTreeLeaf$2__get_Key(m2)) | 0;\r\n            if (m2 instanceof MapTreeNode$2) {\r\n                if (c < 0) {\r\n                    comparer_mut = comparer;\r\n                    k_mut = k;\r\n                    m_mut = MapTreeNode$2__get_Left(m2);\r\n                    continue MapTreeModule_mem;\r\n                }\r\n                else if (c === 0) {\r\n                    return true;\r\n                }\r\n                else {\r\n                    comparer_mut = comparer;\r\n                    k_mut = k;\r\n                    m_mut = MapTreeNode$2__get_Right(m2);\r\n                    continue MapTreeModule_mem;\r\n                }\r\n            }\r\n            else {\r\n                return c === 0;\r\n            }\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function MapTreeModule_iterOpt(f_mut, m_mut) {\r\n    MapTreeModule_iterOpt:\r\n    while (true) {\r\n        const f = f_mut, m = m_mut;\r\n        if (m != null) {\r\n            const m2 = m;\r\n            if (m2 instanceof MapTreeNode$2) {\r\n                MapTreeModule_iterOpt(f, MapTreeNode$2__get_Left(m2));\r\n                f(MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2));\r\n                f_mut = f;\r\n                m_mut = MapTreeNode$2__get_Right(m2);\r\n                continue MapTreeModule_iterOpt;\r\n            }\r\n            else {\r\n                f(MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2));\r\n            }\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function MapTreeModule_iter(f, m) {\r\n    MapTreeModule_iterOpt(f, m);\r\n}\r\n\r\nexport function MapTreeModule_tryPickOpt(f_mut, m_mut) {\r\n    MapTreeModule_tryPickOpt:\r\n    while (true) {\r\n        const f = f_mut, m = m_mut;\r\n        if (m != null) {\r\n            const m2 = m;\r\n            if (m2 instanceof MapTreeNode$2) {\r\n                const matchValue = MapTreeModule_tryPickOpt(f, MapTreeNode$2__get_Left(m2));\r\n                if (matchValue == null) {\r\n                    const matchValue_1 = f(MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2));\r\n                    if (matchValue_1 == null) {\r\n                        f_mut = f;\r\n                        m_mut = MapTreeNode$2__get_Right(m2);\r\n                        continue MapTreeModule_tryPickOpt;\r\n                    }\r\n                    else {\r\n                        return matchValue_1;\r\n                    }\r\n                }\r\n                else {\r\n                    return matchValue;\r\n                }\r\n            }\r\n            else {\r\n                return f(MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2));\r\n            }\r\n        }\r\n        else {\r\n            return void 0;\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function MapTreeModule_tryPick(f, m) {\r\n    return MapTreeModule_tryPickOpt(f, m);\r\n}\r\n\r\nexport function MapTreeModule_existsOpt(f_mut, m_mut) {\r\n    MapTreeModule_existsOpt:\r\n    while (true) {\r\n        const f = f_mut, m = m_mut;\r\n        if (m != null) {\r\n            const m2 = m;\r\n            if (m2 instanceof MapTreeNode$2) {\r\n                if (MapTreeModule_existsOpt(f, MapTreeNode$2__get_Left(m2)) ? true : f(MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2))) {\r\n                    return true;\r\n                }\r\n                else {\r\n                    f_mut = f;\r\n                    m_mut = MapTreeNode$2__get_Right(m2);\r\n                    continue MapTreeModule_existsOpt;\r\n                }\r\n            }\r\n            else {\r\n                return f(MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2));\r\n            }\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function MapTreeModule_exists(f, m) {\r\n    return MapTreeModule_existsOpt(f, m);\r\n}\r\n\r\nexport function MapTreeModule_forallOpt(f_mut, m_mut) {\r\n    MapTreeModule_forallOpt:\r\n    while (true) {\r\n        const f = f_mut, m = m_mut;\r\n        if (m != null) {\r\n            const m2 = m;\r\n            if (m2 instanceof MapTreeNode$2) {\r\n                if (MapTreeModule_forallOpt(f, MapTreeNode$2__get_Left(m2)) ? f(MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2)) : false) {\r\n                    f_mut = f;\r\n                    m_mut = MapTreeNode$2__get_Right(m2);\r\n                    continue MapTreeModule_forallOpt;\r\n                }\r\n                else {\r\n                    return false;\r\n                }\r\n            }\r\n            else {\r\n                return f(MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2));\r\n            }\r\n        }\r\n        else {\r\n            return true;\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function MapTreeModule_forall(f, m) {\r\n    return MapTreeModule_forallOpt(f, m);\r\n}\r\n\r\nexport function MapTreeModule_map(f, m) {\r\n    if (m != null) {\r\n        const m2 = m;\r\n        if (m2 instanceof MapTreeNode$2) {\r\n            const l2 = MapTreeModule_map(f, MapTreeNode$2__get_Left(m2));\r\n            const v2 = f(MapTreeLeaf$2__get_Value(m2));\r\n            const r2 = MapTreeModule_map(f, MapTreeNode$2__get_Right(m2));\r\n            return MapTreeNode$2_$ctor_499A11FD(MapTreeLeaf$2__get_Key(m2), v2, l2, r2, MapTreeNode$2__get_Height(m2));\r\n        }\r\n        else {\r\n            return MapTreeLeaf$2_$ctor_5BDDA1(MapTreeLeaf$2__get_Key(m2), f(MapTreeLeaf$2__get_Value(m2)));\r\n        }\r\n    }\r\n    else {\r\n        return MapTreeModule_empty();\r\n    }\r\n}\r\n\r\nexport function MapTreeModule_mapiOpt(f, m) {\r\n    if (m != null) {\r\n        const m2 = m;\r\n        if (m2 instanceof MapTreeNode$2) {\r\n            const l2 = MapTreeModule_mapiOpt(f, MapTreeNode$2__get_Left(m2));\r\n            const v2 = f(MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2));\r\n            const r2 = MapTreeModule_mapiOpt(f, MapTreeNode$2__get_Right(m2));\r\n            return MapTreeNode$2_$ctor_499A11FD(MapTreeLeaf$2__get_Key(m2), v2, l2, r2, MapTreeNode$2__get_Height(m2));\r\n        }\r\n        else {\r\n            return MapTreeLeaf$2_$ctor_5BDDA1(MapTreeLeaf$2__get_Key(m2), f(MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2)));\r\n        }\r\n    }\r\n    else {\r\n        return MapTreeModule_empty();\r\n    }\r\n}\r\n\r\nexport function MapTreeModule_mapi(f, m) {\r\n    return MapTreeModule_mapiOpt(f, m);\r\n}\r\n\r\nexport function MapTreeModule_foldBackOpt(f_mut, m_mut, x_mut) {\r\n    MapTreeModule_foldBackOpt:\r\n    while (true) {\r\n        const f = f_mut, m = m_mut, x = x_mut;\r\n        if (m != null) {\r\n            const m2 = m;\r\n            if (m2 instanceof MapTreeNode$2) {\r\n                const x_1 = MapTreeModule_foldBackOpt(f, MapTreeNode$2__get_Right(m2), x);\r\n                const x_2 = f(MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2), x_1);\r\n                f_mut = f;\r\n                m_mut = MapTreeNode$2__get_Left(m2);\r\n                x_mut = x_2;\r\n                continue MapTreeModule_foldBackOpt;\r\n            }\r\n            else {\r\n                return f(MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2), x);\r\n            }\r\n        }\r\n        else {\r\n            return x;\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function MapTreeModule_foldBack(f, m, x) {\r\n    return MapTreeModule_foldBackOpt(f, m, x);\r\n}\r\n\r\nexport function MapTreeModule_foldOpt(f_mut, x_mut, m_mut) {\r\n    MapTreeModule_foldOpt:\r\n    while (true) {\r\n        const f = f_mut, x = x_mut, m = m_mut;\r\n        if (m != null) {\r\n            const m2 = m;\r\n            if (m2 instanceof MapTreeNode$2) {\r\n                f_mut = f;\r\n                x_mut = f(MapTreeModule_foldOpt(f, x, MapTreeNode$2__get_Left(m2)), MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2));\r\n                m_mut = MapTreeNode$2__get_Right(m2);\r\n                continue MapTreeModule_foldOpt;\r\n            }\r\n            else {\r\n                return f(x, MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2));\r\n            }\r\n        }\r\n        else {\r\n            return x;\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function MapTreeModule_fold(f, x, m) {\r\n    return MapTreeModule_foldOpt(f, x, m);\r\n}\r\n\r\nexport function MapTreeModule_foldSectionOpt(comparer, lo, hi, f, m, x) {\r\n    const foldFromTo = (f_1_mut, m_1_mut, x_1_mut) => {\r\n        foldFromTo:\r\n        while (true) {\r\n            const f_1 = f_1_mut, m_1 = m_1_mut, x_1 = x_1_mut;\r\n            if (m_1 != null) {\r\n                const m2 = m_1;\r\n                if (m2 instanceof MapTreeNode$2) {\r\n                    const cLoKey = comparer.Compare(lo, MapTreeLeaf$2__get_Key(m2)) | 0;\r\n                    const cKeyHi = comparer.Compare(MapTreeLeaf$2__get_Key(m2), hi) | 0;\r\n                    const x_2 = (cLoKey < 0) ? foldFromTo(f_1, MapTreeNode$2__get_Left(m2), x_1) : x_1;\r\n                    const x_3 = ((cLoKey <= 0) ? (cKeyHi <= 0) : false) ? f_1(MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2), x_2) : x_2;\r\n                    if (cKeyHi < 0) {\r\n                        f_1_mut = f_1;\r\n                        m_1_mut = MapTreeNode$2__get_Right(m2);\r\n                        x_1_mut = x_3;\r\n                        continue foldFromTo;\r\n                    }\r\n                    else {\r\n                        return x_3;\r\n                    }\r\n                }\r\n                else if ((comparer.Compare(lo, MapTreeLeaf$2__get_Key(m2)) <= 0) ? (comparer.Compare(MapTreeLeaf$2__get_Key(m2), hi) <= 0) : false) {\r\n                    return f_1(MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2), x_1);\r\n                }\r\n                else {\r\n                    return x_1;\r\n                }\r\n            }\r\n            else {\r\n                return x_1;\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    if (comparer.Compare(lo, hi) === 1) {\r\n        return x;\r\n    }\r\n    else {\r\n        return foldFromTo(f, m, x);\r\n    }\r\n}\r\n\r\nexport function MapTreeModule_foldSection(comparer, lo, hi, f, m, x) {\r\n    return MapTreeModule_foldSectionOpt(comparer, lo, hi, f, m, x);\r\n}\r\n\r\nexport function MapTreeModule_toList(m) {\r\n    const loop = (m_1_mut, acc_mut) => {\r\n        loop:\r\n        while (true) {\r\n            const m_1 = m_1_mut, acc = acc_mut;\r\n            if (m_1 != null) {\r\n                const m2 = m_1;\r\n                if (m2 instanceof MapTreeNode$2) {\r\n                    m_1_mut = MapTreeNode$2__get_Left(m2);\r\n                    acc_mut = cons([MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2)], loop(MapTreeNode$2__get_Right(m2), acc));\r\n                    continue loop;\r\n                }\r\n                else {\r\n                    return cons([MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2)], acc);\r\n                }\r\n            }\r\n            else {\r\n                return acc;\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    return loop(m, empty_1());\r\n}\r\n\r\nexport function MapTreeModule_copyToArray(m, arr, i) {\r\n    let j = i;\r\n    MapTreeModule_iter((x, y) => {\r\n        arr[j] = [x, y];\r\n        j = ((j + 1) | 0);\r\n    }, m);\r\n}\r\n\r\nexport function MapTreeModule_toArray(m) {\r\n    const n = MapTreeModule_size(m) | 0;\r\n    const res = fill(new Array(n), 0, n, [null, null]);\r\n    MapTreeModule_copyToArray(m, res, 0);\r\n    return res;\r\n}\r\n\r\nexport function MapTreeModule_ofList(comparer, l) {\r\n    return fold_1((acc, tupledArg) => MapTreeModule_add(comparer, tupledArg[0], tupledArg[1], acc), MapTreeModule_empty(), l);\r\n}\r\n\r\nexport function MapTreeModule_mkFromEnumerator(comparer_mut, acc_mut, e_mut) {\r\n    MapTreeModule_mkFromEnumerator:\r\n    while (true) {\r\n        const comparer = comparer_mut, acc = acc_mut, e = e_mut;\r\n        if (e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n            const patternInput = e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]();\r\n            comparer_mut = comparer;\r\n            acc_mut = MapTreeModule_add(comparer, patternInput[0], patternInput[1], acc);\r\n            e_mut = e;\r\n            continue MapTreeModule_mkFromEnumerator;\r\n        }\r\n        else {\r\n            return acc;\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function MapTreeModule_ofArray(comparer, arr) {\r\n    let res = MapTreeModule_empty();\r\n    for (let idx = 0; idx <= (arr.length - 1); idx++) {\r\n        const forLoopVar = arr[idx];\r\n        res = MapTreeModule_add(comparer, forLoopVar[0], forLoopVar[1], res);\r\n    }\r\n    return res;\r\n}\r\n\r\nexport function MapTreeModule_ofSeq(comparer, c) {\r\n    if (isArrayLike(c)) {\r\n        return MapTreeModule_ofArray(comparer, c);\r\n    }\r\n    else if (c instanceof FSharpList) {\r\n        return MapTreeModule_ofList(comparer, c);\r\n    }\r\n    else {\r\n        const ie = getEnumerator(c);\r\n        try {\r\n            return MapTreeModule_mkFromEnumerator(comparer, MapTreeModule_empty(), ie);\r\n        }\r\n        finally {\r\n            ie.Dispose();\r\n        }\r\n    }\r\n}\r\n\r\nexport class MapTreeModule_MapIterator$2 extends Record {\r\n    constructor(stack, started) {\r\n        super();\r\n        this.stack = stack;\r\n        this.started = started;\r\n    }\r\n}\r\n\r\nexport function MapTreeModule_MapIterator$2$reflection(gen0, gen1) {\r\n    return record_type(\"Map.MapTreeModule.MapIterator`2\", [gen0, gen1], MapTreeModule_MapIterator$2, () => [[\"stack\", list_type(option_type(MapTreeLeaf$2$reflection(gen0, gen1)))], [\"started\", bool_type]]);\r\n}\r\n\r\nexport function MapTreeModule_collapseLHS(stack_mut) {\r\n    MapTreeModule_collapseLHS:\r\n    while (true) {\r\n        const stack = stack_mut;\r\n        if (!isEmpty_1(stack)) {\r\n            const rest = tail(stack);\r\n            const m = head(stack);\r\n            if (m != null) {\r\n                const m2 = m;\r\n                if (m2 instanceof MapTreeNode$2) {\r\n                    stack_mut = ofArrayWithTail([MapTreeNode$2__get_Left(m2), MapTreeLeaf$2_$ctor_5BDDA1(MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2)), MapTreeNode$2__get_Right(m2)], rest);\r\n                    continue MapTreeModule_collapseLHS;\r\n                }\r\n                else {\r\n                    return stack;\r\n                }\r\n            }\r\n            else {\r\n                stack_mut = rest;\r\n                continue MapTreeModule_collapseLHS;\r\n            }\r\n        }\r\n        else {\r\n            return empty_1();\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function MapTreeModule_mkIterator(m) {\r\n    return new MapTreeModule_MapIterator$2(MapTreeModule_collapseLHS(singleton(m)), false);\r\n}\r\n\r\nexport function MapTreeModule_notStarted() {\r\n    throw (new Error(\"enumeration not started\"));\r\n}\r\n\r\nexport function MapTreeModule_alreadyFinished() {\r\n    throw (new Error(\"enumeration already finished\"));\r\n}\r\n\r\nexport function MapTreeModule_current(i) {\r\n    if (i.started) {\r\n        const matchValue = i.stack;\r\n        if (!isEmpty_1(matchValue)) {\r\n            if (head(matchValue) != null) {\r\n                const m = head(matchValue);\r\n                if (m instanceof MapTreeNode$2) {\r\n                    throw (new Error(\"Please report error: Map iterator, unexpected stack for current\"));\r\n                }\r\n                else {\r\n                    return [MapTreeLeaf$2__get_Key(m), MapTreeLeaf$2__get_Value(m)];\r\n                }\r\n            }\r\n            else {\r\n                throw (new Error(\"Please report error: Map iterator, unexpected stack for current\"));\r\n            }\r\n        }\r\n        else {\r\n            return MapTreeModule_alreadyFinished();\r\n        }\r\n    }\r\n    else {\r\n        return MapTreeModule_notStarted();\r\n    }\r\n}\r\n\r\nexport function MapTreeModule_moveNext(i) {\r\n    if (i.started) {\r\n        const matchValue = i.stack;\r\n        if (!isEmpty_1(matchValue)) {\r\n            if (head(matchValue) != null) {\r\n                const m = head(matchValue);\r\n                if (m instanceof MapTreeNode$2) {\r\n                    throw (new Error(\"Please report error: Map iterator, unexpected stack for moveNext\"));\r\n                }\r\n                else {\r\n                    i.stack = MapTreeModule_collapseLHS(tail(matchValue));\r\n                    return !isEmpty_1(i.stack);\r\n                }\r\n            }\r\n            else {\r\n                throw (new Error(\"Please report error: Map iterator, unexpected stack for moveNext\"));\r\n            }\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n    else {\r\n        i.started = true;\r\n        return !isEmpty_1(i.stack);\r\n    }\r\n}\r\n\r\nexport function MapTreeModule_mkIEnumerator(m) {\r\n    let i = MapTreeModule_mkIterator(m);\r\n    return {\r\n        [\"System.Collections.Generic.IEnumerator`1.get_Current\"]() {\r\n            return MapTreeModule_current(i);\r\n        },\r\n        [\"System.Collections.IEnumerator.get_Current\"]() {\r\n            return MapTreeModule_current(i);\r\n        },\r\n        [\"System.Collections.IEnumerator.MoveNext\"]() {\r\n            return MapTreeModule_moveNext(i);\r\n        },\r\n        [\"System.Collections.IEnumerator.Reset\"]() {\r\n            i = MapTreeModule_mkIterator(m);\r\n        },\r\n        Dispose() {\r\n        },\r\n    };\r\n}\r\n\r\nexport function MapTreeModule_toSeq(s) {\r\n    return unfold((en_1) => {\r\n        if (en_1[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n            return [en_1[\"System.Collections.Generic.IEnumerator`1.get_Current\"](), en_1];\r\n        }\r\n        else {\r\n            return void 0;\r\n        }\r\n    }, MapTreeModule_mkIEnumerator(s));\r\n}\r\n\r\nexport class FSharpMap {\r\n    constructor(comparer, tree) {\r\n        this.comparer = comparer;\r\n        this.tree = tree;\r\n    }\r\n    GetHashCode() {\r\n        const this$ = this;\r\n        return FSharpMap__ComputeHashCode(this$) | 0;\r\n    }\r\n    Equals(that) {\r\n        const this$ = this;\r\n        if (that instanceof FSharpMap) {\r\n            const e1 = getEnumerator(this$);\r\n            try {\r\n                const e2 = getEnumerator(that);\r\n                try {\r\n                    const loop = () => {\r\n                        const m1 = e1[\"System.Collections.IEnumerator.MoveNext\"]();\r\n                        if (m1 === e2[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n                            if (!m1) {\r\n                                return true;\r\n                            }\r\n                            else {\r\n                                const e1c = e1[\"System.Collections.Generic.IEnumerator`1.get_Current\"]();\r\n                                const e2c = e2[\"System.Collections.Generic.IEnumerator`1.get_Current\"]();\r\n                                if (equals(e1c[0], e2c[0]) ? equals(e1c[1], e2c[1]) : false) {\r\n                                    return loop();\r\n                                }\r\n                                else {\r\n                                    return false;\r\n                                }\r\n                            }\r\n                        }\r\n                        else {\r\n                            return false;\r\n                        }\r\n                    };\r\n                    return loop();\r\n                }\r\n                finally {\r\n                    e2.Dispose();\r\n                }\r\n            }\r\n            finally {\r\n                e1.Dispose();\r\n            }\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n    toString() {\r\n        const this$ = this;\r\n        return (\"map [\" + join(\"; \", map_1((kv) => format(\"({0}, {1})\", kv[0], kv[1]), this$))) + \"]\";\r\n    }\r\n    get [Symbol.toStringTag]() {\r\n        return \"FSharpMap\";\r\n    }\r\n    toJSON(_key) {\r\n        const this$ = this;\r\n        return Array.from(this$);\r\n    }\r\n    GetEnumerator() {\r\n        const __ = this;\r\n        return MapTreeModule_mkIEnumerator(__.tree);\r\n    }\r\n    [Symbol.iterator]() {\r\n        return toIterator(this.GetEnumerator());\r\n    }\r\n    [\"System.Collections.IEnumerable.GetEnumerator\"]() {\r\n        const __ = this;\r\n        return MapTreeModule_mkIEnumerator(__.tree);\r\n    }\r\n    CompareTo(obj) {\r\n        const m = this;\r\n        if (obj instanceof FSharpMap) {\r\n            return compareWith((kvp1, kvp2) => {\r\n                const c = m.comparer.Compare(kvp1[0], kvp2[0]) | 0;\r\n                return ((c !== 0) ? c : compare(kvp1[1], kvp2[1])) | 0;\r\n            }, m, obj) | 0;\r\n        }\r\n        else {\r\n            throw (new Error(\"not comparable\\\\nParameter name: obj\"));\r\n        }\r\n    }\r\n    [\"System.Collections.Generic.ICollection`1.Add2B595\"](x) {\r\n        throw (new Error(\"Map cannot be mutated\"));\r\n    }\r\n    [\"System.Collections.Generic.ICollection`1.Clear\"]() {\r\n        throw (new Error(\"Map cannot be mutated\"));\r\n    }\r\n    [\"System.Collections.Generic.ICollection`1.Remove2B595\"](x) {\r\n        throw (new Error(\"Map cannot be mutated\"));\r\n    }\r\n    [\"System.Collections.Generic.ICollection`1.Contains2B595\"](x) {\r\n        const m = this;\r\n        return FSharpMap__ContainsKey(m, x[0]) ? equals(FSharpMap__get_Item(m, x[0]), x[1]) : false;\r\n    }\r\n    [\"System.Collections.Generic.ICollection`1.CopyToZ2E171D71\"](arr, i) {\r\n        const m = this;\r\n        MapTreeModule_copyToArray(m.tree, arr, i);\r\n    }\r\n    [\"System.Collections.Generic.ICollection`1.get_IsReadOnly\"]() {\r\n        return true;\r\n    }\r\n    [\"System.Collections.Generic.ICollection`1.get_Count\"]() {\r\n        const m = this;\r\n        return FSharpMap__get_Count(m) | 0;\r\n    }\r\n    [\"System.Collections.Generic.IReadOnlyCollection`1.get_Count\"]() {\r\n        const m = this;\r\n        return FSharpMap__get_Count(m) | 0;\r\n    }\r\n    get size() {\r\n        const m = this;\r\n        return FSharpMap__get_Count(m) | 0;\r\n    }\r\n    clear() {\r\n        throw (new Error(\"Map cannot be mutated\"));\r\n    }\r\n    delete(_arg1) {\r\n        throw (new Error(\"Map cannot be mutated\"));\r\n        return false;\r\n    }\r\n    entries() {\r\n        const m = this;\r\n        return map_1((p) => [p[0], p[1]], m);\r\n    }\r\n    get(k) {\r\n        const m = this;\r\n        return FSharpMap__get_Item(m, k);\r\n    }\r\n    has(k) {\r\n        const m = this;\r\n        return FSharpMap__ContainsKey(m, k);\r\n    }\r\n    keys() {\r\n        const m = this;\r\n        return map_1((p) => p[0], m);\r\n    }\r\n    set(k, v) {\r\n        const m = this;\r\n        throw (new Error(\"Map cannot be mutated\"));\r\n        return m;\r\n    }\r\n    values() {\r\n        const m = this;\r\n        return map_1((p) => p[1], m);\r\n    }\r\n    forEach(f, thisArg) {\r\n        const m = this;\r\n        iterate_1((p) => {\r\n            f(p[1], p[0], m);\r\n        }, m);\r\n    }\r\n}\r\n\r\nexport function FSharpMap$reflection(gen0, gen1) {\r\n    return class_type(\"Map.FSharpMap\", [gen0, gen1], FSharpMap);\r\n}\r\n\r\nexport function FSharpMap_$ctor(comparer, tree) {\r\n    return new FSharpMap(comparer, tree);\r\n}\r\n\r\n(() => {\r\n    FSharpMap.empty = FSharpMap_$ctor(LanguagePrimitives_FastGenericComparer(), MapTreeModule_empty());\r\n})();\r\n\r\nexport function FSharpMap_get_Empty() {\r\n    return FSharpMap.empty;\r\n}\r\n\r\nexport function FSharpMap_Create(ie) {\r\n    const comparer = LanguagePrimitives_FastGenericComparer();\r\n    return FSharpMap_$ctor(comparer, MapTreeModule_ofSeq(comparer, ie));\r\n}\r\n\r\nexport function FSharpMap__get_Comparer(m) {\r\n    return m.comparer;\r\n}\r\n\r\nexport function FSharpMap__get_Tree(m) {\r\n    return m.tree;\r\n}\r\n\r\nexport function FSharpMap__Add(m, key, value) {\r\n    return FSharpMap_$ctor(m.comparer, MapTreeModule_add(m.comparer, key, value, m.tree));\r\n}\r\n\r\nexport function FSharpMap__Change(m, key, f) {\r\n    return FSharpMap_$ctor(m.comparer, MapTreeModule_change(m.comparer, key, f, m.tree));\r\n}\r\n\r\nexport function FSharpMap__get_IsEmpty(m) {\r\n    return m.tree == null;\r\n}\r\n\r\nexport function FSharpMap__get_Item(m, key) {\r\n    return MapTreeModule_find(m.comparer, key, m.tree);\r\n}\r\n\r\nexport function FSharpMap__TryPick(m, f) {\r\n    return MapTreeModule_tryPick(f, m.tree);\r\n}\r\n\r\nexport function FSharpMap__Exists(m, predicate) {\r\n    return MapTreeModule_exists(predicate, m.tree);\r\n}\r\n\r\nexport function FSharpMap__Filter(m, predicate) {\r\n    return FSharpMap_$ctor(m.comparer, MapTreeModule_filter(m.comparer, predicate, m.tree));\r\n}\r\n\r\nexport function FSharpMap__ForAll(m, predicate) {\r\n    return MapTreeModule_forall(predicate, m.tree);\r\n}\r\n\r\nexport function FSharpMap__Fold(m, f, acc) {\r\n    return MapTreeModule_foldBack(f, m.tree, acc);\r\n}\r\n\r\nexport function FSharpMap__FoldSection(m, lo, hi, f, acc) {\r\n    return MapTreeModule_foldSection(m.comparer, lo, hi, f, m.tree, acc);\r\n}\r\n\r\nexport function FSharpMap__Iterate(m, f) {\r\n    MapTreeModule_iter(f, m.tree);\r\n}\r\n\r\nexport function FSharpMap__MapRange(m, f) {\r\n    return FSharpMap_$ctor(m.comparer, MapTreeModule_map(f, m.tree));\r\n}\r\n\r\nexport function FSharpMap__Map(m, f) {\r\n    return FSharpMap_$ctor(m.comparer, MapTreeModule_mapi(f, m.tree));\r\n}\r\n\r\nexport function FSharpMap__Partition(m, predicate) {\r\n    const patternInput = MapTreeModule_partition(m.comparer, predicate, m.tree);\r\n    return [FSharpMap_$ctor(m.comparer, patternInput[0]), FSharpMap_$ctor(m.comparer, patternInput[1])];\r\n}\r\n\r\nexport function FSharpMap__get_Count(m) {\r\n    return MapTreeModule_size(m.tree);\r\n}\r\n\r\nexport function FSharpMap__ContainsKey(m, key) {\r\n    return MapTreeModule_mem(m.comparer, key, m.tree);\r\n}\r\n\r\nexport function FSharpMap__Remove(m, key) {\r\n    return FSharpMap_$ctor(m.comparer, MapTreeModule_remove(m.comparer, key, m.tree));\r\n}\r\n\r\nexport function FSharpMap__TryGetValue(__, key, value) {\r\n    const matchValue = MapTreeModule_tryFind(__.comparer, key, __.tree);\r\n    if (matchValue == null) {\r\n        return false;\r\n    }\r\n    else {\r\n        const v = value_1(matchValue);\r\n        value.contents = v;\r\n        return true;\r\n    }\r\n}\r\n\r\nexport function FSharpMap__TryFind(m, key) {\r\n    return MapTreeModule_tryFind(m.comparer, key, m.tree);\r\n}\r\n\r\nexport function FSharpMap__ToList(m) {\r\n    return MapTreeModule_toList(m.tree);\r\n}\r\n\r\nexport function FSharpMap__ToArray(m) {\r\n    return MapTreeModule_toArray(m.tree);\r\n}\r\n\r\nexport function FSharpMap__ComputeHashCode(this$) {\r\n    const combineHash = (x, y) => (((x << 1) + y) + 631);\r\n    let res = 0;\r\n    const enumerator = getEnumerator(this$);\r\n    try {\r\n        while (enumerator[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n            const activePatternResult5329 = enumerator[\"System.Collections.Generic.IEnumerator`1.get_Current\"]();\r\n            res = (combineHash(res, structuralHash(activePatternResult5329[0])) | 0);\r\n            res = (combineHash(res, structuralHash(activePatternResult5329[1])) | 0);\r\n        }\r\n    }\r\n    finally {\r\n        enumerator.Dispose();\r\n    }\r\n    return res | 0;\r\n}\r\n\r\nexport function isEmpty(table) {\r\n    return FSharpMap__get_IsEmpty(table);\r\n}\r\n\r\nexport function add(key, value, table) {\r\n    return FSharpMap__Add(table, key, value);\r\n}\r\n\r\nexport function change(key, f, table) {\r\n    return FSharpMap__Change(table, key, f);\r\n}\r\n\r\nexport function find(key, table) {\r\n    return FSharpMap__get_Item(table, key);\r\n}\r\n\r\nexport function tryFind(key, table) {\r\n    return FSharpMap__TryFind(table, key);\r\n}\r\n\r\nexport function remove(key, table) {\r\n    return FSharpMap__Remove(table, key);\r\n}\r\n\r\nexport function containsKey(key, table) {\r\n    return FSharpMap__ContainsKey(table, key);\r\n}\r\n\r\nexport function iterate(action, table) {\r\n    FSharpMap__Iterate(table, action);\r\n}\r\n\r\nexport function tryPick(chooser, table) {\r\n    return FSharpMap__TryPick(table, chooser);\r\n}\r\n\r\nexport function pick(chooser, table) {\r\n    const matchValue = tryPick(chooser, table);\r\n    if (matchValue != null) {\r\n        return value_1(matchValue);\r\n    }\r\n    else {\r\n        throw (new Error());\r\n    }\r\n}\r\n\r\nexport function exists(predicate, table) {\r\n    return FSharpMap__Exists(table, predicate);\r\n}\r\n\r\nexport function filter(predicate, table) {\r\n    return FSharpMap__Filter(table, predicate);\r\n}\r\n\r\nexport function partition(predicate, table) {\r\n    return FSharpMap__Partition(table, predicate);\r\n}\r\n\r\nexport function forAll(predicate, table) {\r\n    return FSharpMap__ForAll(table, predicate);\r\n}\r\n\r\nexport function map(mapping, table) {\r\n    return FSharpMap__Map(table, mapping);\r\n}\r\n\r\nexport function fold(folder, state, table) {\r\n    return MapTreeModule_fold(folder, state, FSharpMap__get_Tree(table));\r\n}\r\n\r\nexport function foldBack(folder, table, state) {\r\n    return MapTreeModule_foldBack(folder, FSharpMap__get_Tree(table), state);\r\n}\r\n\r\nexport function toSeq(table) {\r\n    return map_1((kvp) => [kvp[0], kvp[1]], table);\r\n}\r\n\r\nexport function findKey(predicate, table) {\r\n    return pick_1((kvp) => {\r\n        const k = kvp[0];\r\n        if (predicate(k, kvp[1])) {\r\n            return some(k);\r\n        }\r\n        else {\r\n            return void 0;\r\n        }\r\n    }, table);\r\n}\r\n\r\nexport function tryFindKey(predicate, table) {\r\n    return tryPick_1((kvp) => {\r\n        const k = kvp[0];\r\n        if (predicate(k, kvp[1])) {\r\n            return some(k);\r\n        }\r\n        else {\r\n            return void 0;\r\n        }\r\n    }, table);\r\n}\r\n\r\nexport function ofList(elements) {\r\n    return FSharpMap_Create(elements);\r\n}\r\n\r\nexport function ofSeq(elements) {\r\n    return FSharpMap_Create(elements);\r\n}\r\n\r\nexport function ofArray(elements) {\r\n    const comparer = LanguagePrimitives_FastGenericComparer();\r\n    return FSharpMap_$ctor(comparer, MapTreeModule_ofArray(comparer, elements));\r\n}\r\n\r\nexport function toList(table) {\r\n    return FSharpMap__ToList(table);\r\n}\r\n\r\nexport function toArray(table) {\r\n    return FSharpMap__ToArray(table);\r\n}\r\n\r\nexport function empty() {\r\n    return FSharpMap_get_Empty();\r\n}\r\n\r\nexport function count(table) {\r\n    return FSharpMap__get_Count(table);\r\n}\r\n\r\n","import { record_type, bool_type, list_type, option_type, class_type } from \"./Reflection.js\";\r\nimport { some, value as value_1 } from \"./Option.js\";\r\nimport { toString, Record } from \"./Types.js\";\r\nimport { FSharpList, fold as fold_2, cons, singleton as singleton_1, empty as empty_1, ofArrayWithTail, tail, head, isEmpty as isEmpty_1 } from \"./List.js\";\r\nimport { fold as fold_1, fill } from \"./Array.js\";\r\nimport { structuralHash, toIterator, getEnumerator, isArrayLike } from \"./Util.js\";\r\nimport { join } from \"./String.js\";\r\nimport { fold as fold_3, reduce, iterate as iterate_1, map as map_1 } from \"./Seq.js\";\r\n\r\nexport class SetTreeLeaf$1 {\r\n    constructor(k) {\r\n        this.k = k;\r\n    }\r\n}\r\n\r\nexport function SetTreeLeaf$1$reflection(gen0) {\r\n    return class_type(\"Set.SetTreeLeaf`1\", [gen0], SetTreeLeaf$1);\r\n}\r\n\r\nexport function SetTreeLeaf$1_$ctor_2B595(k) {\r\n    return new SetTreeLeaf$1(k);\r\n}\r\n\r\nexport function SetTreeLeaf$1__get_Key(_) {\r\n    return _.k;\r\n}\r\n\r\nexport class SetTreeNode$1 extends SetTreeLeaf$1 {\r\n    constructor(v, left, right, h) {\r\n        super(v);\r\n        this.left = left;\r\n        this.right = right;\r\n        this.h = (h | 0);\r\n    }\r\n}\r\n\r\nexport function SetTreeNode$1$reflection(gen0) {\r\n    return class_type(\"Set.SetTreeNode`1\", [gen0], SetTreeNode$1, SetTreeLeaf$1$reflection(gen0));\r\n}\r\n\r\nexport function SetTreeNode$1_$ctor_Z6E7BE5F7(v, left, right, h) {\r\n    return new SetTreeNode$1(v, left, right, h);\r\n}\r\n\r\nexport function SetTreeNode$1__get_Left(_) {\r\n    return _.left;\r\n}\r\n\r\nexport function SetTreeNode$1__get_Right(_) {\r\n    return _.right;\r\n}\r\n\r\nexport function SetTreeNode$1__get_Height(_) {\r\n    return _.h;\r\n}\r\n\r\nexport function SetTreeModule_empty() {\r\n    return void 0;\r\n}\r\n\r\nexport function SetTreeModule_countAux(t_mut, acc_mut) {\r\n    SetTreeModule_countAux:\r\n    while (true) {\r\n        const t = t_mut, acc = acc_mut;\r\n        if (t != null) {\r\n            const t2 = t;\r\n            if (t2 instanceof SetTreeNode$1) {\r\n                t_mut = SetTreeNode$1__get_Left(t2);\r\n                acc_mut = SetTreeModule_countAux(SetTreeNode$1__get_Right(t2), acc + 1);\r\n                continue SetTreeModule_countAux;\r\n            }\r\n            else {\r\n                return (acc + 1) | 0;\r\n            }\r\n        }\r\n        else {\r\n            return acc | 0;\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function SetTreeModule_count(s) {\r\n    return SetTreeModule_countAux(s, 0);\r\n}\r\n\r\nexport function SetTreeModule_mk(l, k, r) {\r\n    let hl;\r\n    const t = l;\r\n    if (t != null) {\r\n        const t2 = t;\r\n        hl = ((t2 instanceof SetTreeNode$1) ? SetTreeNode$1__get_Height(t2) : 1);\r\n    }\r\n    else {\r\n        hl = 0;\r\n    }\r\n    let hr;\r\n    const t_1 = r;\r\n    if (t_1 != null) {\r\n        const t2_1 = t_1;\r\n        hr = ((t2_1 instanceof SetTreeNode$1) ? SetTreeNode$1__get_Height(t2_1) : 1);\r\n    }\r\n    else {\r\n        hr = 0;\r\n    }\r\n    const m = ((hl < hr) ? hr : hl) | 0;\r\n    if (m === 0) {\r\n        return SetTreeLeaf$1_$ctor_2B595(k);\r\n    }\r\n    else {\r\n        return SetTreeNode$1_$ctor_Z6E7BE5F7(k, l, r, m + 1);\r\n    }\r\n}\r\n\r\nexport function SetTreeModule_rebalance(t1, v, t2) {\r\n    let t_2, t2_3, t_3, t2_4;\r\n    let t1h;\r\n    const t = t1;\r\n    if (t != null) {\r\n        const t2_1 = t;\r\n        t1h = ((t2_1 instanceof SetTreeNode$1) ? SetTreeNode$1__get_Height(t2_1) : 1);\r\n    }\r\n    else {\r\n        t1h = 0;\r\n    }\r\n    let t2h;\r\n    const t_1 = t2;\r\n    if (t_1 != null) {\r\n        const t2_2 = t_1;\r\n        t2h = ((t2_2 instanceof SetTreeNode$1) ? SetTreeNode$1__get_Height(t2_2) : 1);\r\n    }\r\n    else {\r\n        t2h = 0;\r\n    }\r\n    if (t2h > (t1h + 2)) {\r\n        const matchValue = value_1(t2);\r\n        if (matchValue instanceof SetTreeNode$1) {\r\n            if (((t_2 = SetTreeNode$1__get_Left(matchValue), (t_2 != null) ? ((t2_3 = t_2, (t2_3 instanceof SetTreeNode$1) ? SetTreeNode$1__get_Height(t2_3) : 1)) : 0)) > (t1h + 1)) {\r\n                const matchValue_1 = value_1(SetTreeNode$1__get_Left(matchValue));\r\n                if (matchValue_1 instanceof SetTreeNode$1) {\r\n                    return SetTreeModule_mk(SetTreeModule_mk(t1, v, SetTreeNode$1__get_Left(matchValue_1)), SetTreeLeaf$1__get_Key(matchValue_1), SetTreeModule_mk(SetTreeNode$1__get_Right(matchValue_1), SetTreeLeaf$1__get_Key(matchValue), SetTreeNode$1__get_Right(matchValue)));\r\n                }\r\n                else {\r\n                    throw (new Error(\"internal error: Set.rebalance\"));\r\n                }\r\n            }\r\n            else {\r\n                return SetTreeModule_mk(SetTreeModule_mk(t1, v, SetTreeNode$1__get_Left(matchValue)), SetTreeLeaf$1__get_Key(matchValue), SetTreeNode$1__get_Right(matchValue));\r\n            }\r\n        }\r\n        else {\r\n            throw (new Error(\"internal error: Set.rebalance\"));\r\n        }\r\n    }\r\n    else if (t1h > (t2h + 2)) {\r\n        const matchValue_2 = value_1(t1);\r\n        if (matchValue_2 instanceof SetTreeNode$1) {\r\n            if (((t_3 = SetTreeNode$1__get_Right(matchValue_2), (t_3 != null) ? ((t2_4 = t_3, (t2_4 instanceof SetTreeNode$1) ? SetTreeNode$1__get_Height(t2_4) : 1)) : 0)) > (t2h + 1)) {\r\n                const matchValue_3 = value_1(SetTreeNode$1__get_Right(matchValue_2));\r\n                if (matchValue_3 instanceof SetTreeNode$1) {\r\n                    return SetTreeModule_mk(SetTreeModule_mk(SetTreeNode$1__get_Left(matchValue_2), SetTreeLeaf$1__get_Key(matchValue_2), SetTreeNode$1__get_Left(matchValue_3)), SetTreeLeaf$1__get_Key(matchValue_3), SetTreeModule_mk(SetTreeNode$1__get_Right(matchValue_3), v, t2));\r\n                }\r\n                else {\r\n                    throw (new Error(\"internal error: Set.rebalance\"));\r\n                }\r\n            }\r\n            else {\r\n                return SetTreeModule_mk(SetTreeNode$1__get_Left(matchValue_2), SetTreeLeaf$1__get_Key(matchValue_2), SetTreeModule_mk(SetTreeNode$1__get_Right(matchValue_2), v, t2));\r\n            }\r\n        }\r\n        else {\r\n            throw (new Error(\"internal error: Set.rebalance\"));\r\n        }\r\n    }\r\n    else {\r\n        return SetTreeModule_mk(t1, v, t2);\r\n    }\r\n}\r\n\r\nexport function SetTreeModule_add(comparer, k, t) {\r\n    if (t != null) {\r\n        const t2 = t;\r\n        const c = comparer.Compare(k, SetTreeLeaf$1__get_Key(t2)) | 0;\r\n        if (t2 instanceof SetTreeNode$1) {\r\n            if (c < 0) {\r\n                return SetTreeModule_rebalance(SetTreeModule_add(comparer, k, SetTreeNode$1__get_Left(t2)), SetTreeLeaf$1__get_Key(t2), SetTreeNode$1__get_Right(t2));\r\n            }\r\n            else if (c === 0) {\r\n                return t;\r\n            }\r\n            else {\r\n                return SetTreeModule_rebalance(SetTreeNode$1__get_Left(t2), SetTreeLeaf$1__get_Key(t2), SetTreeModule_add(comparer, k, SetTreeNode$1__get_Right(t2)));\r\n            }\r\n        }\r\n        else {\r\n            const c_1 = comparer.Compare(k, SetTreeLeaf$1__get_Key(t2)) | 0;\r\n            if (c_1 < 0) {\r\n                return SetTreeNode$1_$ctor_Z6E7BE5F7(k, SetTreeModule_empty(), t, 2);\r\n            }\r\n            else if (c_1 === 0) {\r\n                return t;\r\n            }\r\n            else {\r\n                return SetTreeNode$1_$ctor_Z6E7BE5F7(k, t, SetTreeModule_empty(), 2);\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        return SetTreeLeaf$1_$ctor_2B595(k);\r\n    }\r\n}\r\n\r\nexport function SetTreeModule_balance(comparer, t1, k, t2) {\r\n    if (t1 != null) {\r\n        const t1$0027 = t1;\r\n        if (t2 != null) {\r\n            const t2$0027 = t2;\r\n            if (t1$0027 instanceof SetTreeNode$1) {\r\n                if (t2$0027 instanceof SetTreeNode$1) {\r\n                    if ((SetTreeNode$1__get_Height(t1$0027) + 2) < SetTreeNode$1__get_Height(t2$0027)) {\r\n                        return SetTreeModule_rebalance(SetTreeModule_balance(comparer, t1, k, SetTreeNode$1__get_Left(t2$0027)), SetTreeLeaf$1__get_Key(t2$0027), SetTreeNode$1__get_Right(t2$0027));\r\n                    }\r\n                    else if ((SetTreeNode$1__get_Height(t2$0027) + 2) < SetTreeNode$1__get_Height(t1$0027)) {\r\n                        return SetTreeModule_rebalance(SetTreeNode$1__get_Left(t1$0027), SetTreeLeaf$1__get_Key(t1$0027), SetTreeModule_balance(comparer, SetTreeNode$1__get_Right(t1$0027), k, t2));\r\n                    }\r\n                    else {\r\n                        return SetTreeModule_mk(t1, k, t2);\r\n                    }\r\n                }\r\n                else {\r\n                    return SetTreeModule_add(comparer, k, SetTreeModule_add(comparer, SetTreeLeaf$1__get_Key(t2$0027), t1));\r\n                }\r\n            }\r\n            else {\r\n                return SetTreeModule_add(comparer, k, SetTreeModule_add(comparer, SetTreeLeaf$1__get_Key(t1$0027), t2));\r\n            }\r\n        }\r\n        else {\r\n            return SetTreeModule_add(comparer, k, t1);\r\n        }\r\n    }\r\n    else {\r\n        return SetTreeModule_add(comparer, k, t2);\r\n    }\r\n}\r\n\r\nexport function SetTreeModule_split(comparer, pivot, t) {\r\n    if (t != null) {\r\n        const t2 = t;\r\n        if (t2 instanceof SetTreeNode$1) {\r\n            const c = comparer.Compare(pivot, SetTreeLeaf$1__get_Key(t2)) | 0;\r\n            if (c < 0) {\r\n                const patternInput = SetTreeModule_split(comparer, pivot, SetTreeNode$1__get_Left(t2));\r\n                return [patternInput[0], patternInput[1], SetTreeModule_balance(comparer, patternInput[2], SetTreeLeaf$1__get_Key(t2), SetTreeNode$1__get_Right(t2))];\r\n            }\r\n            else if (c === 0) {\r\n                return [SetTreeNode$1__get_Left(t2), true, SetTreeNode$1__get_Right(t2)];\r\n            }\r\n            else {\r\n                const patternInput_1 = SetTreeModule_split(comparer, pivot, SetTreeNode$1__get_Right(t2));\r\n                return [SetTreeModule_balance(comparer, SetTreeNode$1__get_Left(t2), SetTreeLeaf$1__get_Key(t2), patternInput_1[0]), patternInput_1[1], patternInput_1[2]];\r\n            }\r\n        }\r\n        else {\r\n            const c_1 = comparer.Compare(SetTreeLeaf$1__get_Key(t2), pivot) | 0;\r\n            if (c_1 < 0) {\r\n                return [t, false, SetTreeModule_empty()];\r\n            }\r\n            else if (c_1 === 0) {\r\n                return [SetTreeModule_empty(), true, SetTreeModule_empty()];\r\n            }\r\n            else {\r\n                return [SetTreeModule_empty(), false, t];\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        return [SetTreeModule_empty(), false, SetTreeModule_empty()];\r\n    }\r\n}\r\n\r\nexport function SetTreeModule_spliceOutSuccessor(t) {\r\n    if (t != null) {\r\n        const t2 = t;\r\n        if (t2 instanceof SetTreeNode$1) {\r\n            if (SetTreeNode$1__get_Left(t2) == null) {\r\n                return [SetTreeLeaf$1__get_Key(t2), SetTreeNode$1__get_Right(t2)];\r\n            }\r\n            else {\r\n                const patternInput = SetTreeModule_spliceOutSuccessor(SetTreeNode$1__get_Left(t2));\r\n                return [patternInput[0], SetTreeModule_mk(patternInput[1], SetTreeLeaf$1__get_Key(t2), SetTreeNode$1__get_Right(t2))];\r\n            }\r\n        }\r\n        else {\r\n            return [SetTreeLeaf$1__get_Key(t2), SetTreeModule_empty()];\r\n        }\r\n    }\r\n    else {\r\n        throw (new Error(\"internal error: Set.spliceOutSuccessor\"));\r\n    }\r\n}\r\n\r\nexport function SetTreeModule_remove(comparer, k, t) {\r\n    if (t != null) {\r\n        const t2 = t;\r\n        const c = comparer.Compare(k, SetTreeLeaf$1__get_Key(t2)) | 0;\r\n        if (t2 instanceof SetTreeNode$1) {\r\n            if (c < 0) {\r\n                return SetTreeModule_rebalance(SetTreeModule_remove(comparer, k, SetTreeNode$1__get_Left(t2)), SetTreeLeaf$1__get_Key(t2), SetTreeNode$1__get_Right(t2));\r\n            }\r\n            else if (c === 0) {\r\n                if (SetTreeNode$1__get_Left(t2) == null) {\r\n                    return SetTreeNode$1__get_Right(t2);\r\n                }\r\n                else if (SetTreeNode$1__get_Right(t2) == null) {\r\n                    return SetTreeNode$1__get_Left(t2);\r\n                }\r\n                else {\r\n                    const patternInput = SetTreeModule_spliceOutSuccessor(SetTreeNode$1__get_Right(t2));\r\n                    return SetTreeModule_mk(SetTreeNode$1__get_Left(t2), patternInput[0], patternInput[1]);\r\n                }\r\n            }\r\n            else {\r\n                return SetTreeModule_rebalance(SetTreeNode$1__get_Left(t2), SetTreeLeaf$1__get_Key(t2), SetTreeModule_remove(comparer, k, SetTreeNode$1__get_Right(t2)));\r\n            }\r\n        }\r\n        else if (c === 0) {\r\n            return SetTreeModule_empty();\r\n        }\r\n        else {\r\n            return t;\r\n        }\r\n    }\r\n    else {\r\n        return t;\r\n    }\r\n}\r\n\r\nexport function SetTreeModule_mem(comparer_mut, k_mut, t_mut) {\r\n    SetTreeModule_mem:\r\n    while (true) {\r\n        const comparer = comparer_mut, k = k_mut, t = t_mut;\r\n        if (t != null) {\r\n            const t2 = t;\r\n            const c = comparer.Compare(k, SetTreeLeaf$1__get_Key(t2)) | 0;\r\n            if (t2 instanceof SetTreeNode$1) {\r\n                if (c < 0) {\r\n                    comparer_mut = comparer;\r\n                    k_mut = k;\r\n                    t_mut = SetTreeNode$1__get_Left(t2);\r\n                    continue SetTreeModule_mem;\r\n                }\r\n                else if (c === 0) {\r\n                    return true;\r\n                }\r\n                else {\r\n                    comparer_mut = comparer;\r\n                    k_mut = k;\r\n                    t_mut = SetTreeNode$1__get_Right(t2);\r\n                    continue SetTreeModule_mem;\r\n                }\r\n            }\r\n            else {\r\n                return c === 0;\r\n            }\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function SetTreeModule_iter(f_mut, t_mut) {\r\n    SetTreeModule_iter:\r\n    while (true) {\r\n        const f = f_mut, t = t_mut;\r\n        if (t != null) {\r\n            const t2 = t;\r\n            if (t2 instanceof SetTreeNode$1) {\r\n                SetTreeModule_iter(f, SetTreeNode$1__get_Left(t2));\r\n                f(SetTreeLeaf$1__get_Key(t2));\r\n                f_mut = f;\r\n                t_mut = SetTreeNode$1__get_Right(t2);\r\n                continue SetTreeModule_iter;\r\n            }\r\n            else {\r\n                f(SetTreeLeaf$1__get_Key(t2));\r\n            }\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function SetTreeModule_foldBackOpt(f_mut, t_mut, x_mut) {\r\n    SetTreeModule_foldBackOpt:\r\n    while (true) {\r\n        const f = f_mut, t = t_mut, x = x_mut;\r\n        if (t != null) {\r\n            const t2 = t;\r\n            if (t2 instanceof SetTreeNode$1) {\r\n                f_mut = f;\r\n                t_mut = SetTreeNode$1__get_Left(t2);\r\n                x_mut = f(SetTreeLeaf$1__get_Key(t2), SetTreeModule_foldBackOpt(f, SetTreeNode$1__get_Right(t2), x));\r\n                continue SetTreeModule_foldBackOpt;\r\n            }\r\n            else {\r\n                return f(SetTreeLeaf$1__get_Key(t2), x);\r\n            }\r\n        }\r\n        else {\r\n            return x;\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function SetTreeModule_foldBack(f, m, x) {\r\n    return SetTreeModule_foldBackOpt(f, m, x);\r\n}\r\n\r\nexport function SetTreeModule_foldOpt(f_mut, x_mut, t_mut) {\r\n    SetTreeModule_foldOpt:\r\n    while (true) {\r\n        const f = f_mut, x = x_mut, t = t_mut;\r\n        if (t != null) {\r\n            const t2 = t;\r\n            if (t2 instanceof SetTreeNode$1) {\r\n                f_mut = f;\r\n                x_mut = f(SetTreeModule_foldOpt(f, x, SetTreeNode$1__get_Left(t2)), SetTreeLeaf$1__get_Key(t2));\r\n                t_mut = SetTreeNode$1__get_Right(t2);\r\n                continue SetTreeModule_foldOpt;\r\n            }\r\n            else {\r\n                return f(x, SetTreeLeaf$1__get_Key(t2));\r\n            }\r\n        }\r\n        else {\r\n            return x;\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function SetTreeModule_fold(f, x, m) {\r\n    return SetTreeModule_foldOpt(f, x, m);\r\n}\r\n\r\nexport function SetTreeModule_forall(f_mut, t_mut) {\r\n    SetTreeModule_forall:\r\n    while (true) {\r\n        const f = f_mut, t = t_mut;\r\n        if (t != null) {\r\n            const t2 = t;\r\n            if (t2 instanceof SetTreeNode$1) {\r\n                if (f(SetTreeLeaf$1__get_Key(t2)) ? SetTreeModule_forall(f, SetTreeNode$1__get_Left(t2)) : false) {\r\n                    f_mut = f;\r\n                    t_mut = SetTreeNode$1__get_Right(t2);\r\n                    continue SetTreeModule_forall;\r\n                }\r\n                else {\r\n                    return false;\r\n                }\r\n            }\r\n            else {\r\n                return f(SetTreeLeaf$1__get_Key(t2));\r\n            }\r\n        }\r\n        else {\r\n            return true;\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function SetTreeModule_exists(f_mut, t_mut) {\r\n    SetTreeModule_exists:\r\n    while (true) {\r\n        const f = f_mut, t = t_mut;\r\n        if (t != null) {\r\n            const t2 = t;\r\n            if (t2 instanceof SetTreeNode$1) {\r\n                if (f(SetTreeLeaf$1__get_Key(t2)) ? true : SetTreeModule_exists(f, SetTreeNode$1__get_Left(t2))) {\r\n                    return true;\r\n                }\r\n                else {\r\n                    f_mut = f;\r\n                    t_mut = SetTreeNode$1__get_Right(t2);\r\n                    continue SetTreeModule_exists;\r\n                }\r\n            }\r\n            else {\r\n                return f(SetTreeLeaf$1__get_Key(t2));\r\n            }\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function SetTreeModule_subset(comparer, a, b) {\r\n    return SetTreeModule_forall((x) => SetTreeModule_mem(comparer, x, b), a);\r\n}\r\n\r\nexport function SetTreeModule_properSubset(comparer, a, b) {\r\n    if (SetTreeModule_forall((x) => SetTreeModule_mem(comparer, x, b), a)) {\r\n        return SetTreeModule_exists((x_1) => (!SetTreeModule_mem(comparer, x_1, a)), b);\r\n    }\r\n    else {\r\n        return false;\r\n    }\r\n}\r\n\r\nexport function SetTreeModule_filterAux(comparer_mut, f_mut, t_mut, acc_mut) {\r\n    SetTreeModule_filterAux:\r\n    while (true) {\r\n        const comparer = comparer_mut, f = f_mut, t = t_mut, acc = acc_mut;\r\n        if (t != null) {\r\n            const t2 = t;\r\n            if (t2 instanceof SetTreeNode$1) {\r\n                const acc_1 = f(SetTreeLeaf$1__get_Key(t2)) ? SetTreeModule_add(comparer, SetTreeLeaf$1__get_Key(t2), acc) : acc;\r\n                comparer_mut = comparer;\r\n                f_mut = f;\r\n                t_mut = SetTreeNode$1__get_Left(t2);\r\n                acc_mut = SetTreeModule_filterAux(comparer, f, SetTreeNode$1__get_Right(t2), acc_1);\r\n                continue SetTreeModule_filterAux;\r\n            }\r\n            else if (f(SetTreeLeaf$1__get_Key(t2))) {\r\n                return SetTreeModule_add(comparer, SetTreeLeaf$1__get_Key(t2), acc);\r\n            }\r\n            else {\r\n                return acc;\r\n            }\r\n        }\r\n        else {\r\n            return acc;\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function SetTreeModule_filter(comparer, f, s) {\r\n    return SetTreeModule_filterAux(comparer, f, s, SetTreeModule_empty());\r\n}\r\n\r\nexport function SetTreeModule_diffAux(comparer_mut, t_mut, acc_mut) {\r\n    SetTreeModule_diffAux:\r\n    while (true) {\r\n        const comparer = comparer_mut, t = t_mut, acc = acc_mut;\r\n        if (acc == null) {\r\n            return acc;\r\n        }\r\n        else if (t != null) {\r\n            const t2 = t;\r\n            if (t2 instanceof SetTreeNode$1) {\r\n                comparer_mut = comparer;\r\n                t_mut = SetTreeNode$1__get_Left(t2);\r\n                acc_mut = SetTreeModule_diffAux(comparer, SetTreeNode$1__get_Right(t2), SetTreeModule_remove(comparer, SetTreeLeaf$1__get_Key(t2), acc));\r\n                continue SetTreeModule_diffAux;\r\n            }\r\n            else {\r\n                return SetTreeModule_remove(comparer, SetTreeLeaf$1__get_Key(t2), acc);\r\n            }\r\n        }\r\n        else {\r\n            return acc;\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function SetTreeModule_diff(comparer, a, b) {\r\n    return SetTreeModule_diffAux(comparer, b, a);\r\n}\r\n\r\nexport function SetTreeModule_union(comparer, t1, t2) {\r\n    if (t1 != null) {\r\n        const t1$0027 = t1;\r\n        if (t2 != null) {\r\n            const t2$0027 = t2;\r\n            if (t1$0027 instanceof SetTreeNode$1) {\r\n                if (t2$0027 instanceof SetTreeNode$1) {\r\n                    if (SetTreeNode$1__get_Height(t1$0027) > SetTreeNode$1__get_Height(t2$0027)) {\r\n                        const patternInput = SetTreeModule_split(comparer, SetTreeLeaf$1__get_Key(t1$0027), t2);\r\n                        return SetTreeModule_balance(comparer, SetTreeModule_union(comparer, SetTreeNode$1__get_Left(t1$0027), patternInput[0]), SetTreeLeaf$1__get_Key(t1$0027), SetTreeModule_union(comparer, SetTreeNode$1__get_Right(t1$0027), patternInput[2]));\r\n                    }\r\n                    else {\r\n                        const patternInput_1 = SetTreeModule_split(comparer, SetTreeLeaf$1__get_Key(t2$0027), t1);\r\n                        return SetTreeModule_balance(comparer, SetTreeModule_union(comparer, SetTreeNode$1__get_Left(t2$0027), patternInput_1[0]), SetTreeLeaf$1__get_Key(t2$0027), SetTreeModule_union(comparer, SetTreeNode$1__get_Right(t2$0027), patternInput_1[2]));\r\n                    }\r\n                }\r\n                else {\r\n                    return SetTreeModule_add(comparer, SetTreeLeaf$1__get_Key(t2$0027), t1);\r\n                }\r\n            }\r\n            else {\r\n                return SetTreeModule_add(comparer, SetTreeLeaf$1__get_Key(t1$0027), t2);\r\n            }\r\n        }\r\n        else {\r\n            return t1;\r\n        }\r\n    }\r\n    else {\r\n        return t2;\r\n    }\r\n}\r\n\r\nexport function SetTreeModule_intersectionAux(comparer_mut, b_mut, t_mut, acc_mut) {\r\n    SetTreeModule_intersectionAux:\r\n    while (true) {\r\n        const comparer = comparer_mut, b = b_mut, t = t_mut, acc = acc_mut;\r\n        if (t != null) {\r\n            const t2 = t;\r\n            if (t2 instanceof SetTreeNode$1) {\r\n                const acc_1 = SetTreeModule_intersectionAux(comparer, b, SetTreeNode$1__get_Right(t2), acc);\r\n                const acc_2 = SetTreeModule_mem(comparer, SetTreeLeaf$1__get_Key(t2), b) ? SetTreeModule_add(comparer, SetTreeLeaf$1__get_Key(t2), acc_1) : acc_1;\r\n                comparer_mut = comparer;\r\n                b_mut = b;\r\n                t_mut = SetTreeNode$1__get_Left(t2);\r\n                acc_mut = acc_2;\r\n                continue SetTreeModule_intersectionAux;\r\n            }\r\n            else if (SetTreeModule_mem(comparer, SetTreeLeaf$1__get_Key(t2), b)) {\r\n                return SetTreeModule_add(comparer, SetTreeLeaf$1__get_Key(t2), acc);\r\n            }\r\n            else {\r\n                return acc;\r\n            }\r\n        }\r\n        else {\r\n            return acc;\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function SetTreeModule_intersection(comparer, a, b) {\r\n    return SetTreeModule_intersectionAux(comparer, b, a, SetTreeModule_empty());\r\n}\r\n\r\nexport function SetTreeModule_partition1(comparer, f, k, acc1, acc2) {\r\n    if (f(k)) {\r\n        return [SetTreeModule_add(comparer, k, acc1), acc2];\r\n    }\r\n    else {\r\n        return [acc1, SetTreeModule_add(comparer, k, acc2)];\r\n    }\r\n}\r\n\r\nexport function SetTreeModule_partitionAux(comparer_mut, f_mut, t_mut, acc_0_mut, acc_1_mut) {\r\n    SetTreeModule_partitionAux:\r\n    while (true) {\r\n        const comparer = comparer_mut, f = f_mut, t = t_mut, acc_0 = acc_0_mut, acc_1 = acc_1_mut;\r\n        const acc = [acc_0, acc_1];\r\n        if (t != null) {\r\n            const t2 = t;\r\n            if (t2 instanceof SetTreeNode$1) {\r\n                const acc_2 = SetTreeModule_partitionAux(comparer, f, SetTreeNode$1__get_Right(t2), acc[0], acc[1]);\r\n                const acc_3 = SetTreeModule_partition1(comparer, f, SetTreeLeaf$1__get_Key(t2), acc_2[0], acc_2[1]);\r\n                comparer_mut = comparer;\r\n                f_mut = f;\r\n                t_mut = SetTreeNode$1__get_Left(t2);\r\n                acc_0_mut = acc_3[0];\r\n                acc_1_mut = acc_3[1];\r\n                continue SetTreeModule_partitionAux;\r\n            }\r\n            else {\r\n                return SetTreeModule_partition1(comparer, f, SetTreeLeaf$1__get_Key(t2), acc[0], acc[1]);\r\n            }\r\n        }\r\n        else {\r\n            return acc;\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function SetTreeModule_partition(comparer, f, s) {\r\n    return SetTreeModule_partitionAux(comparer, f, s, SetTreeModule_empty(), SetTreeModule_empty());\r\n}\r\n\r\nexport function SetTreeModule_minimumElementAux(t_mut, n_mut) {\r\n    SetTreeModule_minimumElementAux:\r\n    while (true) {\r\n        const t = t_mut, n = n_mut;\r\n        if (t != null) {\r\n            const t2 = t;\r\n            if (t2 instanceof SetTreeNode$1) {\r\n                t_mut = SetTreeNode$1__get_Left(t2);\r\n                n_mut = SetTreeLeaf$1__get_Key(t2);\r\n                continue SetTreeModule_minimumElementAux;\r\n            }\r\n            else {\r\n                return SetTreeLeaf$1__get_Key(t2);\r\n            }\r\n        }\r\n        else {\r\n            return n;\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function SetTreeModule_minimumElementOpt(t) {\r\n    if (t != null) {\r\n        const t2 = t;\r\n        if (t2 instanceof SetTreeNode$1) {\r\n            return some(SetTreeModule_minimumElementAux(SetTreeNode$1__get_Left(t2), SetTreeLeaf$1__get_Key(t2)));\r\n        }\r\n        else {\r\n            return some(SetTreeLeaf$1__get_Key(t2));\r\n        }\r\n    }\r\n    else {\r\n        return void 0;\r\n    }\r\n}\r\n\r\nexport function SetTreeModule_maximumElementAux(t_mut, n_mut) {\r\n    SetTreeModule_maximumElementAux:\r\n    while (true) {\r\n        const t = t_mut, n = n_mut;\r\n        if (t != null) {\r\n            const t2 = t;\r\n            if (t2 instanceof SetTreeNode$1) {\r\n                t_mut = SetTreeNode$1__get_Right(t2);\r\n                n_mut = SetTreeLeaf$1__get_Key(t2);\r\n                continue SetTreeModule_maximumElementAux;\r\n            }\r\n            else {\r\n                return SetTreeLeaf$1__get_Key(t2);\r\n            }\r\n        }\r\n        else {\r\n            return n;\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function SetTreeModule_maximumElementOpt(t) {\r\n    if (t != null) {\r\n        const t2 = t;\r\n        if (t2 instanceof SetTreeNode$1) {\r\n            return some(SetTreeModule_maximumElementAux(SetTreeNode$1__get_Right(t2), SetTreeLeaf$1__get_Key(t2)));\r\n        }\r\n        else {\r\n            return some(SetTreeLeaf$1__get_Key(t2));\r\n        }\r\n    }\r\n    else {\r\n        return void 0;\r\n    }\r\n}\r\n\r\nexport function SetTreeModule_minimumElement(s) {\r\n    const matchValue = SetTreeModule_minimumElementOpt(s);\r\n    if (matchValue == null) {\r\n        throw (new Error(\"Set contains no elements\"));\r\n    }\r\n    else {\r\n        return value_1(matchValue);\r\n    }\r\n}\r\n\r\nexport function SetTreeModule_maximumElement(s) {\r\n    const matchValue = SetTreeModule_maximumElementOpt(s);\r\n    if (matchValue == null) {\r\n        throw (new Error(\"Set contains no elements\"));\r\n    }\r\n    else {\r\n        return value_1(matchValue);\r\n    }\r\n}\r\n\r\nexport class SetTreeModule_SetIterator$1 extends Record {\r\n    constructor(stack, started) {\r\n        super();\r\n        this.stack = stack;\r\n        this.started = started;\r\n    }\r\n}\r\n\r\nexport function SetTreeModule_SetIterator$1$reflection(gen0) {\r\n    return record_type(\"Set.SetTreeModule.SetIterator`1\", [gen0], SetTreeModule_SetIterator$1, () => [[\"stack\", list_type(option_type(SetTreeLeaf$1$reflection(gen0)))], [\"started\", bool_type]]);\r\n}\r\n\r\nexport function SetTreeModule_collapseLHS(stack_mut) {\r\n    SetTreeModule_collapseLHS:\r\n    while (true) {\r\n        const stack = stack_mut;\r\n        if (!isEmpty_1(stack)) {\r\n            const x = head(stack);\r\n            const rest = tail(stack);\r\n            if (x != null) {\r\n                const x2 = x;\r\n                if (x2 instanceof SetTreeNode$1) {\r\n                    stack_mut = ofArrayWithTail([SetTreeNode$1__get_Left(x2), SetTreeLeaf$1_$ctor_2B595(SetTreeLeaf$1__get_Key(x2)), SetTreeNode$1__get_Right(x2)], rest);\r\n                    continue SetTreeModule_collapseLHS;\r\n                }\r\n                else {\r\n                    return stack;\r\n                }\r\n            }\r\n            else {\r\n                stack_mut = rest;\r\n                continue SetTreeModule_collapseLHS;\r\n            }\r\n        }\r\n        else {\r\n            return empty_1();\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function SetTreeModule_mkIterator(s) {\r\n    return new SetTreeModule_SetIterator$1(SetTreeModule_collapseLHS(singleton_1(s)), false);\r\n}\r\n\r\nexport function SetTreeModule_notStarted() {\r\n    throw (new Error(\"Enumeration not started\"));\r\n}\r\n\r\nexport function SetTreeModule_alreadyFinished() {\r\n    throw (new Error(\"Enumeration already started\"));\r\n}\r\n\r\nexport function SetTreeModule_current(i) {\r\n    if (i.started) {\r\n        const matchValue = i.stack;\r\n        if (isEmpty_1(matchValue)) {\r\n            return SetTreeModule_alreadyFinished();\r\n        }\r\n        else if (head(matchValue) != null) {\r\n            const t = head(matchValue);\r\n            return SetTreeLeaf$1__get_Key(t);\r\n        }\r\n        else {\r\n            throw (new Error(\"Please report error: Set iterator, unexpected stack for current\"));\r\n        }\r\n    }\r\n    else {\r\n        return SetTreeModule_notStarted();\r\n    }\r\n}\r\n\r\nexport function SetTreeModule_moveNext(i) {\r\n    if (i.started) {\r\n        const matchValue = i.stack;\r\n        if (!isEmpty_1(matchValue)) {\r\n            if (head(matchValue) != null) {\r\n                const t = head(matchValue);\r\n                if (t instanceof SetTreeNode$1) {\r\n                    throw (new Error(\"Please report error: Set iterator, unexpected stack for moveNext\"));\r\n                }\r\n                else {\r\n                    i.stack = SetTreeModule_collapseLHS(tail(matchValue));\r\n                    return !isEmpty_1(i.stack);\r\n                }\r\n            }\r\n            else {\r\n                throw (new Error(\"Please report error: Set iterator, unexpected stack for moveNext\"));\r\n            }\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n    else {\r\n        i.started = true;\r\n        return !isEmpty_1(i.stack);\r\n    }\r\n}\r\n\r\nexport function SetTreeModule_mkIEnumerator(s) {\r\n    let i = SetTreeModule_mkIterator(s);\r\n    return {\r\n        [\"System.Collections.Generic.IEnumerator`1.get_Current\"]() {\r\n            return SetTreeModule_current(i);\r\n        },\r\n        [\"System.Collections.IEnumerator.get_Current\"]() {\r\n            return SetTreeModule_current(i);\r\n        },\r\n        [\"System.Collections.IEnumerator.MoveNext\"]() {\r\n            return SetTreeModule_moveNext(i);\r\n        },\r\n        [\"System.Collections.IEnumerator.Reset\"]() {\r\n            i = SetTreeModule_mkIterator(s);\r\n        },\r\n        Dispose() {\r\n        },\r\n    };\r\n}\r\n\r\nexport function SetTreeModule_compareStacks(comparer_mut, l1_mut, l2_mut) {\r\n    SetTreeModule_compareStacks:\r\n    while (true) {\r\n        const comparer = comparer_mut, l1 = l1_mut, l2 = l2_mut;\r\n        const matchValue = [l1, l2];\r\n        if (!isEmpty_1(matchValue[0])) {\r\n            if (!isEmpty_1(matchValue[1])) {\r\n                if (head(matchValue[1]) != null) {\r\n                    if (head(matchValue[0]) != null) {\r\n                        const x1_3 = head(matchValue[0]);\r\n                        const x2_3 = head(matchValue[1]);\r\n                        if (x1_3 instanceof SetTreeNode$1) {\r\n                            if (SetTreeNode$1__get_Left(x1_3) == null) {\r\n                                if (x2_3 instanceof SetTreeNode$1) {\r\n                                    if (SetTreeNode$1__get_Left(x2_3) == null) {\r\n                                        const c = comparer.Compare(SetTreeLeaf$1__get_Key(x1_3), SetTreeLeaf$1__get_Key(x2_3)) | 0;\r\n                                        if (c !== 0) {\r\n                                            return c | 0;\r\n                                        }\r\n                                        else {\r\n                                            comparer_mut = comparer;\r\n                                            l1_mut = cons(SetTreeNode$1__get_Right(x1_3), tail(matchValue[0]));\r\n                                            l2_mut = cons(SetTreeNode$1__get_Right(x2_3), tail(matchValue[1]));\r\n                                            continue SetTreeModule_compareStacks;\r\n                                        }\r\n                                    }\r\n                                    else {\r\n                                        const matchValue_3 = [l1, l2];\r\n                                        let pattern_matching_result, t1_6, x1_4, t2_6, x2_4;\r\n                                        if (!isEmpty_1(matchValue_3[0])) {\r\n                                            if (head(matchValue_3[0]) != null) {\r\n                                                pattern_matching_result = 0;\r\n                                                t1_6 = tail(matchValue_3[0]);\r\n                                                x1_4 = head(matchValue_3[0]);\r\n                                            }\r\n                                            else if (!isEmpty_1(matchValue_3[1])) {\r\n                                                if (head(matchValue_3[1]) != null) {\r\n                                                    pattern_matching_result = 1;\r\n                                                    t2_6 = tail(matchValue_3[1]);\r\n                                                    x2_4 = head(matchValue_3[1]);\r\n                                                }\r\n                                                else {\r\n                                                    pattern_matching_result = 2;\r\n                                                }\r\n                                            }\r\n                                            else {\r\n                                                pattern_matching_result = 2;\r\n                                            }\r\n                                        }\r\n                                        else if (!isEmpty_1(matchValue_3[1])) {\r\n                                            if (head(matchValue_3[1]) != null) {\r\n                                                pattern_matching_result = 1;\r\n                                                t2_6 = tail(matchValue_3[1]);\r\n                                                x2_4 = head(matchValue_3[1]);\r\n                                            }\r\n                                            else {\r\n                                                pattern_matching_result = 2;\r\n                                            }\r\n                                        }\r\n                                        else {\r\n                                            pattern_matching_result = 2;\r\n                                        }\r\n                                        switch (pattern_matching_result) {\r\n                                            case 0: {\r\n                                                if (x1_4 instanceof SetTreeNode$1) {\r\n                                                    comparer_mut = comparer;\r\n                                                    l1_mut = ofArrayWithTail([SetTreeNode$1__get_Left(x1_4), SetTreeNode$1_$ctor_Z6E7BE5F7(SetTreeLeaf$1__get_Key(x1_4), SetTreeModule_empty(), SetTreeNode$1__get_Right(x1_4), 0)], t1_6);\r\n                                                    l2_mut = l2;\r\n                                                    continue SetTreeModule_compareStacks;\r\n                                                }\r\n                                                else {\r\n                                                    comparer_mut = comparer;\r\n                                                    l1_mut = ofArrayWithTail([SetTreeModule_empty(), SetTreeLeaf$1_$ctor_2B595(SetTreeLeaf$1__get_Key(x1_4))], t1_6);\r\n                                                    l2_mut = l2;\r\n                                                    continue SetTreeModule_compareStacks;\r\n                                                }\r\n                                            }\r\n                                            case 1: {\r\n                                                if (x2_4 instanceof SetTreeNode$1) {\r\n                                                    comparer_mut = comparer;\r\n                                                    l1_mut = l1;\r\n                                                    l2_mut = ofArrayWithTail([SetTreeNode$1__get_Left(x2_4), SetTreeNode$1_$ctor_Z6E7BE5F7(SetTreeLeaf$1__get_Key(x2_4), SetTreeModule_empty(), SetTreeNode$1__get_Right(x2_4), 0)], t2_6);\r\n                                                    continue SetTreeModule_compareStacks;\r\n                                                }\r\n                                                else {\r\n                                                    comparer_mut = comparer;\r\n                                                    l1_mut = l1;\r\n                                                    l2_mut = ofArrayWithTail([SetTreeModule_empty(), SetTreeLeaf$1_$ctor_2B595(SetTreeLeaf$1__get_Key(x2_4))], t2_6);\r\n                                                    continue SetTreeModule_compareStacks;\r\n                                                }\r\n                                            }\r\n                                            case 2: {\r\n                                                throw (new Error(\"unexpected state in SetTree.compareStacks\"));\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n                                else {\r\n                                    const c_1 = comparer.Compare(SetTreeLeaf$1__get_Key(x1_3), SetTreeLeaf$1__get_Key(x2_3)) | 0;\r\n                                    if (c_1 !== 0) {\r\n                                        return c_1 | 0;\r\n                                    }\r\n                                    else {\r\n                                        comparer_mut = comparer;\r\n                                        l1_mut = cons(SetTreeNode$1__get_Right(x1_3), tail(matchValue[0]));\r\n                                        l2_mut = cons(SetTreeModule_empty(), tail(matchValue[1]));\r\n                                        continue SetTreeModule_compareStacks;\r\n                                    }\r\n                                }\r\n                            }\r\n                            else {\r\n                                const matchValue_4 = [l1, l2];\r\n                                let pattern_matching_result_1, t1_7, x1_5, t2_7, x2_5;\r\n                                if (!isEmpty_1(matchValue_4[0])) {\r\n                                    if (head(matchValue_4[0]) != null) {\r\n                                        pattern_matching_result_1 = 0;\r\n                                        t1_7 = tail(matchValue_4[0]);\r\n                                        x1_5 = head(matchValue_4[0]);\r\n                                    }\r\n                                    else if (!isEmpty_1(matchValue_4[1])) {\r\n                                        if (head(matchValue_4[1]) != null) {\r\n                                            pattern_matching_result_1 = 1;\r\n                                            t2_7 = tail(matchValue_4[1]);\r\n                                            x2_5 = head(matchValue_4[1]);\r\n                                        }\r\n                                        else {\r\n                                            pattern_matching_result_1 = 2;\r\n                                        }\r\n                                    }\r\n                                    else {\r\n                                        pattern_matching_result_1 = 2;\r\n                                    }\r\n                                }\r\n                                else if (!isEmpty_1(matchValue_4[1])) {\r\n                                    if (head(matchValue_4[1]) != null) {\r\n                                        pattern_matching_result_1 = 1;\r\n                                        t2_7 = tail(matchValue_4[1]);\r\n                                        x2_5 = head(matchValue_4[1]);\r\n                                    }\r\n                                    else {\r\n                                        pattern_matching_result_1 = 2;\r\n                                    }\r\n                                }\r\n                                else {\r\n                                    pattern_matching_result_1 = 2;\r\n                                }\r\n                                switch (pattern_matching_result_1) {\r\n                                    case 0: {\r\n                                        if (x1_5 instanceof SetTreeNode$1) {\r\n                                            comparer_mut = comparer;\r\n                                            l1_mut = ofArrayWithTail([SetTreeNode$1__get_Left(x1_5), SetTreeNode$1_$ctor_Z6E7BE5F7(SetTreeLeaf$1__get_Key(x1_5), SetTreeModule_empty(), SetTreeNode$1__get_Right(x1_5), 0)], t1_7);\r\n                                            l2_mut = l2;\r\n                                            continue SetTreeModule_compareStacks;\r\n                                        }\r\n                                        else {\r\n                                            comparer_mut = comparer;\r\n                                            l1_mut = ofArrayWithTail([SetTreeModule_empty(), SetTreeLeaf$1_$ctor_2B595(SetTreeLeaf$1__get_Key(x1_5))], t1_7);\r\n                                            l2_mut = l2;\r\n                                            continue SetTreeModule_compareStacks;\r\n                                        }\r\n                                    }\r\n                                    case 1: {\r\n                                        if (x2_5 instanceof SetTreeNode$1) {\r\n                                            comparer_mut = comparer;\r\n                                            l1_mut = l1;\r\n                                            l2_mut = ofArrayWithTail([SetTreeNode$1__get_Left(x2_5), SetTreeNode$1_$ctor_Z6E7BE5F7(SetTreeLeaf$1__get_Key(x2_5), SetTreeModule_empty(), SetTreeNode$1__get_Right(x2_5), 0)], t2_7);\r\n                                            continue SetTreeModule_compareStacks;\r\n                                        }\r\n                                        else {\r\n                                            comparer_mut = comparer;\r\n                                            l1_mut = l1;\r\n                                            l2_mut = ofArrayWithTail([SetTreeModule_empty(), SetTreeLeaf$1_$ctor_2B595(SetTreeLeaf$1__get_Key(x2_5))], t2_7);\r\n                                            continue SetTreeModule_compareStacks;\r\n                                        }\r\n                                    }\r\n                                    case 2: {\r\n                                        throw (new Error(\"unexpected state in SetTree.compareStacks\"));\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        else if (x2_3 instanceof SetTreeNode$1) {\r\n                            if (SetTreeNode$1__get_Left(x2_3) == null) {\r\n                                const c_2 = comparer.Compare(SetTreeLeaf$1__get_Key(x1_3), SetTreeLeaf$1__get_Key(x2_3)) | 0;\r\n                                if (c_2 !== 0) {\r\n                                    return c_2 | 0;\r\n                                }\r\n                                else {\r\n                                    comparer_mut = comparer;\r\n                                    l1_mut = cons(SetTreeModule_empty(), tail(matchValue[0]));\r\n                                    l2_mut = cons(SetTreeNode$1__get_Right(x2_3), tail(matchValue[1]));\r\n                                    continue SetTreeModule_compareStacks;\r\n                                }\r\n                            }\r\n                            else {\r\n                                const matchValue_5 = [l1, l2];\r\n                                let pattern_matching_result_2, t1_8, x1_6, t2_8, x2_6;\r\n                                if (!isEmpty_1(matchValue_5[0])) {\r\n                                    if (head(matchValue_5[0]) != null) {\r\n                                        pattern_matching_result_2 = 0;\r\n                                        t1_8 = tail(matchValue_5[0]);\r\n                                        x1_6 = head(matchValue_5[0]);\r\n                                    }\r\n                                    else if (!isEmpty_1(matchValue_5[1])) {\r\n                                        if (head(matchValue_5[1]) != null) {\r\n                                            pattern_matching_result_2 = 1;\r\n                                            t2_8 = tail(matchValue_5[1]);\r\n                                            x2_6 = head(matchValue_5[1]);\r\n                                        }\r\n                                        else {\r\n                                            pattern_matching_result_2 = 2;\r\n                                        }\r\n                                    }\r\n                                    else {\r\n                                        pattern_matching_result_2 = 2;\r\n                                    }\r\n                                }\r\n                                else if (!isEmpty_1(matchValue_5[1])) {\r\n                                    if (head(matchValue_5[1]) != null) {\r\n                                        pattern_matching_result_2 = 1;\r\n                                        t2_8 = tail(matchValue_5[1]);\r\n                                        x2_6 = head(matchValue_5[1]);\r\n                                    }\r\n                                    else {\r\n                                        pattern_matching_result_2 = 2;\r\n                                    }\r\n                                }\r\n                                else {\r\n                                    pattern_matching_result_2 = 2;\r\n                                }\r\n                                switch (pattern_matching_result_2) {\r\n                                    case 0: {\r\n                                        if (x1_6 instanceof SetTreeNode$1) {\r\n                                            comparer_mut = comparer;\r\n                                            l1_mut = ofArrayWithTail([SetTreeNode$1__get_Left(x1_6), SetTreeNode$1_$ctor_Z6E7BE5F7(SetTreeLeaf$1__get_Key(x1_6), SetTreeModule_empty(), SetTreeNode$1__get_Right(x1_6), 0)], t1_8);\r\n                                            l2_mut = l2;\r\n                                            continue SetTreeModule_compareStacks;\r\n                                        }\r\n                                        else {\r\n                                            comparer_mut = comparer;\r\n                                            l1_mut = ofArrayWithTail([SetTreeModule_empty(), SetTreeLeaf$1_$ctor_2B595(SetTreeLeaf$1__get_Key(x1_6))], t1_8);\r\n                                            l2_mut = l2;\r\n                                            continue SetTreeModule_compareStacks;\r\n                                        }\r\n                                    }\r\n                                    case 1: {\r\n                                        if (x2_6 instanceof SetTreeNode$1) {\r\n                                            comparer_mut = comparer;\r\n                                            l1_mut = l1;\r\n                                            l2_mut = ofArrayWithTail([SetTreeNode$1__get_Left(x2_6), SetTreeNode$1_$ctor_Z6E7BE5F7(SetTreeLeaf$1__get_Key(x2_6), SetTreeModule_empty(), SetTreeNode$1__get_Right(x2_6), 0)], t2_8);\r\n                                            continue SetTreeModule_compareStacks;\r\n                                        }\r\n                                        else {\r\n                                            comparer_mut = comparer;\r\n                                            l1_mut = l1;\r\n                                            l2_mut = ofArrayWithTail([SetTreeModule_empty(), SetTreeLeaf$1_$ctor_2B595(SetTreeLeaf$1__get_Key(x2_6))], t2_8);\r\n                                            continue SetTreeModule_compareStacks;\r\n                                        }\r\n                                    }\r\n                                    case 2: {\r\n                                        throw (new Error(\"unexpected state in SetTree.compareStacks\"));\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        else {\r\n                            const c_3 = comparer.Compare(SetTreeLeaf$1__get_Key(x1_3), SetTreeLeaf$1__get_Key(x2_3)) | 0;\r\n                            if (c_3 !== 0) {\r\n                                return c_3 | 0;\r\n                            }\r\n                            else {\r\n                                comparer_mut = comparer;\r\n                                l1_mut = tail(matchValue[0]);\r\n                                l2_mut = tail(matchValue[1]);\r\n                                continue SetTreeModule_compareStacks;\r\n                            }\r\n                        }\r\n                    }\r\n                    else {\r\n                        const x2 = head(matchValue[1]);\r\n                        const matchValue_1 = [l1, l2];\r\n                        let pattern_matching_result_3, t1_2, x1, t2_2, x2_1;\r\n                        if (!isEmpty_1(matchValue_1[0])) {\r\n                            if (head(matchValue_1[0]) != null) {\r\n                                pattern_matching_result_3 = 0;\r\n                                t1_2 = tail(matchValue_1[0]);\r\n                                x1 = head(matchValue_1[0]);\r\n                            }\r\n                            else if (!isEmpty_1(matchValue_1[1])) {\r\n                                if (head(matchValue_1[1]) != null) {\r\n                                    pattern_matching_result_3 = 1;\r\n                                    t2_2 = tail(matchValue_1[1]);\r\n                                    x2_1 = head(matchValue_1[1]);\r\n                                }\r\n                                else {\r\n                                    pattern_matching_result_3 = 2;\r\n                                }\r\n                            }\r\n                            else {\r\n                                pattern_matching_result_3 = 2;\r\n                            }\r\n                        }\r\n                        else if (!isEmpty_1(matchValue_1[1])) {\r\n                            if (head(matchValue_1[1]) != null) {\r\n                                pattern_matching_result_3 = 1;\r\n                                t2_2 = tail(matchValue_1[1]);\r\n                                x2_1 = head(matchValue_1[1]);\r\n                            }\r\n                            else {\r\n                                pattern_matching_result_3 = 2;\r\n                            }\r\n                        }\r\n                        else {\r\n                            pattern_matching_result_3 = 2;\r\n                        }\r\n                        switch (pattern_matching_result_3) {\r\n                            case 0: {\r\n                                if (x1 instanceof SetTreeNode$1) {\r\n                                    comparer_mut = comparer;\r\n                                    l1_mut = ofArrayWithTail([SetTreeNode$1__get_Left(x1), SetTreeNode$1_$ctor_Z6E7BE5F7(SetTreeLeaf$1__get_Key(x1), SetTreeModule_empty(), SetTreeNode$1__get_Right(x1), 0)], t1_2);\r\n                                    l2_mut = l2;\r\n                                    continue SetTreeModule_compareStacks;\r\n                                }\r\n                                else {\r\n                                    comparer_mut = comparer;\r\n                                    l1_mut = ofArrayWithTail([SetTreeModule_empty(), SetTreeLeaf$1_$ctor_2B595(SetTreeLeaf$1__get_Key(x1))], t1_2);\r\n                                    l2_mut = l2;\r\n                                    continue SetTreeModule_compareStacks;\r\n                                }\r\n                            }\r\n                            case 1: {\r\n                                if (x2_1 instanceof SetTreeNode$1) {\r\n                                    comparer_mut = comparer;\r\n                                    l1_mut = l1;\r\n                                    l2_mut = ofArrayWithTail([SetTreeNode$1__get_Left(x2_1), SetTreeNode$1_$ctor_Z6E7BE5F7(SetTreeLeaf$1__get_Key(x2_1), SetTreeModule_empty(), SetTreeNode$1__get_Right(x2_1), 0)], t2_2);\r\n                                    continue SetTreeModule_compareStacks;\r\n                                }\r\n                                else {\r\n                                    comparer_mut = comparer;\r\n                                    l1_mut = l1;\r\n                                    l2_mut = ofArrayWithTail([SetTreeModule_empty(), SetTreeLeaf$1_$ctor_2B595(SetTreeLeaf$1__get_Key(x2_1))], t2_2);\r\n                                    continue SetTreeModule_compareStacks;\r\n                                }\r\n                            }\r\n                            case 2: {\r\n                                throw (new Error(\"unexpected state in SetTree.compareStacks\"));\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                else if (head(matchValue[0]) != null) {\r\n                    const x1_1 = head(matchValue[0]);\r\n                    const matchValue_2 = [l1, l2];\r\n                    let pattern_matching_result_4, t1_4, x1_2, t2_4, x2_2;\r\n                    if (!isEmpty_1(matchValue_2[0])) {\r\n                        if (head(matchValue_2[0]) != null) {\r\n                            pattern_matching_result_4 = 0;\r\n                            t1_4 = tail(matchValue_2[0]);\r\n                            x1_2 = head(matchValue_2[0]);\r\n                        }\r\n                        else if (!isEmpty_1(matchValue_2[1])) {\r\n                            if (head(matchValue_2[1]) != null) {\r\n                                pattern_matching_result_4 = 1;\r\n                                t2_4 = tail(matchValue_2[1]);\r\n                                x2_2 = head(matchValue_2[1]);\r\n                            }\r\n                            else {\r\n                                pattern_matching_result_4 = 2;\r\n                            }\r\n                        }\r\n                        else {\r\n                            pattern_matching_result_4 = 2;\r\n                        }\r\n                    }\r\n                    else if (!isEmpty_1(matchValue_2[1])) {\r\n                        if (head(matchValue_2[1]) != null) {\r\n                            pattern_matching_result_4 = 1;\r\n                            t2_4 = tail(matchValue_2[1]);\r\n                            x2_2 = head(matchValue_2[1]);\r\n                        }\r\n                        else {\r\n                            pattern_matching_result_4 = 2;\r\n                        }\r\n                    }\r\n                    else {\r\n                        pattern_matching_result_4 = 2;\r\n                    }\r\n                    switch (pattern_matching_result_4) {\r\n                        case 0: {\r\n                            if (x1_2 instanceof SetTreeNode$1) {\r\n                                comparer_mut = comparer;\r\n                                l1_mut = ofArrayWithTail([SetTreeNode$1__get_Left(x1_2), SetTreeNode$1_$ctor_Z6E7BE5F7(SetTreeLeaf$1__get_Key(x1_2), SetTreeModule_empty(), SetTreeNode$1__get_Right(x1_2), 0)], t1_4);\r\n                                l2_mut = l2;\r\n                                continue SetTreeModule_compareStacks;\r\n                            }\r\n                            else {\r\n                                comparer_mut = comparer;\r\n                                l1_mut = ofArrayWithTail([SetTreeModule_empty(), SetTreeLeaf$1_$ctor_2B595(SetTreeLeaf$1__get_Key(x1_2))], t1_4);\r\n                                l2_mut = l2;\r\n                                continue SetTreeModule_compareStacks;\r\n                            }\r\n                        }\r\n                        case 1: {\r\n                            if (x2_2 instanceof SetTreeNode$1) {\r\n                                comparer_mut = comparer;\r\n                                l1_mut = l1;\r\n                                l2_mut = ofArrayWithTail([SetTreeNode$1__get_Left(x2_2), SetTreeNode$1_$ctor_Z6E7BE5F7(SetTreeLeaf$1__get_Key(x2_2), SetTreeModule_empty(), SetTreeNode$1__get_Right(x2_2), 0)], t2_4);\r\n                                continue SetTreeModule_compareStacks;\r\n                            }\r\n                            else {\r\n                                comparer_mut = comparer;\r\n                                l1_mut = l1;\r\n                                l2_mut = ofArrayWithTail([SetTreeModule_empty(), SetTreeLeaf$1_$ctor_2B595(SetTreeLeaf$1__get_Key(x2_2))], t2_4);\r\n                                continue SetTreeModule_compareStacks;\r\n                            }\r\n                        }\r\n                        case 2: {\r\n                            throw (new Error(\"unexpected state in SetTree.compareStacks\"));\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    comparer_mut = comparer;\r\n                    l1_mut = tail(matchValue[0]);\r\n                    l2_mut = tail(matchValue[1]);\r\n                    continue SetTreeModule_compareStacks;\r\n                }\r\n            }\r\n            else {\r\n                return 1;\r\n            }\r\n        }\r\n        else if (isEmpty_1(matchValue[1])) {\r\n            return 0;\r\n        }\r\n        else {\r\n            return -1;\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function SetTreeModule_compare(comparer, t1, t2) {\r\n    if (t1 == null) {\r\n        if (t2 == null) {\r\n            return 0;\r\n        }\r\n        else {\r\n            return -1;\r\n        }\r\n    }\r\n    else if (t2 == null) {\r\n        return 1;\r\n    }\r\n    else {\r\n        return SetTreeModule_compareStacks(comparer, singleton_1(t1), singleton_1(t2)) | 0;\r\n    }\r\n}\r\n\r\nexport function SetTreeModule_choose(s) {\r\n    return SetTreeModule_minimumElement(s);\r\n}\r\n\r\nexport function SetTreeModule_toList(t) {\r\n    const loop = (t$0027_mut, acc_mut) => {\r\n        loop:\r\n        while (true) {\r\n            const t$0027 = t$0027_mut, acc = acc_mut;\r\n            if (t$0027 != null) {\r\n                const t2 = t$0027;\r\n                if (t2 instanceof SetTreeNode$1) {\r\n                    t$0027_mut = SetTreeNode$1__get_Left(t2);\r\n                    acc_mut = cons(SetTreeLeaf$1__get_Key(t2), loop(SetTreeNode$1__get_Right(t2), acc));\r\n                    continue loop;\r\n                }\r\n                else {\r\n                    return cons(SetTreeLeaf$1__get_Key(t2), acc);\r\n                }\r\n            }\r\n            else {\r\n                return acc;\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    return loop(t, empty_1());\r\n}\r\n\r\nexport function SetTreeModule_copyToArray(s, arr, i) {\r\n    let j = i;\r\n    SetTreeModule_iter((x) => {\r\n        arr[j] = x;\r\n        j = ((j + 1) | 0);\r\n    }, s);\r\n}\r\n\r\nexport function SetTreeModule_toArray(s) {\r\n    const n = SetTreeModule_count(s) | 0;\r\n    const res = fill(new Array(n), 0, n, null);\r\n    SetTreeModule_copyToArray(s, res, 0);\r\n    return res;\r\n}\r\n\r\nexport function SetTreeModule_mkFromEnumerator(comparer_mut, acc_mut, e_mut) {\r\n    SetTreeModule_mkFromEnumerator:\r\n    while (true) {\r\n        const comparer = comparer_mut, acc = acc_mut, e = e_mut;\r\n        if (e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n            comparer_mut = comparer;\r\n            acc_mut = SetTreeModule_add(comparer, e[\"System.Collections.Generic.IEnumerator`1.get_Current\"](), acc);\r\n            e_mut = e;\r\n            continue SetTreeModule_mkFromEnumerator;\r\n        }\r\n        else {\r\n            return acc;\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function SetTreeModule_ofArray(comparer, l) {\r\n    return fold_1((acc, k) => SetTreeModule_add(comparer, k, acc), SetTreeModule_empty(), l);\r\n}\r\n\r\nexport function SetTreeModule_ofList(comparer, l) {\r\n    return fold_2((acc, k) => SetTreeModule_add(comparer, k, acc), SetTreeModule_empty(), l);\r\n}\r\n\r\nexport function SetTreeModule_ofSeq(comparer, c) {\r\n    if (isArrayLike(c)) {\r\n        return SetTreeModule_ofArray(comparer, c);\r\n    }\r\n    else if (c instanceof FSharpList) {\r\n        return SetTreeModule_ofList(comparer, c);\r\n    }\r\n    else {\r\n        const ie = getEnumerator(c);\r\n        try {\r\n            return SetTreeModule_mkFromEnumerator(comparer, SetTreeModule_empty(), ie);\r\n        }\r\n        finally {\r\n            ie.Dispose();\r\n        }\r\n    }\r\n}\r\n\r\nexport class FSharpSet {\r\n    constructor(comparer, tree) {\r\n        this.comparer = comparer;\r\n        this.tree = tree;\r\n    }\r\n    GetHashCode() {\r\n        const this$ = this;\r\n        return FSharpSet__ComputeHashCode(this$) | 0;\r\n    }\r\n    Equals(that) {\r\n        const this$ = this;\r\n        return (that instanceof FSharpSet) ? (SetTreeModule_compare(FSharpSet__get_Comparer(this$), FSharpSet__get_Tree(this$), FSharpSet__get_Tree(that)) === 0) : false;\r\n    }\r\n    toString() {\r\n        const this$ = this;\r\n        return (\"set [\" + join(\"; \", map_1((x) => {\r\n            let copyOfStruct = x;\r\n            return toString(copyOfStruct);\r\n        }, this$))) + \"]\";\r\n    }\r\n    get [Symbol.toStringTag]() {\r\n        return \"FSharpSet\";\r\n    }\r\n    toJSON(_key) {\r\n        const this$ = this;\r\n        return Array.from(this$);\r\n    }\r\n    CompareTo(that) {\r\n        const s = this;\r\n        return SetTreeModule_compare(FSharpSet__get_Comparer(s), FSharpSet__get_Tree(s), FSharpSet__get_Tree(that)) | 0;\r\n    }\r\n    [\"System.Collections.Generic.ICollection`1.Add2B595\"](x) {\r\n        throw (new Error(\"ReadOnlyCollection\"));\r\n    }\r\n    [\"System.Collections.Generic.ICollection`1.Clear\"]() {\r\n        throw (new Error(\"ReadOnlyCollection\"));\r\n    }\r\n    [\"System.Collections.Generic.ICollection`1.Remove2B595\"](x) {\r\n        throw (new Error(\"ReadOnlyCollection\"));\r\n    }\r\n    [\"System.Collections.Generic.ICollection`1.Contains2B595\"](x) {\r\n        const s = this;\r\n        return SetTreeModule_mem(FSharpSet__get_Comparer(s), x, FSharpSet__get_Tree(s));\r\n    }\r\n    [\"System.Collections.Generic.ICollection`1.CopyToZ2E171D71\"](arr, i) {\r\n        const s = this;\r\n        SetTreeModule_copyToArray(FSharpSet__get_Tree(s), arr, i);\r\n    }\r\n    [\"System.Collections.Generic.ICollection`1.get_IsReadOnly\"]() {\r\n        return true;\r\n    }\r\n    [\"System.Collections.Generic.ICollection`1.get_Count\"]() {\r\n        const s = this;\r\n        return FSharpSet__get_Count(s) | 0;\r\n    }\r\n    [\"System.Collections.Generic.IReadOnlyCollection`1.get_Count\"]() {\r\n        const s = this;\r\n        return FSharpSet__get_Count(s) | 0;\r\n    }\r\n    GetEnumerator() {\r\n        const s = this;\r\n        return SetTreeModule_mkIEnumerator(FSharpSet__get_Tree(s));\r\n    }\r\n    [Symbol.iterator]() {\r\n        return toIterator(this.GetEnumerator());\r\n    }\r\n    [\"System.Collections.IEnumerable.GetEnumerator\"]() {\r\n        const s = this;\r\n        return SetTreeModule_mkIEnumerator(FSharpSet__get_Tree(s));\r\n    }\r\n    get size() {\r\n        const s = this;\r\n        return FSharpSet__get_Count(s) | 0;\r\n    }\r\n    add(k) {\r\n        const s = this;\r\n        throw (new Error(\"Set cannot be mutated\"));\r\n        return s;\r\n    }\r\n    clear() {\r\n        throw (new Error(\"Set cannot be mutated\"));\r\n    }\r\n    delete(k) {\r\n        throw (new Error(\"Set cannot be mutated\"));\r\n        return false;\r\n    }\r\n    has(k) {\r\n        const s = this;\r\n        return FSharpSet__Contains(s, k);\r\n    }\r\n    keys() {\r\n        const s = this;\r\n        return map_1((x) => x, s);\r\n    }\r\n    values() {\r\n        const s = this;\r\n        return map_1((x) => x, s);\r\n    }\r\n    entries() {\r\n        const s = this;\r\n        return map_1((v) => [v, v], s);\r\n    }\r\n    forEach(f, thisArg) {\r\n        const s = this;\r\n        iterate_1((x) => {\r\n            f(x, x, s);\r\n        }, s);\r\n    }\r\n}\r\n\r\nexport function FSharpSet$reflection(gen0) {\r\n    return class_type(\"Set.FSharpSet\", [gen0], FSharpSet);\r\n}\r\n\r\nexport function FSharpSet_$ctor(comparer, tree) {\r\n    return new FSharpSet(comparer, tree);\r\n}\r\n\r\nexport function FSharpSet__get_Comparer(set$) {\r\n    return set$.comparer;\r\n}\r\n\r\nexport function FSharpSet__get_Tree(set$) {\r\n    return set$.tree;\r\n}\r\n\r\nexport function FSharpSet_Empty(comparer) {\r\n    return FSharpSet_$ctor(comparer, SetTreeModule_empty());\r\n}\r\n\r\nexport function FSharpSet__Add(s, value) {\r\n    return FSharpSet_$ctor(FSharpSet__get_Comparer(s), SetTreeModule_add(FSharpSet__get_Comparer(s), value, FSharpSet__get_Tree(s)));\r\n}\r\n\r\nexport function FSharpSet__Remove(s, value) {\r\n    return FSharpSet_$ctor(FSharpSet__get_Comparer(s), SetTreeModule_remove(FSharpSet__get_Comparer(s), value, FSharpSet__get_Tree(s)));\r\n}\r\n\r\nexport function FSharpSet__get_Count(s) {\r\n    return SetTreeModule_count(FSharpSet__get_Tree(s));\r\n}\r\n\r\nexport function FSharpSet__Contains(s, value) {\r\n    return SetTreeModule_mem(FSharpSet__get_Comparer(s), value, FSharpSet__get_Tree(s));\r\n}\r\n\r\nexport function FSharpSet__Iterate(s, x) {\r\n    SetTreeModule_iter(x, FSharpSet__get_Tree(s));\r\n}\r\n\r\nexport function FSharpSet__Fold(s, f, z) {\r\n    const f_1 = f;\r\n    return SetTreeModule_fold((x, z_1) => f_1(z_1, x), z, FSharpSet__get_Tree(s));\r\n}\r\n\r\nexport function FSharpSet__get_IsEmpty(s) {\r\n    return FSharpSet__get_Tree(s) == null;\r\n}\r\n\r\nexport function FSharpSet__Partition(s, f) {\r\n    if (FSharpSet__get_Tree(s) == null) {\r\n        return [s, s];\r\n    }\r\n    else {\r\n        const patternInput = SetTreeModule_partition(FSharpSet__get_Comparer(s), f, FSharpSet__get_Tree(s));\r\n        return [FSharpSet_$ctor(FSharpSet__get_Comparer(s), patternInput[0]), FSharpSet_$ctor(FSharpSet__get_Comparer(s), patternInput[1])];\r\n    }\r\n}\r\n\r\nexport function FSharpSet__Filter(s, f) {\r\n    if (FSharpSet__get_Tree(s) == null) {\r\n        return s;\r\n    }\r\n    else {\r\n        return FSharpSet_$ctor(FSharpSet__get_Comparer(s), SetTreeModule_filter(FSharpSet__get_Comparer(s), f, FSharpSet__get_Tree(s)));\r\n    }\r\n}\r\n\r\nexport function FSharpSet__Map(s, f, comparer) {\r\n    return FSharpSet_$ctor(comparer, SetTreeModule_fold((acc, k) => SetTreeModule_add(comparer, f(k), acc), SetTreeModule_empty(), FSharpSet__get_Tree(s)));\r\n}\r\n\r\nexport function FSharpSet__Exists(s, f) {\r\n    return SetTreeModule_exists(f, FSharpSet__get_Tree(s));\r\n}\r\n\r\nexport function FSharpSet__ForAll(s, f) {\r\n    return SetTreeModule_forall(f, FSharpSet__get_Tree(s));\r\n}\r\n\r\nexport function FSharpSet_op_Subtraction(set1, set2) {\r\n    if (FSharpSet__get_Tree(set1) == null) {\r\n        return set1;\r\n    }\r\n    else if (FSharpSet__get_Tree(set2) == null) {\r\n        return set1;\r\n    }\r\n    else {\r\n        return FSharpSet_$ctor(FSharpSet__get_Comparer(set1), SetTreeModule_diff(FSharpSet__get_Comparer(set1), FSharpSet__get_Tree(set1), FSharpSet__get_Tree(set2)));\r\n    }\r\n}\r\n\r\nexport function FSharpSet_op_Addition(set1, set2) {\r\n    if (FSharpSet__get_Tree(set2) == null) {\r\n        return set1;\r\n    }\r\n    else if (FSharpSet__get_Tree(set1) == null) {\r\n        return set2;\r\n    }\r\n    else {\r\n        return FSharpSet_$ctor(FSharpSet__get_Comparer(set1), SetTreeModule_union(FSharpSet__get_Comparer(set1), FSharpSet__get_Tree(set1), FSharpSet__get_Tree(set2)));\r\n    }\r\n}\r\n\r\nexport function FSharpSet_Intersection(a, b) {\r\n    if (FSharpSet__get_Tree(b) == null) {\r\n        return b;\r\n    }\r\n    else if (FSharpSet__get_Tree(a) == null) {\r\n        return a;\r\n    }\r\n    else {\r\n        return FSharpSet_$ctor(FSharpSet__get_Comparer(a), SetTreeModule_intersection(FSharpSet__get_Comparer(a), FSharpSet__get_Tree(a), FSharpSet__get_Tree(b)));\r\n    }\r\n}\r\n\r\nexport function FSharpSet_IntersectionMany(sets) {\r\n    return reduce((s1, s2) => FSharpSet_Intersection(s1, s2), sets);\r\n}\r\n\r\nexport function FSharpSet_Equality(a, b) {\r\n    return SetTreeModule_compare(FSharpSet__get_Comparer(a), FSharpSet__get_Tree(a), FSharpSet__get_Tree(b)) === 0;\r\n}\r\n\r\nexport function FSharpSet_Compare(a, b) {\r\n    return SetTreeModule_compare(FSharpSet__get_Comparer(a), FSharpSet__get_Tree(a), FSharpSet__get_Tree(b));\r\n}\r\n\r\nexport function FSharpSet__get_Choose(x) {\r\n    return SetTreeModule_choose(FSharpSet__get_Tree(x));\r\n}\r\n\r\nexport function FSharpSet__get_MinimumElement(x) {\r\n    return SetTreeModule_minimumElement(FSharpSet__get_Tree(x));\r\n}\r\n\r\nexport function FSharpSet__get_MaximumElement(x) {\r\n    return SetTreeModule_maximumElement(FSharpSet__get_Tree(x));\r\n}\r\n\r\nexport function FSharpSet__IsSubsetOf(x, otherSet) {\r\n    return SetTreeModule_subset(FSharpSet__get_Comparer(x), FSharpSet__get_Tree(x), FSharpSet__get_Tree(otherSet));\r\n}\r\n\r\nexport function FSharpSet__IsSupersetOf(x, otherSet) {\r\n    return SetTreeModule_subset(FSharpSet__get_Comparer(x), FSharpSet__get_Tree(otherSet), FSharpSet__get_Tree(x));\r\n}\r\n\r\nexport function FSharpSet__IsProperSubsetOf(x, otherSet) {\r\n    return SetTreeModule_properSubset(FSharpSet__get_Comparer(x), FSharpSet__get_Tree(x), FSharpSet__get_Tree(otherSet));\r\n}\r\n\r\nexport function FSharpSet__IsProperSupersetOf(x, otherSet) {\r\n    return SetTreeModule_properSubset(FSharpSet__get_Comparer(x), FSharpSet__get_Tree(otherSet), FSharpSet__get_Tree(x));\r\n}\r\n\r\nexport function FSharpSet__ToList(x) {\r\n    return SetTreeModule_toList(FSharpSet__get_Tree(x));\r\n}\r\n\r\nexport function FSharpSet__ToArray(x) {\r\n    return SetTreeModule_toArray(FSharpSet__get_Tree(x));\r\n}\r\n\r\nexport function FSharpSet__ComputeHashCode(this$) {\r\n    let y;\r\n    let res = 0;\r\n    const enumerator = getEnumerator(this$);\r\n    try {\r\n        while (enumerator[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n            const x_1 = enumerator[\"System.Collections.Generic.IEnumerator`1.get_Current\"]();\r\n            res = (((y = (structuralHash(x_1) | 0), ((res << 1) + y) + 631)) | 0);\r\n        }\r\n    }\r\n    finally {\r\n        enumerator.Dispose();\r\n    }\r\n    return Math.abs(res) | 0;\r\n}\r\n\r\nexport function isEmpty(set$) {\r\n    return FSharpSet__get_IsEmpty(set$);\r\n}\r\n\r\nexport function contains(element, set$) {\r\n    return FSharpSet__Contains(set$, element);\r\n}\r\n\r\nexport function add(value, set$) {\r\n    return FSharpSet__Add(set$, value);\r\n}\r\n\r\nexport function singleton(value, comparer) {\r\n    return FSharpSet__Add(FSharpSet_Empty(comparer), value);\r\n}\r\n\r\nexport function remove(value, set$) {\r\n    return FSharpSet__Remove(set$, value);\r\n}\r\n\r\nexport function union(set1, set2) {\r\n    return FSharpSet_op_Addition(set1, set2);\r\n}\r\n\r\nexport function unionMany(sets, comparer) {\r\n    return fold_3((s1, s2) => FSharpSet_op_Addition(s1, s2), FSharpSet_Empty(comparer), sets);\r\n}\r\n\r\nexport function intersect(set1, set2) {\r\n    return FSharpSet_Intersection(set1, set2);\r\n}\r\n\r\nexport function intersectMany(sets) {\r\n    return FSharpSet_IntersectionMany(sets);\r\n}\r\n\r\nexport function iterate(action, set$) {\r\n    FSharpSet__Iterate(set$, action);\r\n}\r\n\r\nexport function empty(comparer) {\r\n    return FSharpSet_Empty(comparer);\r\n}\r\n\r\nexport function forAll(predicate, set$) {\r\n    return FSharpSet__ForAll(set$, predicate);\r\n}\r\n\r\nexport function exists(predicate, set$) {\r\n    return FSharpSet__Exists(set$, predicate);\r\n}\r\n\r\nexport function filter(predicate, set$) {\r\n    return FSharpSet__Filter(set$, predicate);\r\n}\r\n\r\nexport function partition(predicate, set$) {\r\n    return FSharpSet__Partition(set$, predicate);\r\n}\r\n\r\nexport function fold(folder, state, set$) {\r\n    return SetTreeModule_fold(folder, state, FSharpSet__get_Tree(set$));\r\n}\r\n\r\nexport function foldBack(folder, set$, state) {\r\n    return SetTreeModule_foldBack(folder, FSharpSet__get_Tree(set$), state);\r\n}\r\n\r\nexport function map(mapping, set$, comparer) {\r\n    return FSharpSet__Map(set$, mapping, comparer);\r\n}\r\n\r\nexport function count(set$) {\r\n    return FSharpSet__get_Count(set$);\r\n}\r\n\r\nexport function ofList(elements, comparer) {\r\n    return FSharpSet_$ctor(comparer, SetTreeModule_ofSeq(comparer, elements));\r\n}\r\n\r\nexport function ofArray(array, comparer) {\r\n    return FSharpSet_$ctor(comparer, SetTreeModule_ofArray(comparer, array));\r\n}\r\n\r\nexport function toList(set$) {\r\n    return FSharpSet__ToList(set$);\r\n}\r\n\r\nexport function toArray(set$) {\r\n    return FSharpSet__ToArray(set$);\r\n}\r\n\r\nexport function toSeq(set$) {\r\n    return map_1((x) => x, set$);\r\n}\r\n\r\nexport function ofSeq(elements, comparer) {\r\n    return FSharpSet_$ctor(comparer, SetTreeModule_ofSeq(comparer, elements));\r\n}\r\n\r\nexport function difference(set1, set2) {\r\n    return FSharpSet_op_Subtraction(set1, set2);\r\n}\r\n\r\nexport function isSubset(set1, set2) {\r\n    return SetTreeModule_subset(FSharpSet__get_Comparer(set1), FSharpSet__get_Tree(set1), FSharpSet__get_Tree(set2));\r\n}\r\n\r\nexport function isSuperset(set1, set2) {\r\n    return SetTreeModule_subset(FSharpSet__get_Comparer(set1), FSharpSet__get_Tree(set2), FSharpSet__get_Tree(set1));\r\n}\r\n\r\nexport function isProperSubset(set1, set2) {\r\n    return SetTreeModule_properSubset(FSharpSet__get_Comparer(set1), FSharpSet__get_Tree(set1), FSharpSet__get_Tree(set2));\r\n}\r\n\r\nexport function isProperSuperset(set1, set2) {\r\n    return SetTreeModule_properSubset(FSharpSet__get_Comparer(set1), FSharpSet__get_Tree(set2), FSharpSet__get_Tree(set1));\r\n}\r\n\r\nexport function minElement(set$) {\r\n    return FSharpSet__get_MinimumElement(set$);\r\n}\r\n\r\nexport function maxElement(set$) {\r\n    return FSharpSet__get_MaximumElement(set$);\r\n}\r\n\r\nexport function unionWith(s1, s2) {\r\n    return fold_3((acc, x) => acc.add(x), s1, s2);\r\n}\r\n\r\nexport function intersectWith(s1, s2, comparer) {\r\n    const s2_1 = ofSeq(s2, comparer);\r\n    const enumerator = getEnumerator(s1.keys());\r\n    try {\r\n        while (enumerator[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n            const x = enumerator[\"System.Collections.Generic.IEnumerator`1.get_Current\"]();\r\n            if (!FSharpSet__Contains(s2_1, x)) {\r\n                void s1.delete(x);\r\n            }\r\n        }\r\n    }\r\n    finally {\r\n        enumerator.Dispose();\r\n    }\r\n}\r\n\r\nexport function exceptWith(s1, s2) {\r\n    const enumerator = getEnumerator(s2);\r\n    try {\r\n        while (enumerator[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n            void s1.delete(enumerator[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\r\n        }\r\n    }\r\n    finally {\r\n        enumerator.Dispose();\r\n    }\r\n}\r\n\r\nexport function isSubsetOf(s1, s2, comparer) {\r\n    return isSubset(ofSeq(s1.values(), comparer), ofSeq(s2, comparer));\r\n}\r\n\r\nexport function isSupersetOf(s1, s2, comparer) {\r\n    return isSuperset(ofSeq(s1.values(), comparer), ofSeq(s2, comparer));\r\n}\r\n\r\nexport function isProperSubsetOf(s1, s2, comparer) {\r\n    return isProperSubset(ofSeq(s1.values(), comparer), ofSeq(s2, comparer));\r\n}\r\n\r\nexport function isProperSupersetOf(s1, s2, comparer) {\r\n    return isProperSuperset(ofSeq(s1.values(), comparer), ofSeq(s2, comparer));\r\n}\r\n\r\n","\nnamespace Thoth.Json\nopen System.Text.RegularExpressions\n\n[<RequireQualifiedAccess>]\nmodule Decode =\n\n    open System.Globalization\n    open Fable.Core\n    open Fable.Core.JsInterop\n\n    module Helpers =\n        [<Emit(\"typeof $0\")>]\n        let jsTypeof (_ : JsonValue) : string = jsNative\n\n        [<Emit(\"$0 instanceof SyntaxError\")>]\n        let isSyntaxError (_ : JsonValue) : bool = jsNative\n\n        let inline getField (fieldName: string) (o: JsonValue) = o?(fieldName)\n        let inline isString (o: JsonValue) : bool = o :? string\n\n        let inline isBoolean (o: JsonValue) : bool = o :? bool\n\n        let inline isNumber (o: JsonValue) : bool = jsTypeof o = \"number\"\n\n        let inline isArray (o: JsonValue) : bool = JS.Constructors.Array.isArray(o)\n\n        [<Emit(\"$0 === null ? false : (Object.getPrototypeOf($0 || false) === Object.prototype)\")>]\n        let isObject (_ : JsonValue) : bool = jsNative\n\n        let inline isNaN (o: JsonValue) : bool = JS.Constructors.Number.isNaN(!!o)\n\n        let inline isNullValue (o: JsonValue): bool = isNull o\n\n        /// is the value an integer? This returns false for 1.1, NaN, Infinite, ...\n        [<Emit(\"isFinite($0) && Math.floor($0) === $0\")>]\n        let isIntegralValue (_: JsonValue) : bool = jsNative\n\n        [<Emit(\"$1 <= $0 && $0 < $2\")>]\n        let isBetweenInclusive(_v: JsonValue, _min: obj, _max: obj) = jsNative\n\n        [<Emit(\"isFinite($0) && !($0 % 1)\")>]\n        let isIntFinite (_: JsonValue) : bool = jsNative\n\n        let isUndefined (o: JsonValue): bool = jsTypeof o = \"undefined\"\n\n        [<Emit(\"JSON.stringify($0, null, 4) + ''\")>]\n        let anyToString (_: JsonValue) : string = jsNative\n\n        let inline isFunction (o: JsonValue) : bool = jsTypeof o = \"function\"\n\n        let inline objectKeys (o: JsonValue) : string seq = upcast JS.Constructors.Object.keys(o)\n        let inline asBool (o: JsonValue): bool = unbox o\n        let inline asInt (o: JsonValue): int = unbox o\n        let inline asFloat (o: JsonValue): float = unbox o\n        let inline asFloat32 (o: JsonValue): float32 = unbox o\n        let inline asString (o: JsonValue): string = unbox o\n        let inline asArray (o: JsonValue): JsonValue[] = unbox o\n\n    let private genericMsg msg value newLine =\n        try\n            \"Expecting \"\n                + msg\n                + \" but instead got:\"\n                + (if newLine then \"\\n\" else \" \")\n                + (Helpers.anyToString value)\n        with\n            | _ ->\n                \"Expecting \"\n                + msg\n                + \" but decoder failed. Couldn't report given value due to circular structure.\"\n                + (if newLine then \"\\n\" else \" \")\n\n    let private errorToString (path : string, error) =\n        let reason =\n            match error with\n            | BadPrimitive (msg, value) ->\n                genericMsg msg value false\n            | BadType (msg, value) ->\n                genericMsg msg value true\n            | BadPrimitiveExtra (msg, value, reason) ->\n                genericMsg msg value false + \"\\nReason: \" + reason\n            | BadField (msg, value) ->\n                genericMsg msg value true\n            | BadPath (msg, value, fieldName) ->\n                genericMsg msg value true + (\"\\nNode `\" + fieldName + \"` is unkown.\")\n            | TooSmallArray (msg, value) ->\n                \"Expecting \" + msg + \".\\n\" + (Helpers.anyToString value)\n            | BadOneOf messages ->\n                \"The following errors were found:\\n\\n\" + String.concat \"\\n\\n\" messages\n            | FailMessage msg ->\n                \"The following `failure` occurred with the decoder: \" + msg\n\n        match error with\n        | BadOneOf _ ->\n            // Don't need to show the path here because each error case will show it's own path\n            reason\n        | _ ->\n            \"Error at: `\" + path + \"`\\n\" + reason\n\n    ///////////////\n    // Runners ///\n    /////////////\n\n    let fromValue (path : string) (decoder : Decoder<'T>) =\n        fun value ->\n            match decoder path value with\n            | Ok success ->\n                Ok success\n            | Error error ->\n                Error (errorToString error)\n\n    let fromString (decoder : Decoder<'T>) =\n        fun value ->\n            try\n               let json = JS.JSON.parse value\n               fromValue \"$\" decoder json\n            with\n                | ex when Helpers.isSyntaxError ex ->\n                    Error(\"Given an invalid JSON: \" + ex.Message)\n\n    let unsafeFromString (decoder : Decoder<'T>) =\n        fun value ->\n            match fromString decoder value with\n            | Ok x -> x\n            | Error msg -> failwith msg\n\n    [<System.Obsolete(\"Please use fromValue instead\")>]\n    let decodeValue (path : string) (decoder : Decoder<'T>) = fromValue path decoder\n\n    [<System.Obsolete(\"Please use fromString instead\")>]\n    let decodeString (decoder : Decoder<'T>) = fromString decoder\n\n    //////////////////\n    // Primitives ///\n    ////////////////\n\n    let string : Decoder<string> =\n        fun path value ->\n            if Helpers.isString value then\n                Ok(Helpers.asString value)\n            else\n                (path, BadPrimitive(\"a string\", value)) |> Error\n\n    let guid : Decoder<System.Guid> =\n        fun path value ->\n            if Helpers.isString value then\n                match System.Guid.TryParse (Helpers.asString value) with\n                | true, x -> Ok x\n                | _ -> (path, BadPrimitive(\"a guid\", value)) |> Error\n            else (path, BadPrimitive(\"a guid\", value)) |> Error\n\n    let unit : Decoder<unit> =\n        fun path value ->\n            if Helpers.isNullValue value then\n                Ok ()\n            else\n                (path, BadPrimitive(\"null\", value)) |> Error\n\n    let inline private integral\n                    (name : string)\n                    (tryParse : (string -> bool * 'T))\n                    (min : unit->'T)\n                    (max : unit->'T)\n                    (conv : float -> 'T) : Decoder< 'T > =\n\n        fun path value ->\n            if Helpers.isNumber value then\n                let value : float = unbox value\n                if Helpers.isIntegralValue value then\n                    if (float(min())) <= value && value <= (float(max())) then\n                        Ok(conv value)\n                    else\n                        (path, BadPrimitiveExtra(name, value, \"Value was either too large or too small for \" + name)) |> Error\n                else\n                    (path, BadPrimitiveExtra(name, value, \"Value is not an integral value\")) |> Error\n            elif Helpers.isString value then\n                match tryParse (Helpers.asString value) with\n                | true, x -> Ok x\n                | _ -> (path, BadPrimitive(name, value)) |> Error\n            else\n                (path, BadPrimitive(name, value)) |> Error\n\n    let sbyte : Decoder<sbyte> =\n        integral\n            \"a sbyte\"\n            System.SByte.TryParse\n            (fun () -> System.SByte.MinValue)\n            (fun () -> System.SByte.MaxValue)\n            sbyte\n\n    /// Alias to Decode.uint8\n    let byte : Decoder<byte> =\n        integral\n            \"a byte\"\n            System.Byte.TryParse\n            (fun () -> System.Byte.MinValue)\n            (fun () -> System.Byte.MaxValue)\n            byte\n\n    let int16 : Decoder<int16> =\n        integral\n            \"an int16\"\n            System.Int16.TryParse\n            (fun () -> System.Int16.MinValue)\n            (fun () -> System.Int16.MaxValue)\n            int16\n\n    let uint16 : Decoder<uint16> =\n        integral\n            \"an uint16\"\n            System.UInt16.TryParse\n            (fun () -> System.UInt16.MinValue)\n            (fun () -> System.UInt16.MaxValue)\n            uint16\n\n    let int : Decoder<int> =\n        integral\n            \"an int\"\n            System.Int32.TryParse\n            (fun () -> System.Int32.MinValue)\n            (fun () -> System.Int32.MaxValue)\n            int\n\n    let uint32 : Decoder<uint32> =\n        integral\n            \"an uint32\"\n            System.UInt32.TryParse\n            (fun () -> System.UInt32.MinValue)\n            (fun () -> System.UInt32.MaxValue)\n            uint32\n\n    let int64 : Decoder<int64> =\n        integral\n            \"an int64\"\n            System.Int64.TryParse\n            (fun () -> System.Int64.MinValue)\n            (fun () -> System.Int64.MaxValue)\n            int64\n\n    let uint64 : Decoder<uint64> =\n        integral\n            \"an uint64\"\n            System.UInt64.TryParse\n            (fun () -> System.UInt64.MinValue)\n            (fun () -> System.UInt64.MaxValue)\n            uint64\n\n    let bigint : Decoder<bigint> =\n        fun path value ->\n            if Helpers.isNumber value then\n                Helpers.asInt value |> bigint |> Ok\n            elif Helpers.isString value then\n                // TODO: BigInt.TryParse has been added in Fable 2.1.4\n                // Don't use it for now to support lower Fable versions\n                try\n                    bigint.Parse (Helpers.asString value) |> Ok\n                with _ ->\n                    (path, BadPrimitive(\"a bigint\", value)) |> Error\n            else\n                (path, BadPrimitive(\"a bigint\", value)) |> Error\n\n    let bool : Decoder<bool> =\n        fun path value ->\n            if Helpers.isBoolean value then\n                Ok(Helpers.asBool value)\n            else\n                (path, BadPrimitive(\"a boolean\", value)) |> Error\n\n    let float : Decoder<float> =\n        fun path value ->\n            if Helpers.isNumber value then\n                Ok(Helpers.asFloat value)\n            else\n                (path, BadPrimitive(\"a float\", value)) |> Error\n\n    let float32 : Decoder<float32> =\n        fun path value ->\n            if Helpers.isNumber value then\n                Ok(Helpers.asFloat32 value)\n            else\n                (path, BadPrimitive(\"a float32\", value)) |> Error\n\n    let decimal : Decoder<decimal> =\n        fun path value ->\n            if Helpers.isNumber value then\n                Helpers.asFloat value |> decimal |> Ok\n            elif Helpers.isString value then\n                match System.Decimal.TryParse (Helpers.asString value) with\n                | true, x -> Ok x\n                | _ -> (path, BadPrimitive(\"a decimal\", value)) |> Error\n            else\n                (path, BadPrimitive(\"a decimal\", value)) |> Error\n\n    let datetime : Decoder<System.DateTime> =\n        fun path value ->\n            if Helpers.isString value then\n                match System.DateTime.TryParse (Helpers.asString value) with\n                | true, x -> x.ToUniversalTime() |> Ok\n                | _ -> (path, BadPrimitive(\"a datetime\", value)) |> Error\n            else\n                (path, BadPrimitive(\"a datetime\", value)) |> Error\n\n    let datetimeOffset : Decoder<System.DateTimeOffset> =\n        fun path value ->\n            if Helpers.isString value then\n                match System.DateTimeOffset.TryParse(Helpers.asString value) with\n                | true, x -> Ok x\n                | _ -> (path, BadPrimitive(\"a datetimeoffset\", value)) |> Error\n            else\n                (path, BadPrimitive(\"a datetime\", value)) |> Error\n\n    let timespan : Decoder<System.TimeSpan> =\n        fun path value ->\n            if Helpers.isString value then\n                match System.TimeSpan.TryParse(Helpers.asString value) with\n                | true, x -> Ok x\n                | _ -> (path, BadPrimitive(\"a timespan\", value)) |> Error\n            else\n                (path, BadPrimitive(\"a timespan\", value)) |> Error\n\n    /////////////////////////\n    // Object primitives ///\n    ///////////////////////\n\n    let private decodeMaybeNull path (decoder : Decoder<'T>) value =\n        // The decoder may be an option decoder so give it an opportunity to check null values\n        match decoder path value with\n        | Ok v -> Ok(Some v)\n        | Error _ when Helpers.isNullValue value -> Ok None\n        | Error er -> Error er\n\n    let optional (fieldName : string) (decoder : Decoder<'value>) : Decoder<'value option> =\n        fun path value ->\n            if Helpers.isObject value then\n                let fieldValue = Helpers.getField fieldName value\n                if Helpers.isUndefined fieldValue then Ok None\n                else decodeMaybeNull (path + \".\" + fieldName) decoder fieldValue\n            else\n                Error(path, BadType(\"an object\", value))\n\n    let private badPathError fieldNames currentPath value =\n        let currentPath = defaultArg currentPath (\"$\"::fieldNames |> String.concat \".\")\n        let msg = \"an object with path `\" + (String.concat \".\" fieldNames) + \"`\"\n        Error(currentPath, BadPath (msg, value, List.tryLast fieldNames |> Option.defaultValue \"\"))\n\n    let optionalAt (fieldNames : string list) (decoder : Decoder<'value>) : Decoder<'value option> =\n        fun firstPath firstValue ->\n            ((firstPath, firstValue, None), fieldNames)\n            ||> List.fold (fun (curPath, curValue, res) field ->\n                match res with\n                | Some _ -> curPath, curValue, res\n                | None ->\n                    if Helpers.isNullValue curValue then\n                        curPath, curValue, Some (Ok None)\n                    elif Helpers.isObject curValue then\n                        let curValue = Helpers.getField field curValue\n                        curPath + \".\" + field, curValue, None\n                    else\n                        let res = Error(curPath, BadType(\"an object\", curValue))\n                        curPath, curValue, Some res)\n            |> function\n                | _, _, Some res -> res\n                | lastPath, lastValue, None ->\n                    if Helpers.isUndefined lastValue then Ok None\n                    else decodeMaybeNull lastPath decoder lastValue\n\n    let field (fieldName: string) (decoder : Decoder<'value>) : Decoder<'value> =\n        fun path value ->\n            if Helpers.isObject value then\n                let fieldValue = Helpers.getField fieldName value\n                if Helpers.isUndefined fieldValue then\n                    Error(path, BadField (\"an object with a field named `\" + fieldName + \"`\", value))\n                else\n                    decoder (path + \".\" + fieldName) fieldValue\n            else\n                Error(path, BadType(\"an object\", value))\n\n    let at (fieldNames: string list) (decoder : Decoder<'value>) : Decoder<'value> =\n        fun firstPath firstValue ->\n            ((firstPath, firstValue, None), fieldNames)\n            ||> List.fold (fun (curPath, curValue, res) field ->\n                match res with\n                | Some _ -> curPath, curValue, res\n                | None ->\n                    if Helpers.isNullValue curValue then\n                        let res = badPathError fieldNames (Some curPath) firstValue\n                        curPath, curValue, Some res\n                    elif Helpers.isObject curValue then\n                        let curValue = Helpers.getField field curValue\n                        if Helpers.isUndefined curValue then\n                            let res = badPathError fieldNames None firstValue\n                            curPath, curValue, Some res\n                        else\n                            curPath + \".\" + field, curValue, None\n                    else\n                        let res = Error(curPath, BadType(\"an object\", curValue))\n                        curPath, curValue, Some res)\n            |> function\n                | _, _, Some res -> res\n                | lastPath, lastValue, None ->\n                    decoder lastPath lastValue\n\n    let index (requestedIndex: int) (decoder : Decoder<'value>) : Decoder<'value> =\n        fun path value ->\n            let currentPath = path + \".[\" + (Operators.string requestedIndex) + \"]\"\n            if Helpers.isArray value then\n                let vArray = Helpers.asArray value\n                if requestedIndex < vArray.Length then\n                    decoder currentPath (vArray.[requestedIndex])\n                else\n                    let msg =\n                        \"a longer array. Need index `\"\n                            + (requestedIndex.ToString())\n                            + \"` but there are only `\"\n                            + (vArray.Length.ToString())\n                            + \"` entries\"\n\n                    (currentPath, TooSmallArray(msg, value))\n                    |> Error\n            else\n                (currentPath, BadPrimitive(\"an array\", value))\n                |> Error\n\n    let option (decoder : Decoder<'value>) : Decoder<'value option> =\n        fun path value ->\n            if Helpers.isNullValue value then Ok None\n            else decoder path value |> Result.map Some\n\n    //////////////////////\n    // Data structure ///\n    ////////////////////\n\n    let list (decoder : Decoder<'value>) : Decoder<'value list> =\n        fun path value ->\n            if Helpers.isArray value then\n                let mutable i = -1\n                let tokens = Helpers.asArray value\n                (Ok [], tokens) ||> Array.fold (fun acc value ->\n                    i <- i + 1\n                    match acc with\n                    | Error _ -> acc\n                    | Ok acc ->\n                        match decoder (path + \".[\" + (i.ToString()) + \"]\") value with\n                        | Error er -> Error er\n                        | Ok value -> Ok (value::acc))\n                |> Result.map List.rev\n            else\n                (path, BadPrimitive (\"a list\", value))\n                |> Error\n\n    let seq (decoder : Decoder<'value>) : Decoder<'value seq> =\n        fun path value ->\n            if Helpers.isArray value then\n                let mutable i = -1\n                let tokens = Helpers.asArray value\n                (Ok (seq []), tokens) ||> Array.fold (fun acc value ->\n                    i <- i + 1\n                    match acc with\n                    | Error _ -> acc\n                    | Ok acc ->\n                        match decoder (path + \".[\" + (i.ToString()) + \"]\") value with\n                        | Error er -> Error er\n                        | Ok value -> Ok (Seq.append [value] acc))\n                |> Result.map Seq.rev\n            else\n                (path, BadPrimitive (\"a seq\", value))\n                |> Error\n\n    let array (decoder : Decoder<'value>) : Decoder<'value array> =\n        fun path value ->\n            if Helpers.isArray value then\n                let mutable i = -1\n                let tokens = Helpers.asArray value\n                let arr = Array.zeroCreate tokens.Length\n                (Ok arr, tokens) ||> Array.fold (fun acc value ->\n                    i <- i + 1\n                    match acc with\n                    | Error _ -> acc\n                    | Ok acc ->\n                        match decoder (path + \".[\" + (i.ToString()) + \"]\") value with\n                        | Error er -> Error er\n                        | Ok value -> acc.[i] <- value; Ok acc)\n            else\n                (path, BadPrimitive (\"an array\", value))\n                |> Error\n\n    let keys: Decoder<string list> =\n        fun path value ->\n            if Helpers.isObject value then\n                Helpers.objectKeys value |> List.ofSeq |> Ok\n            else\n                (path, BadPrimitive (\"an object\", value))\n                |> Error\n\n    let keyValuePairs (decoder : Decoder<'value>) : Decoder<(string * 'value) list> =\n        fun path value ->\n            match keys path value with\n            | Ok objectKeys ->\n                (Ok [], objectKeys) ||> List.fold (fun acc prop ->\n                    match acc with\n                    | Error _ -> acc\n                    | Ok acc ->\n                        match Helpers.getField prop value |> decoder path with\n                        | Error er -> Error er\n                        | Ok value -> (prop, value)::acc |> Ok)\n                |> Result.map List.rev\n            | Error e -> Error e\n\n    //////////////////////////////\n    // Inconsistent Structure ///\n    ////////////////////////////\n\n    let oneOf (decoders : Decoder<'value> list) : Decoder<'value> =\n        fun path value ->\n            let rec runner (decoders : Decoder<'value> list) (errors : string list) =\n                match decoders with\n                | head::tail ->\n                    match fromValue path head value with\n                    | Ok v ->\n                        Ok v\n                    | Error error -> runner tail (errors @ [error])\n                | [] -> (path, BadOneOf errors) |> Error\n\n            runner decoders []\n\n    //////////////////////\n    // Fancy decoding ///\n    ////////////////////\n\n    let nil (output : 'a) : Decoder<'a> =\n        fun path value ->\n            if Helpers.isNullValue value then\n                Ok output\n            else\n                (path, BadPrimitive(\"null\", value)) |> Error\n\n    let value _ v = Ok v\n\n    let succeed (output : 'a) : Decoder<'a> =\n        fun _ _ ->\n            Ok output\n\n    let fail (msg: string) : Decoder<'a> =\n        fun path _ ->\n            (path, FailMessage msg) |> Error\n\n    let andThen (cb: 'a -> Decoder<'b>) (decoder : Decoder<'a>) : Decoder<'b> =\n        fun path value ->\n            match decoder path value with\n            | Error error -> Error error\n            | Ok result -> cb result path value\n\n    let all (decoders: Decoder<'a> list): Decoder<'a list> =\n        fun path value ->\n            let rec runner (decoders: Decoder<'a> list) (values: 'a list) =\n                match decoders with\n                | decoder :: tail ->\n                    match decoder path value with\n                    | Ok value -> runner tail (values @ [ value ])\n                    | Error error -> Error error\n                | [] -> Ok values\n\n            runner decoders []\n\n    /////////////////////\n    // Map functions ///\n    ///////////////////\n\n    let map\n        (ctor : 'a -> 'value)\n        (d1 : Decoder<'a>) : Decoder<'value> =\n        fun path value ->\n            match d1 path value with\n            | Ok v1 -> Ok (ctor v1)\n            | Error er -> Error er\n\n    let map2\n        (ctor : 'a -> 'b -> 'value)\n        (d1 : Decoder<'a>)\n        (d2 : Decoder<'b>) : Decoder<'value> =\n        fun path value ->\n            match d1 path value, d2 path value with\n            | Ok v1, Ok v2 -> Ok (ctor v1 v2)\n            | Error er,_ -> Error er\n            | _,Error er -> Error er\n\n    let map3\n        (ctor : 'a -> 'b -> 'c -> 'value)\n        (d1 : Decoder<'a>)\n        (d2 : Decoder<'b>)\n        (d3 : Decoder<'c>) : Decoder<'value> =\n        fun path value ->\n            match d1 path value, d2 path value, d3 path value with\n            | Ok v1, Ok v2, Ok v3 -> Ok (ctor v1 v2 v3)\n            | Error er,_,_ -> Error er\n            | _,Error er,_ -> Error er\n            | _,_,Error er -> Error er\n\n    let map4\n        (ctor : 'a -> 'b -> 'c -> 'd -> 'value)\n        (d1 : Decoder<'a>)\n        (d2 : Decoder<'b>)\n        (d3 : Decoder<'c>)\n        (d4 : Decoder<'d>) : Decoder<'value> =\n        fun path value ->\n            match d1 path value, d2 path value, d3 path value, d4 path value with\n            | Ok v1, Ok v2, Ok v3, Ok v4 -> Ok (ctor v1 v2 v3 v4)\n            | Error er,_,_,_ -> Error er\n            | _,Error er,_,_ -> Error er\n            | _,_,Error er,_ -> Error er\n            | _,_,_,Error er -> Error er\n\n    let map5\n        (ctor : 'a -> 'b -> 'c -> 'd -> 'e -> 'value)\n        (d1 : Decoder<'a>)\n        (d2 : Decoder<'b>)\n        (d3 : Decoder<'c>)\n        (d4 : Decoder<'d>)\n        (d5 : Decoder<'e>) : Decoder<'value> =\n        fun path value ->\n            match d1 path value, d2 path value, d3 path value, d4 path value, d5 path value with\n            | Ok v1, Ok v2, Ok v3, Ok v4, Ok v5 -> Ok (ctor v1 v2 v3 v4 v5)\n            | Error er,_,_,_,_ -> Error er\n            | _,Error er,_,_,_ -> Error er\n            | _,_,Error er,_,_ -> Error er\n            | _,_,_,Error er,_ -> Error er\n            | _,_,_,_,Error er -> Error er\n\n    let map6\n        (ctor : 'a -> 'b -> 'c -> 'd -> 'e -> 'f -> 'value)\n        (d1 : Decoder<'a>)\n        (d2 : Decoder<'b>)\n        (d3 : Decoder<'c>)\n        (d4 : Decoder<'d>)\n        (d5 : Decoder<'e>)\n        (d6 : Decoder<'f>) : Decoder<'value> =\n        fun path value ->\n            match d1 path value, d2 path value, d3 path value, d4 path value, d5 path value, d6 path value with\n            | Ok v1, Ok v2, Ok v3, Ok v4, Ok v5, Ok v6 -> Ok (ctor v1 v2 v3 v4 v5 v6)\n            | Error er,_,_,_,_,_ -> Error er\n            | _,Error er,_,_,_,_ -> Error er\n            | _,_,Error er,_,_,_ -> Error er\n            | _,_,_,Error er,_,_ -> Error er\n            | _,_,_,_,Error er,_ -> Error er\n            | _,_,_,_,_,Error er -> Error er\n\n    let map7\n        (ctor : 'a -> 'b -> 'c -> 'd -> 'e -> 'f -> 'g -> 'value)\n        (d1 : Decoder<'a>)\n        (d2 : Decoder<'b>)\n        (d3 : Decoder<'c>)\n        (d4 : Decoder<'d>)\n        (d5 : Decoder<'e>)\n        (d6 : Decoder<'f>)\n        (d7 : Decoder<'g>) : Decoder<'value> =\n        fun path value ->\n            match d1 path value, d2 path value, d3 path value, d4 path value, d5 path value, d6 path value, d7 path value with\n            | Ok v1, Ok v2, Ok v3, Ok v4, Ok v5, Ok v6, Ok v7 -> Ok (ctor v1 v2 v3 v4 v5 v6 v7)\n            | Error er,_,_,_,_,_,_ -> Error er\n            | _,Error er,_,_,_,_,_ -> Error er\n            | _,_,Error er,_,_,_,_ -> Error er\n            | _,_,_,Error er,_,_,_ -> Error er\n            | _,_,_,_,Error er,_,_ -> Error er\n            | _,_,_,_,_,Error er,_ -> Error er\n            | _,_,_,_,_,_,Error er -> Error er\n\n    let map8\n        (ctor : 'a -> 'b -> 'c -> 'd -> 'e -> 'f -> 'g -> 'h -> 'value)\n        (d1 : Decoder<'a>)\n        (d2 : Decoder<'b>)\n        (d3 : Decoder<'c>)\n        (d4 : Decoder<'d>)\n        (d5 : Decoder<'e>)\n        (d6 : Decoder<'f>)\n        (d7 : Decoder<'g>)\n        (d8 : Decoder<'h>) : Decoder<'value> =\n        fun path value ->\n            match d1 path value, d2 path value, d3 path value, d4 path value, d5 path value, d6 path value, d7 path value, d8 path value with\n            | Ok v1, Ok v2, Ok v3, Ok v4, Ok v5, Ok v6, Ok v7, Ok v8 -> Ok (ctor v1 v2 v3 v4 v5 v6 v7 v8)\n            | Error er,_,_,_,_,_,_,_ -> Error er\n            | _,Error er,_,_,_,_,_,_ -> Error er\n            | _,_,Error er,_,_,_,_,_ -> Error er\n            | _,_,_,Error er,_,_,_,_ -> Error er\n            | _,_,_,_,Error er,_,_,_ -> Error er\n            | _,_,_,_,_,Error er,_,_ -> Error er\n            | _,_,_,_,_,_,Error er,_ -> Error er\n            | _,_,_,_,_,_,_,Error er -> Error er\n\n    let dict (decoder : Decoder<'value>) : Decoder<Map<string, 'value>> =\n        map Map.ofList (keyValuePairs decoder)\n\n    //////////////////////\n    // Object builder ///\n    ////////////////////\n\n    type IRequiredGetter =\n        abstract Field : string -> Decoder<'a> -> 'a\n        abstract At : List<string> -> Decoder<'a> -> 'a\n        abstract Raw : Decoder<'a> -> 'a\n\n    type IOptionalGetter =\n        abstract Field : string -> Decoder<'a> -> 'a option\n        abstract At : List<string> -> Decoder<'a> -> 'a option\n        abstract Raw : Decoder<'a> -> 'a option\n\n    type IGetters =\n        abstract Required: IRequiredGetter\n        abstract Optional: IOptionalGetter\n\n    let private unwrapWith (errors: ResizeArray<DecoderError>) path (decoder: Decoder<'T>) value: 'T =\n        match decoder path value with\n        | Ok v -> v\n        | Error er -> errors.Add(er); Unchecked.defaultof<'T>\n\n    type Getters<'T>(path: string, v: 'T) =\n        let mutable errors = ResizeArray<DecoderError>()\n        let required =\n            { new IRequiredGetter with\n                member __.Field (fieldName : string) (decoder : Decoder<_>) =\n                    unwrapWith errors path (field fieldName decoder) v\n                member __.At (fieldNames : string list) (decoder : Decoder<_>) =\n                    unwrapWith errors path (at fieldNames decoder) v\n                member __.Raw (decoder: Decoder<_>) =\n                    unwrapWith errors path decoder v }\n        let optional =\n            { new IOptionalGetter with\n                member __.Field (fieldName : string) (decoder : Decoder<_>) =\n                    unwrapWith errors path (optional fieldName decoder) v\n                member __.At (fieldNames : string list) (decoder : Decoder<_>) =\n                    unwrapWith errors path (optionalAt fieldNames decoder) v\n                member __.Raw (decoder: Decoder<_>) =\n                    match decoder path v with\n                    | Ok v -> Some v\n                    | Error((_, reason) as error) ->\n                        match reason with\n                        | BadPrimitive(_,v)\n                        | BadPrimitiveExtra(_,v,_)\n                        | BadType(_,v) ->\n                            if Helpers.isNullValue v then None\n                            else errors.Add(error); Unchecked.defaultof<_>\n                        | BadField _\n                        | BadPath _ -> None\n                        | TooSmallArray _\n                        | FailMessage _\n                        | BadOneOf _ -> errors.Add(error); Unchecked.defaultof<_> }\n        member __.Errors: _ list = Seq.toList errors\n        interface IGetters with\n            member __.Required = required\n            member __.Optional = optional\n\n    let object (builder: IGetters -> 'value) : Decoder<'value> =\n        fun path v ->\n            let getters = Getters(path, v)\n            let result = builder getters\n            match getters.Errors with\n            | [] -> Ok result\n            | fst::_ as errors ->\n                if errors.Length > 1 then\n                    let errors = List.map errorToString errors\n                    (path, BadOneOf errors) |> Error\n                else\n                    Error fst\n\n    ///////////////////////\n    // Tuples decoders ///\n    ////////////////////\n\n    let tuple2 (decoder1: Decoder<'T1>) (decoder2: Decoder<'T2>) : Decoder<'T1 * 'T2> =\n        index 0 decoder1\n        |> andThen (fun v1 ->\n            index 1 decoder2\n            |> andThen (fun v2 ->\n                succeed (v1, v2)\n            )\n        )\n\n    let tuple3 (decoder1: Decoder<'T1>)\n               (decoder2: Decoder<'T2>)\n               (decoder3: Decoder<'T3>) : Decoder<'T1 * 'T2 * 'T3> =\n        index 0 decoder1\n        |> andThen (fun v1 ->\n            index 1 decoder2\n            |> andThen (fun v2 ->\n                index 2 decoder3\n                |> andThen (fun v3 ->\n                    succeed (v1, v2, v3)\n                )\n            )\n        )\n\n    let tuple4 (decoder1: Decoder<'T1>)\n               (decoder2: Decoder<'T2>)\n               (decoder3: Decoder<'T3>)\n               (decoder4: Decoder<'T4>) : Decoder<'T1 * 'T2 * 'T3 * 'T4> =\n        index 0 decoder1\n        |> andThen (fun v1 ->\n            index 1 decoder2\n            |> andThen (fun v2 ->\n                index 2 decoder3\n                |> andThen (fun v3 ->\n                    index 3 decoder4\n                    |> andThen (fun v4 ->\n                        succeed (v1, v2, v3, v4)\n                    )\n                )\n            )\n        )\n\n    let tuple5 (decoder1: Decoder<'T1>)\n               (decoder2: Decoder<'T2>)\n               (decoder3: Decoder<'T3>)\n               (decoder4: Decoder<'T4>)\n               (decoder5: Decoder<'T5>) : Decoder<'T1 * 'T2 * 'T3 * 'T4 * 'T5> =\n        index 0 decoder1\n        |> andThen (fun v1 ->\n            index 1 decoder2\n            |> andThen (fun v2 ->\n                index 2 decoder3\n                |> andThen (fun v3 ->\n                    index 3 decoder4\n                    |> andThen (fun v4 ->\n                        index 4 decoder5\n                        |> andThen (fun v5 ->\n                            succeed (v1, v2, v3, v4, v5)\n                        )\n                    )\n                )\n            )\n        )\n\n    let tuple6 (decoder1: Decoder<'T1>)\n               (decoder2: Decoder<'T2>)\n               (decoder3: Decoder<'T3>)\n               (decoder4: Decoder<'T4>)\n               (decoder5: Decoder<'T5>)\n               (decoder6: Decoder<'T6>) : Decoder<'T1 * 'T2 * 'T3 * 'T4 * 'T5 * 'T6> =\n        index 0 decoder1\n        |> andThen (fun v1 ->\n            index 1 decoder2\n            |> andThen (fun v2 ->\n                index 2 decoder3\n                |> andThen (fun v3 ->\n                    index 3 decoder4\n                    |> andThen (fun v4 ->\n                        index 4 decoder5\n                        |> andThen (fun v5 ->\n                            index 5 decoder6\n                            |> andThen (fun v6 ->\n                                succeed (v1, v2, v3, v4, v5, v6)\n                            )\n                        )\n                    )\n                )\n            )\n        )\n\n    let tuple7 (decoder1: Decoder<'T1>)\n               (decoder2: Decoder<'T2>)\n               (decoder3: Decoder<'T3>)\n               (decoder4: Decoder<'T4>)\n               (decoder5: Decoder<'T5>)\n               (decoder6: Decoder<'T6>)\n               (decoder7: Decoder<'T7>) : Decoder<'T1 * 'T2 * 'T3 * 'T4 * 'T5 * 'T6 * 'T7> =\n        index 0 decoder1\n        |> andThen (fun v1 ->\n            index 1 decoder2\n            |> andThen (fun v2 ->\n                index 2 decoder3\n                |> andThen (fun v3 ->\n                    index 3 decoder4\n                    |> andThen (fun v4 ->\n                        index 4 decoder5\n                        |> andThen (fun v5 ->\n                            index 5 decoder6\n                            |> andThen (fun v6 ->\n                                index 6 decoder7\n                                |> andThen (fun v7 ->\n                                    succeed (v1, v2, v3, v4, v5, v6, v7)\n                                )\n                            )\n                        )\n                    )\n                )\n            )\n        )\n\n    let tuple8 (decoder1: Decoder<'T1>)\n               (decoder2: Decoder<'T2>)\n               (decoder3: Decoder<'T3>)\n               (decoder4: Decoder<'T4>)\n               (decoder5: Decoder<'T5>)\n               (decoder6: Decoder<'T6>)\n               (decoder7: Decoder<'T7>)\n               (decoder8: Decoder<'T8>) : Decoder<'T1 * 'T2 * 'T3 * 'T4 * 'T5 * 'T6 * 'T7 * 'T8> =\n        index 0 decoder1\n        |> andThen (fun v1 ->\n            index 1 decoder2\n            |> andThen (fun v2 ->\n                index 2 decoder3\n                |> andThen (fun v3 ->\n                    index 3 decoder4\n                    |> andThen (fun v4 ->\n                        index 4 decoder5\n                        |> andThen (fun v5 ->\n                            index 5 decoder6\n                            |> andThen (fun v6 ->\n                                index 6 decoder7\n                                |> andThen (fun v7 ->\n                                    index 7 decoder8\n                                    |> andThen (fun v8 ->\n                                        succeed (v1, v2, v3, v4, v5, v6, v7, v8)\n                                    )\n                                )\n                            )\n                        )\n                    )\n                )\n            )\n        )\n\n    ////////////\n    // Enum ///\n    /////////\n\n    #if !FABLE_REPL_LIB\n    module Enum =\n\n        let inline byte<'TEnum when 'TEnum : enum<byte>> : Decoder<'TEnum> =\n            byte\n            |> andThen (fun value ->\n                LanguagePrimitives.EnumOfValue<byte, 'TEnum> value\n                |> succeed\n            )\n\n        let inline sbyte<'TEnum when 'TEnum : enum<sbyte>> : Decoder<'TEnum> =\n            sbyte\n            |> andThen (fun value ->\n                LanguagePrimitives.EnumOfValue<sbyte, 'TEnum> value\n                |> succeed\n            )\n\n        let inline int16<'TEnum when 'TEnum : enum<int16>> : Decoder<'TEnum> =\n            int16\n            |> andThen (fun value ->\n                LanguagePrimitives.EnumOfValue<int16, 'TEnum> value\n                |> succeed\n            )\n\n        let inline uint16<'TEnum when 'TEnum : enum<uint16>> : Decoder<'TEnum> =\n            uint16\n            |> andThen (fun value ->\n                LanguagePrimitives.EnumOfValue<uint16, 'TEnum> value\n                |> succeed\n            )\n\n        let inline int<'TEnum when 'TEnum : enum<int>> : Decoder<'TEnum> =\n            int\n            |> andThen (fun value ->\n                LanguagePrimitives.EnumOfValue<int, 'TEnum> value\n                |> succeed\n            )\n\n        let inline uint32<'TEnum when 'TEnum : enum<uint32>> : Decoder<'TEnum> =\n            uint32\n            |> andThen (fun value ->\n                LanguagePrimitives.EnumOfValue<uint32, 'TEnum> value\n                |> succeed\n            )\n    #endif\n\n    //////////////////\n    // Reflection ///\n    ////////////////\n\n    open FSharp.Reflection\n\n    // As generics are erased by Fable, let's just do an unsafe cast for performance\n    let inline boxDecoder (d: Decoder<'T>): BoxedDecoder =\n        !!d // d >> Result.map box\n\n    let inline unboxDecoder (d: BoxedDecoder): Decoder<'T> =\n        !!d // d >> Result.map unbox\n\n    // This is used to force Fable use a generic comparer for map keys\n    let private toMap<'key, 'value when 'key: comparison> (xs: ('key*'value) seq) = Map.ofSeq xs\n    let private toSet<'key when 'key: comparison> (xs: 'key seq) = Set.ofSeq xs\n\n    let private autoObject (decoderInfos: (string * BoxedDecoder)[]) (path : string) (value: JsonValue) =\n        if not (Helpers.isObject value) then\n            (path, BadPrimitive (\"an object\", value)) |> Error\n        else\n            (decoderInfos, Ok []) ||> Array.foldBack (fun (name, decoder) acc ->\n                match acc with\n                | Error _ -> acc\n                | Ok result ->\n                    Helpers.getField name value\n                    |> decoder (path + \".\" + name)\n                    |> Result.map (fun v -> v::result))\n\n    let inline private enumDecoder<'UnderlineType when 'UnderlineType : equality>\n        (decoder : Decoder<'UnderlineType>)\n        (toString : 'UnderlineType -> string)\n        (t: System.Type) =\n\n            fun path value ->\n                match decoder path value with\n                | Ok enumValue ->\n                    System.Enum.GetValues(t)\n                    |> Seq.cast<'UnderlineType>\n                    |> Seq.contains enumValue\n                    |> function\n                    | true ->\n                        System.Enum.Parse(t, toString enumValue)\n                        |> Ok\n                    | false ->\n                        (path, BadPrimitiveExtra(t.FullName, value, \"Unkown value provided for the enum\"))\n                        |> Error\n                | Error msg ->\n                    Error msg\n\n    let private autoObject2 (keyDecoder: BoxedDecoder) (valueDecoder: BoxedDecoder) (path : string) (value: JsonValue) =\n        if not (Helpers.isObject value) then\n            (path, BadPrimitive (\"an object\", value)) |> Error\n        else\n            (Ok [], Helpers.objectKeys(value)) ||> Seq.fold (fun acc name ->\n                match acc with\n                | Error _ -> acc\n                | Ok acc ->\n                    match keyDecoder path name with\n                    | Error er -> Error er\n                    | Ok k ->\n                        Helpers.getField name value\n                        |> valueDecoder (path + \".\" + name)\n                        |> function\n                            | Error er -> Error er\n                            | Ok v -> (k,v)::acc |> Ok)\n\n    let private mixedArray msg (decoders: BoxedDecoder[]) (path: string) (values: JsonValue[]): Result<JsonValue list, DecoderError> =\n        if decoders.Length <> values.Length then\n            (path, sprintf \"Expected %i %s but got %i\" decoders.Length msg values.Length\n            |> FailMessage) |> Error\n        else\n            (values, decoders, Ok [])\n            |||> Array.foldBack2 (fun value decoder acc ->\n                match acc with\n                | Error _ -> acc\n                | Ok result -> decoder path value |> Result.map (fun v -> v::result))\n\n    let rec private makeUnion extra caseStrategy t name (path : string) (values: JsonValue[]) =\n        let uci =\n            FSharpType.GetUnionCases(t, allowAccessToPrivateRepresentation=true)\n            |> Array.tryFind (fun x -> x.Name = name)\n        match uci with\n        | None -> (path, FailMessage(\"Cannot find case \" + name + \" in \" + t.FullName)) |> Error\n        | Some uci ->\n            if values.Length = 0 then\n                FSharpValue.MakeUnion(uci, [||], allowAccessToPrivateRepresentation=true) |> Ok\n            else\n                let decoders = uci.GetFields() |> Array.map (fun fi -> autoDecoder extra caseStrategy false fi.PropertyType)\n                mixedArray \"union fields\" decoders path values\n                |> Result.map (fun values -> FSharpValue.MakeUnion(uci, List.toArray values, allowAccessToPrivateRepresentation=true))\n\n    and private autoDecodeRecordsAndUnions extra (caseStrategy : CaseStrategy) (isOptional : bool) (t: System.Type) : BoxedDecoder =\n        // Add the decoder to extra in case one of the fields is recursive\n        let decoderRef = ref Unchecked.defaultof<_>\n        let extra = extra |> Map.add t.FullName decoderRef\n        let decoder =\n            if FSharpType.IsRecord(t, allowAccessToPrivateRepresentation=true) then\n                let decoders =\n                    FSharpType.GetRecordFields(t, allowAccessToPrivateRepresentation=true)\n                    |> Array.map (fun fi ->\n                        let name = Util.Casing.convert caseStrategy fi.Name\n                        name, autoDecoder extra caseStrategy false fi.PropertyType)\n                fun path value ->\n                    autoObject decoders path value\n                    |> Result.map (fun xs -> FSharpValue.MakeRecord(t, List.toArray xs, allowAccessToPrivateRepresentation=true))\n\n            elif FSharpType.IsUnion(t, allowAccessToPrivateRepresentation=true) then\n                fun path (value: JsonValue) ->\n                    if Helpers.isString(value) then\n                        let name = Helpers.asString value\n                        makeUnion extra caseStrategy t name path [||]\n                    elif Helpers.isArray(value) then\n                        let values = Helpers.asArray value\n                        let name = Helpers.asString values.[0]\n                        makeUnion extra caseStrategy t name path values.[1..]\n                    else (path, BadPrimitive(\"a string or array\", value)) |> Error\n\n            else\n                if isOptional then\n                    // The error will only happen at runtime if the value is not null\n                    // See https://github.com/MangelMaxime/Thoth/pull/84#issuecomment-444837773\n                    boxDecoder(fun path value -> Error(path, BadType(\"an extra coder for \" + t.FullName, value)))\n                else\n                    // Don't use failwithf here, for some reason F#/Fable compiles it as a function\n                    // when the return type is a function too, so it doesn't fail immediately\n                    sprintf \"Cannot generate auto decoder for %s. Please pass an extra decoder.\" t.FullName |> failwith\n        decoderRef := decoder\n        decoder\n\n    and private autoDecoder (extra: Map<string, ref<BoxedDecoder>>) caseStrategy (isOptional : bool) (t: System.Type) : BoxedDecoder =\n      let fullname = t.FullName\n      match Map.tryFind fullname extra with\n      | Some decoderRef -> fun path value -> decoderRef.contents path value\n      | None ->\n        if t.IsArray then\n            let decoder = t.GetElementType() |> autoDecoder extra caseStrategy false\n            array decoder |> boxDecoder\n        elif t.IsEnum then\n            let enumType = System.Enum.GetUnderlyingType(t).FullName\n            if enumType = typeof<sbyte>.FullName then\n                enumDecoder<sbyte> sbyte Operators.string t |> boxDecoder\n            elif enumType = typeof<byte>.FullName then\n                enumDecoder<byte> byte Operators.string t |> boxDecoder\n            elif enumType = typeof<int16>.FullName then\n                enumDecoder<int16> int16 Operators.string t |> boxDecoder\n            elif enumType = typeof<uint16>.FullName then\n                enumDecoder<uint16> uint16 Operators.string t |> boxDecoder\n            elif enumType = typeof<int>.FullName then\n                enumDecoder<int> int Operators.string t |> boxDecoder\n            elif enumType = typeof<uint32>.FullName then\n                enumDecoder<uint32> uint32 Operators.string t |> boxDecoder\n            else\n                failwithf\n                    \"\"\"Cannot generate auto decoder for %s.\nThoth.Json.Net only support the folluwing enum types:\n- sbyte\n- byte\n- int16\n- uint16\n- int\n- uint32\nIf you can't use one of these types, please pass an extra decoder.\n                    \"\"\" t.FullName\n        elif t.IsGenericType then\n            if FSharpType.IsTuple(t) then\n                let decoders = FSharpType.GetTupleElements(t) |> Array.map (autoDecoder extra caseStrategy false)\n                fun path value ->\n                    if Helpers.isArray value then\n                        mixedArray \"tuple elements\" decoders path (Helpers.asArray value)\n                        |> Result.map (fun xs -> FSharpValue.MakeTuple(List.toArray xs, t))\n                    else (path, BadPrimitive (\"an array\", value)) |> Error\n            else\n                let fullname = t.GetGenericTypeDefinition().FullName\n                if fullname = typedefof<obj option>.FullName then\n                    t.GenericTypeArguments.[0] |> (autoDecoder extra caseStrategy true) |> option |> boxDecoder\n                elif fullname = typedefof<obj list>.FullName then\n                    t.GenericTypeArguments.[0] |> (autoDecoder extra caseStrategy false) |> list |> boxDecoder\n                // Disable seq support because I don't know how to implement it on Thoth.Json.Net side\n                // elif fullname = typedefof<obj seq>.FullName then\n                //     t.GenericTypeArguments.[0] |> (autoDecoder extra caseStrategy false) |> seq |> boxDecoder\n                elif fullname = typedefof< Map<string, obj> >.FullName then\n                    let keyDecoder = t.GenericTypeArguments.[0] |> autoDecoder extra caseStrategy false\n                    let valueDecoder = t.GenericTypeArguments.[1] |> autoDecoder extra caseStrategy false\n                    oneOf [\n                        autoObject2 keyDecoder valueDecoder\n                        list (tuple2 keyDecoder valueDecoder)\n                    ] |> map (fun ar -> toMap (unbox ar) |> box)\n                elif fullname = typedefof< Set<string> >.FullName then\n                    let decoder = t.GenericTypeArguments.[0] |> autoDecoder extra caseStrategy false\n                    fun path value ->\n                        match array decoder path value with\n                        | Error er -> Error er\n                        | Ok ar -> toSet (unbox ar) |> box |> Ok\n                else\n                    autoDecodeRecordsAndUnions extra caseStrategy isOptional t\n        else\n            if fullname = typeof<bool>.FullName then\n                boxDecoder bool\n            elif fullname = typedefof<unit>.FullName then\n                boxDecoder unit\n            elif fullname = typeof<string>.FullName then\n                boxDecoder string\n            elif fullname = typeof<sbyte>.FullName then\n                boxDecoder sbyte\n            elif fullname = typeof<byte>.FullName then\n                boxDecoder byte\n            elif fullname = typeof<int16>.FullName then\n                boxDecoder int16\n            elif fullname = typeof<uint16>.FullName then\n                boxDecoder uint16\n            elif fullname = typeof<int>.FullName then\n                boxDecoder int\n            elif fullname = typeof<uint32>.FullName then\n                boxDecoder uint32\n            elif fullname = typeof<float>.FullName then\n                boxDecoder float\n            elif fullname = typeof<float32>.FullName then\n                boxDecoder float32\n            // These number types require extra libraries in Fable. To prevent penalizing\n            // all users, extra decoders (withInt64, etc) must be passed when they're needed.\n\n            // elif fullname = typeof<int64>.FullName then\n            //     boxDecoder int64\n            // elif fullname = typeof<uint64>.FullName then\n            //     boxDecoder uint64\n            // elif fullname = typeof<bigint>.FullName then\n            //     boxDecoder bigint\n            // elif fullname = typeof<decimal>.FullName then\n            //     boxDecoder decimal\n            elif fullname = typeof<System.DateTime>.FullName then\n                boxDecoder datetime\n            elif fullname = typeof<System.DateTimeOffset>.FullName then\n                boxDecoder datetimeOffset\n            elif fullname = typeof<System.TimeSpan>.FullName then\n                boxDecoder timespan\n            elif fullname = typeof<System.Guid>.FullName then\n                boxDecoder guid\n            elif fullname = typeof<obj>.FullName then\n                fun _ v -> Ok v\n            else autoDecodeRecordsAndUnions extra caseStrategy isOptional t\n\n    let private makeExtra (extra: ExtraCoders option) =\n        match extra with\n        | None -> Map.empty\n        | Some e -> Map.map (fun _ (_,dec) -> ref dec) e.Coders\n\n    type Auto =\n        static member generateBoxedDecoderCached(t: System.Type, ?caseStrategy : CaseStrategy, ?extra: ExtraCoders): BoxedDecoder =\n            let caseStrategy = defaultArg caseStrategy PascalCase\n\n            let key =\n                t.FullName\n                |> (+) (Operators.string caseStrategy)\n                |> (+) (extra |> Option.map (fun e -> e.Hash) |> Option.defaultValue \"\")\n\n            Util.CachedDecoders.GetOrAdd(key, fun _ -> autoDecoder (makeExtra extra) caseStrategy false t)\n\n        static member inline generateDecoderCached<'T>(?caseStrategy : CaseStrategy, ?extra: ExtraCoders): Decoder<'T> =\n            Auto.generateBoxedDecoderCached(typeof<'T>, ?caseStrategy=caseStrategy, ?extra=extra) |> unboxDecoder\n\n        static member generateBoxedDecoder(t: System.Type, ?caseStrategy : CaseStrategy, ?extra: ExtraCoders): BoxedDecoder =\n            let caseStrategy = defaultArg caseStrategy PascalCase\n            autoDecoder (makeExtra extra) caseStrategy false t\n\n        static member inline generateDecoder<'T>(?caseStrategy : CaseStrategy, ?extra: ExtraCoders): Decoder<'T> =\n            Auto.generateBoxedDecoder(typeof<'T>, ?caseStrategy=caseStrategy, ?extra=extra) |> unboxDecoder\n\n        static member inline fromString<'T>(json: string, ?caseStrategy : CaseStrategy, ?extra: ExtraCoders): Result<'T, string> =\n            let decoder = Auto.generateDecoder<'T>(?caseStrategy=caseStrategy, ?extra=extra)\n            fromString decoder json\n\n        static member inline unsafeFromString<'T>(json: string, ?caseStrategy : CaseStrategy, ?extra: ExtraCoders): 'T =\n            let decoder = Auto.generateDecoder<'T>(?caseStrategy=caseStrategy, ?extra=extra)\n            match fromString decoder json with\n            | Ok x -> x\n            | Error msg -> failwith msg\n","namespace Thoth.Json\nopen System.Text.RegularExpressions\n\n[<RequireQualifiedAccess>]\nmodule Encode =\n\n    open System.Collections.Generic\n    open System.Globalization\n    open Fable.Core\n    open Fable.Core.JsInterop\n\n    [<Emit(\"Array.from($0)\")>]\n    let private arrayFrom(x: JsonValue seq): JsonValue = jsNative\n\n    ///**Description**\n    /// Encode a string\n    ///\n    ///**Parameters**\n    ///  * `value` - parameter of type `string`\n    ///\n    ///**Output Type**\n    ///  * `Value`\n    ///\n    ///**Exceptions**\n    ///\n    let inline string (value : string) : JsonValue =\n        box value\n\n    ///**Description**\n    /// Encode a GUID\n    ///\n    ///**Parameters**\n    ///  * `value` - parameter of type `System.Guid`\n    ///\n    ///**Output Type**\n    ///  * `Value`\n    ///\n    ///**Exceptions**\n    ///\n    let guid (value : System.Guid) : JsonValue =\n        box (value.ToString())\n\n    ///**Description**\n    /// Encode a Float. `Infinity` and `NaN` are encoded as `null`.\n    ///\n    ///**Parameters**\n    ///  * `value` - parameter of type `float`\n    ///\n    ///**Output Type**\n    ///  * `Value`\n    ///\n    ///**Exceptions**\n    ///\n    let inline float (value : float) : JsonValue =\n        box value\n\n    let inline float32 (value : float32) : JsonValue =\n        box value\n\n    ///**Description**\n    /// Encode a Decimal.\n    ///\n    ///**Parameters**\n    ///  * `value` - parameter of type `decimal`\n    ///\n    ///**Output Type**\n    ///  * `Value`\n    ///\n    ///**Exceptions**\n    ///\n    let decimal (value : decimal) : JsonValue =\n        value.ToString() |> string\n\n    ///**Description**\n    /// Encode null\n    ///\n    ///**Parameters**\n    ///\n    ///**Output Type**\n    ///  * `Value`\n    ///\n    ///**Exceptions**\n    ///\n    let nil : JsonValue =\n        box null\n\n    ///**Description**\n    /// Encode a bool\n    ///**Parameters**\n    ///  * `value` - parameter of type `bool`\n    ///\n    ///**Output Type**\n    ///  * `Value`\n    ///\n    ///**Exceptions**\n    ///\n    let inline bool (value : bool) : JsonValue =\n        box value\n\n    ///**Description**\n    /// Encode an object\n    ///\n    ///**Parameters**\n    ///  * `values` - parameter of type `(string * Value) list`\n    ///\n    ///**Output Type**\n    ///  * `Value`\n    ///\n    ///**Exceptions**\n    ///\n    let object (values : (string * JsonValue) seq) : JsonValue =\n        let o = obj()\n        for (key, value) in values do\n            o?(key) <- value\n        box o\n\n    ///**Description**\n    /// Encode an array\n    ///\n    ///**Parameters**\n    ///  * `values` - parameter of type `Value array`\n    ///\n    ///**Output Type**\n    ///  * `Value`\n    ///\n    ///**Exceptions**\n    ///\n    let inline array (values : JsonValue array) : JsonValue =\n        box values\n\n    ///**Description**\n    /// Encode a list\n    ///**Parameters**\n    ///  * `values` - parameter of type `Value list`\n    ///\n    ///**Output Type**\n    ///  * `Value`\n    ///\n    ///**Exceptions**\n    ///\n    let list (values : JsonValue list) : JsonValue =\n        // Don't use List.toArray as it may create a typed array\n        arrayFrom values\n\n    let seq (values : JsonValue seq) : JsonValue =\n        arrayFrom values\n\n    ///**Description**\n    /// Encode a dictionary\n    ///**Parameters**\n    ///  * `values` - parameter of type `Map<string, Value>`\n    ///\n    ///**Output Type**\n    ///  * `Value`\n    ///\n    ///**Exceptions**\n    ///\n    let dict (values : Map<string, JsonValue>) : JsonValue =\n        values\n        |> Map.toList\n        |> object\n\n    let bigint (value : bigint) : JsonValue =\n        box (value.ToString())\n\n    let datetimeOffset (value : System.DateTimeOffset) : JsonValue =\n        value.ToString(\"O\", CultureInfo.InvariantCulture) |> string\n\n    /// **Description**\n    /// Encode a timespan\n    /// **Parameters**\n    ///   * `value` - parameter of type `System.TimeSpan`\n    ///\n    /// **Output Type**\n    ///   * `Value`\n    ///\n    /// **Exceptions**\n    ///\n    let timespan (value : System.TimeSpan) : JsonValue =\n        value.ToString() |> string\n\n    let inline sbyte (value : sbyte) : JsonValue =\n        box value\n\n    let inline byte (value : byte) : JsonValue =\n        box value\n\n    let inline int16 (value : int16) : JsonValue =\n        box value\n\n    let inline uint16 (value : uint16) : JsonValue =\n        box value\n\n    let inline int (value : int) : JsonValue =\n        box value\n\n    let inline uint32 (value : uint32) : JsonValue =\n        box value\n\n    let int64 (value : int64) : JsonValue =\n        box (value.ToString(CultureInfo.InvariantCulture))\n\n    let uint64 (value : uint64) : JsonValue =\n        box (value.ToString(CultureInfo.InvariantCulture))\n\n    let unit () : JsonValue =\n        box null\n\n    let tuple2\n            (enc1 : Encoder<'T1>)\n            (enc2 : Encoder<'T2>)\n            (v1, v2) : JsonValue =\n        box [| enc1 v1\n               enc2 v2 |]\n\n    let tuple3\n            (enc1 : Encoder<'T1>)\n            (enc2 : Encoder<'T2>)\n            (enc3 : Encoder<'T3>)\n            (v1, v2, v3) : JsonValue =\n        box [| enc1 v1\n               enc2 v2\n               enc3 v3 |]\n\n    let tuple4\n            (enc1 : Encoder<'T1>)\n            (enc2 : Encoder<'T2>)\n            (enc3 : Encoder<'T3>)\n            (enc4 : Encoder<'T4>)\n            (v1, v2, v3, v4) : JsonValue =\n        box [| enc1 v1\n               enc2 v2\n               enc3 v3\n               enc4 v4 |]\n\n    let tuple5\n            (enc1 : Encoder<'T1>)\n            (enc2 : Encoder<'T2>)\n            (enc3 : Encoder<'T3>)\n            (enc4 : Encoder<'T4>)\n            (enc5 : Encoder<'T5>)\n            (v1, v2, v3, v4, v5) : JsonValue =\n        box [| enc1 v1\n               enc2 v2\n               enc3 v3\n               enc4 v4\n               enc5 v5 |]\n\n    let tuple6\n            (enc1 : Encoder<'T1>)\n            (enc2 : Encoder<'T2>)\n            (enc3 : Encoder<'T3>)\n            (enc4 : Encoder<'T4>)\n            (enc5 : Encoder<'T5>)\n            (enc6 : Encoder<'T6>)\n            (v1, v2, v3, v4, v5, v6) : JsonValue =\n        box [| enc1 v1\n               enc2 v2\n               enc3 v3\n               enc4 v4\n               enc5 v5\n               enc6 v6 |]\n\n    let tuple7\n            (enc1 : Encoder<'T1>)\n            (enc2 : Encoder<'T2>)\n            (enc3 : Encoder<'T3>)\n            (enc4 : Encoder<'T4>)\n            (enc5 : Encoder<'T5>)\n            (enc6 : Encoder<'T6>)\n            (enc7 : Encoder<'T7>)\n            (v1, v2, v3, v4, v5, v6, v7) : JsonValue =\n        box [| enc1 v1\n               enc2 v2\n               enc3 v3\n               enc4 v4\n               enc5 v5\n               enc6 v6\n               enc7 v7 |]\n\n    let tuple8\n            (enc1 : Encoder<'T1>)\n            (enc2 : Encoder<'T2>)\n            (enc3 : Encoder<'T3>)\n            (enc4 : Encoder<'T4>)\n            (enc5 : Encoder<'T5>)\n            (enc6 : Encoder<'T6>)\n            (enc7 : Encoder<'T7>)\n            (enc8 : Encoder<'T8>)\n            (v1, v2, v3, v4, v5, v6, v7, v8) : JsonValue =\n        box [| enc1 v1\n               enc2 v2\n               enc3 v3\n               enc4 v4\n               enc5 v5\n               enc6 v6\n               enc7 v7\n               enc8 v8 |]\n\n\n    ////////////\n    // Enum ///\n    /////////\n\n    module Enum =\n\n        let byte<'TEnum when 'TEnum : enum<byte>> (value : 'TEnum) : JsonValue =\n            LanguagePrimitives.EnumToValue value\n            |> byte\n\n        let sbyte<'TEnum when 'TEnum : enum<sbyte>> (value : 'TEnum) : JsonValue =\n            LanguagePrimitives.EnumToValue value\n            |> sbyte\n\n        let int16<'TEnum when 'TEnum : enum<int16>> (value : 'TEnum) : JsonValue =\n            LanguagePrimitives.EnumToValue value\n            |> int16\n\n        let uint16<'TEnum when 'TEnum : enum<uint16>> (value : 'TEnum) : JsonValue =\n            LanguagePrimitives.EnumToValue value\n            |> uint16\n\n        let int<'TEnum when 'TEnum : enum<int>> (value : 'TEnum) : JsonValue =\n            LanguagePrimitives.EnumToValue value\n            |> int\n\n        let uint32<'TEnum when 'TEnum : enum<uint32>> (value : 'TEnum) : JsonValue =\n            LanguagePrimitives.EnumToValue value\n            |> uint32\n\n    /// **Description**\n    ///\n    /// The DateTime is always encoded using UTC representation\n    ///\n    /// **Parameters**\n    ///   * `value` - parameter of type `System.DateTime`\n    ///\n    /// **Output Type**\n    ///   * `Value`\n    ///\n    /// **Exceptions**\n    ///\n    let datetime (value : System.DateTime) : JsonValue =\n        value.ToString(\"O\", CultureInfo.InvariantCulture) |> string\n\n    ///**Description**\n    /// Convert a `Value` into a prettified string.\n    ///**Parameters**\n    ///  * `space` - parameter of type `int` - Amount of indentation\n    ///  * `value` - parameter of type `obj` - Value to convert\n    ///\n    ///**Output Type**\n    ///  * `string`\n    ///\n    ///**Exceptions**\n    ///\n    let toString (space: int) (value: JsonValue) : string =\n       JS.JSON.stringify(value, !!null, space)\n\n    ///**Description**\n    /// Encode an option\n    ///**Parameters**\n    ///  * `encoder` - parameter of type `'a -> Value`\n    ///\n    ///**Output Type**\n    ///  * `'a option -> Value`\n    ///\n    ///**Exceptions**\n    ///\n    let option (encoder : 'a -> JsonValue) =\n        Option.map encoder >> Option.defaultWith (fun _ -> nil)\n\n    //////////////////\n    // Reflection ///\n    ////////////////\n\n    open FSharp.Reflection\n    open Fable.Core.DynamicExtensions\n\n    // As generics are erased by Fable, let's just do an unsafe cast for performance\n    let inline boxEncoder (d: Encoder<'T>): BoxedEncoder =\n        !!d\n\n    let inline unboxEncoder (d: BoxedEncoder): Encoder<'T> =\n        !!d\n\n    let rec private autoEncodeRecordsAndUnions extra (caseStrategy : CaseStrategy) (skipNullField : bool) (t: System.Type) : BoxedEncoder =\n        // Add the encoder to extra in case one of the fields is recursive\n        let encoderRef = ref Unchecked.defaultof<_>\n        let extra = extra |> Map.add t.FullName encoderRef\n        let encoder =\n            if FSharpType.IsRecord(t, allowAccessToPrivateRepresentation=true) then\n                let setters =\n                    FSharpType.GetRecordFields(t, allowAccessToPrivateRepresentation=true)\n                    |> Array.map (fun fi ->\n                        let targetKey = Util.Casing.convert caseStrategy fi.Name\n                        let encode = autoEncoder extra caseStrategy skipNullField fi.PropertyType\n                        fun (source: obj) (target: JsonValue) ->\n                            let value = FSharpValue.GetRecordField(source, fi)\n                            if not skipNullField || (skipNullField && not (isNull value)) then // Discard null fields\n                                target.[targetKey] <- encode value\n                            target)\n                fun (source: obj) ->\n                    (JsonValue(), setters) ||> Seq.fold (fun target set -> set source target)\n            elif FSharpType.IsUnion(t, allowAccessToPrivateRepresentation=true) then\n                fun (value: obj) ->\n                    let info, fields = FSharpValue.GetUnionFields(value, t, allowAccessToPrivateRepresentation=true)\n                    match fields.Length with\n                    | 0 -> string info.Name\n                    | len ->\n                        let fieldTypes = info.GetFields()\n                        let target = Array.zeroCreate<JsonValue> (len + 1)\n                        target.[0] <- string info.Name\n                        for i = 1 to len do\n                            let encode = autoEncoder extra caseStrategy skipNullField fieldTypes.[i-1].PropertyType\n                            target.[i] <- encode fields.[i-1]\n                        array target\n            else\n                // Don't use failwithf here, for some reason F#/Fable compiles it as a function\n                // when the return type is a function too, so it doesn't fail immediately\n                sprintf \"Cannot generate auto encoder for %s. Please pass an extra encoder.\" t.FullName\n                |> failwith\n        encoderRef := encoder\n        encoder\n\n    and private autoEncoder (extra: Map<string, ref<BoxedEncoder>>) caseStrategy (skipNullField : bool) (t: System.Type) : BoxedEncoder =\n      let fullname = t.FullName\n      match Map.tryFind fullname extra with\n      | Some encoderRef -> fun v -> encoderRef.contents v\n      | None ->\n        if t.IsArray then\n            let encoder = t.GetElementType() |> autoEncoder extra caseStrategy skipNullField\n            fun (value: obj) ->\n                value :?> obj seq |> Seq.map encoder |> seq\n        elif t.IsEnum then\n            let enumType = System.Enum.GetUnderlyingType(t).FullName\n            if enumType = typeof<sbyte>.FullName then\n                boxEncoder sbyte\n            elif enumType = typeof<byte>.FullName then\n                boxEncoder byte\n            elif enumType = typeof<int16>.FullName then\n                boxEncoder int16\n            elif enumType = typeof<uint16>.FullName then\n                boxEncoder uint16\n            elif enumType = typeof<int>.FullName then\n                boxEncoder int\n            elif enumType = typeof<uint32>.FullName then\n                boxEncoder uint32\n            else\n                failwithf\n                    \"\"\"Cannot generate auto encoder for %s.\nThoth.Json.Net only support the folluwing enum types:\n- sbyte\n- byte\n- int16\n- uint16\n- int\n- uint32\nIf you can't use one of these types, please pass an extra encoder.\n                    \"\"\" t.FullName\n        elif t.IsGenericType then\n            if FSharpType.IsTuple(t) then\n                let encoders =\n                    FSharpType.GetTupleElements(t)\n                    |> Array.map (autoEncoder extra caseStrategy skipNullField)\n                fun (value: obj) ->\n                    FSharpValue.GetTupleFields(value)\n                    |> Seq.mapi (fun i x -> encoders.[i] x) |> seq\n            else\n                let fullname = t.GetGenericTypeDefinition().FullName\n                if fullname = typedefof<obj option>.FullName then\n                    // Evaluate lazily so we don't need to generate the encoder for null values\n                    let encoder = lazy\n                                    t.GenericTypeArguments.[0]\n                                    |> autoEncoder extra caseStrategy skipNullField\n                                    |> option\n                                    |> boxEncoder\n                    boxEncoder(fun (value: obj) ->\n                        if isNull value then nil\n                        else encoder.Value value)\n                elif fullname = typedefof<obj list>.FullName\n                    || fullname = typedefof<Set<string>>.FullName then\n                    // Disable seq support for now because I don't know how to implements to on Thoth.Json.Net\n                    // || fullname = typedefof<obj seq>.FullName then\n                    let encoder = t.GenericTypeArguments.[0] |> autoEncoder extra caseStrategy skipNullField\n                    fun (value: obj) ->\n                        value :?> obj seq |> Seq.map encoder |> seq\n                elif fullname = typedefof< Map<string, obj> >.FullName then\n                    let keyType = t.GenericTypeArguments.[0]\n                    let valueEncoder = t.GenericTypeArguments.[1] |> autoEncoder extra caseStrategy skipNullField\n                    if keyType.FullName = typeof<string>.FullName\n                        || keyType.FullName = typeof<System.Guid>.FullName then\n                        fun value ->\n                            // Fable compiles Guids as strings so this works, but maybe we should make the conversion explicit\n                            // (see dotnet version) in case Fable implementation of Guids change\n                            (JsonValue(), value :?> Map<string, obj>)\n                            ||> Seq.fold (fun target (KeyValue(k,v)) ->\n                                target.[k] <- valueEncoder v\n                                target)\n                    else\n                        let keyEncoder = keyType |> autoEncoder extra caseStrategy skipNullField\n                        fun value ->\n                            value :?> Map<string, obj> |> Seq.map (fun (KeyValue(k,v)) ->\n                                array [|keyEncoder k; valueEncoder v|]) |> seq\n                else\n                    autoEncodeRecordsAndUnions extra caseStrategy skipNullField t\n        else\n            if fullname = typeof<bool>.FullName then\n                boxEncoder bool\n            elif fullname = typeof<unit>.FullName then\n                boxEncoder unit\n            elif fullname = typeof<string>.FullName then\n                boxEncoder string\n            elif fullname = typeof<sbyte>.FullName then\n                boxEncoder sbyte\n            elif fullname = typeof<byte>.FullName then\n                boxEncoder byte\n            elif fullname = typeof<int16>.FullName then\n                boxEncoder int16\n            elif fullname = typeof<uint16>.FullName then\n                boxEncoder uint16\n            elif fullname = typeof<int>.FullName then\n                boxEncoder int\n            elif fullname = typeof<uint32>.FullName then\n                boxEncoder uint32\n            elif fullname = typeof<float>.FullName then\n                boxEncoder float\n            elif fullname = typeof<float32>.FullName then\n                boxEncoder float32\n            // These number types require extra libraries in Fable. To prevent penalizing\n            // all users, extra encoders (withInt64, etc) must be passed when they're needed.\n\n            // elif fullname = typeof<int64>.FullName then\n            //     boxEncoder int64\n            // elif fullname = typeof<uint64>.FullName then\n            //     boxEncoder uint64\n            // elif fullname = typeof<bigint>.FullName then\n            //     boxEncoder bigint\n            // elif fullname = typeof<decimal>.FullName then\n            //     boxEncoder decimal\n            elif fullname = typeof<System.DateTime>.FullName then\n                boxEncoder datetime\n            elif fullname = typeof<System.DateTimeOffset>.FullName then\n                boxEncoder datetimeOffset\n            elif fullname = typeof<System.TimeSpan>.FullName then\n                boxEncoder timespan\n            elif fullname = typeof<System.Guid>.FullName then\n                boxEncoder guid\n            elif fullname = typeof<obj>.FullName then\n                boxEncoder id\n            else\n                autoEncodeRecordsAndUnions extra caseStrategy skipNullField t\n\n    let private makeExtra (extra: ExtraCoders option) =\n        match extra with\n        | None -> Map.empty\n        | Some e -> Map.map (fun _ (enc,_) -> ref enc) e.Coders\n\n    type Auto =\n        static member generateBoxedEncoderCached(t: System.Type, ?caseStrategy : CaseStrategy, ?extra: ExtraCoders, ?skipNullField: bool): BoxedEncoder =\n            let caseStrategy = defaultArg caseStrategy PascalCase\n            let skipNullField = defaultArg skipNullField true\n\n            let key =\n                t.FullName\n                |> (+) (Operators.string caseStrategy)\n                |> (+) (extra |> Option.map (fun e -> e.Hash) |> Option.defaultValue \"\")\n\n            Util.CachedEncoders.GetOrAdd(key , fun _ ->\n                autoEncoder (makeExtra extra) caseStrategy skipNullField t)\n\n        static member inline generateEncoderCached<'T>(?caseStrategy : CaseStrategy, ?extra: ExtraCoders, ?skipNullField: bool): Encoder<'T> =\n            Auto.generateBoxedEncoderCached(typeof<'T>, ?caseStrategy=caseStrategy, ?extra=extra) |> unboxEncoder\n\n        static member generateBoxedEncoder(t: System.Type, ?caseStrategy : CaseStrategy, ?extra: ExtraCoders, ?skipNullField: bool): BoxedEncoder =\n            let caseStrategy = defaultArg caseStrategy PascalCase\n            let skipNullField = defaultArg skipNullField true\n            autoEncoder (makeExtra extra) caseStrategy skipNullField t\n\n        static member inline generateEncoder<'T>(?caseStrategy : CaseStrategy, ?extra: ExtraCoders, ?skipNullField: bool): Encoder<'T> =\n            Auto.generateBoxedEncoder(typeof<'T>, ?caseStrategy=caseStrategy, ?extra=extra, ?skipNullField=skipNullField) |> unboxEncoder\n\n        static member inline toString(space : int, value : 'T, ?caseStrategy : CaseStrategy, ?extra: ExtraCoders, ?skipNullField: bool) : string =\n            let encoder = Auto.generateEncoder(?caseStrategy=caseStrategy, ?extra=extra, ?skipNullField=skipNullField)\n            encoder value |> toString space\n\n    ///**Description**\n    /// Convert a `Value` into a prettified string.\n    ///**Parameters**\n    ///  * `space` - parameter of type `int` - Amount of indentation\n    ///  * `value` - parameter of type `obj` - Value to convert\n    ///\n    ///**Output Type**\n    ///  * `string`\n    ///\n    ///**Exceptions**\n    ///\n    [<System.Obsolete(\"Please use toString instead\")>]\n    let encode (space: int) (value: JsonValue) : string = toString space value\n","[<RequireQualifiedAccess>]\nmodule Thoth.Json.Extra\n\nopen Fable.Core\n\n#if !FABLE_REPL_LIB\nlet empty: ExtraCoders =\n    { Hash = \"\"\n      Coders = Map.empty }\n\nlet inline internal withCustomAndKey (encoder: Encoder<'Value>) (decoder: Decoder<'Value>)\n           (extra: ExtraCoders): ExtraCoders =\n    { extra with\n          Hash = System.Guid.NewGuid().ToString()\n          Coders =\n              extra.Coders |> Map.add typeof<'Value>.FullName (Encode.boxEncoder encoder, Decode.boxDecoder decoder) }\n\nlet inline withCustom (encoder: Encoder<'Value>) (decoder: Decoder<'Value>) (extra: ExtraCoders): ExtraCoders =\n    withCustomAndKey encoder decoder extra\n\nlet inline withInt64 (extra: ExtraCoders): ExtraCoders = withCustomAndKey Encode.int64 Decode.int64 extra\n\nlet inline withUInt64 (extra: ExtraCoders): ExtraCoders =\n    withCustomAndKey Encode.uint64 Decode.uint64 extra\n\nlet inline withDecimal (extra: ExtraCoders): ExtraCoders =\n    withCustomAndKey Encode.decimal Decode.decimal extra\n\nlet inline withBigInt (extra: ExtraCoders): ExtraCoders =\n    withCustomAndKey Encode.bigint Decode.bigint extra\n#endif","import { FSharpRef } from \"./Types.js\";\nexport function tryParse(str, defValue) {\n    // TODO: test if value is valid and in range\n    if (str != null && /\\S/.test(str)) {\n        const v = +str.replace(\"_\", \"\");\n        if (!Number.isNaN(v)) {\n            defValue.contents = v;\n            return true;\n        }\n    }\n    return false;\n}\nexport function parse(str) {\n    const defValue = new FSharpRef(0);\n    if (tryParse(str, defValue)) {\n        return defValue.contents;\n    }\n    else {\n        throw new Error(\"Input string was not in a correct format.\");\n    }\n}\n// JS Number.isFinite function evals false for NaN\nexport function isInfinity(x) {\n    return x === Number.POSITIVE_INFINITY || x === Number.NEGATIVE_INFINITY;\n}\n","namespace Shared\r\n\r\nmodule String =\r\n\r\n    let isValueString =\r\n        function\r\n        | null | \"\" -> false\r\n        | x when System.String.IsNullOrWhiteSpace x -> false\r\n        | _ -> true\r\n\r\n    let toCharArray (x:string) =\r\n        x.ToCharArray()\r\n\r\n    let trim =\r\n        function\r\n        | null | \"\" -> \"\"\r\n        | x -> x.Trim()\r\n\r\n    let trim1 (delimiter:string list) =\r\n        function\r\n        | null | \"\" -> \"\"\r\n        | x -> x.Trim(delimiter |> Array.ofList |> Array.collect toCharArray)\r\n\r\n    let tryAfter delimiter (x:string) =\r\n        if not <| isValueString delimiter then\r\n            failwithf \"no delimiter passed\"\r\n        match x.IndexOf delimiter with\r\n        | x when x < 0 ->\r\n            None\r\n        | i -> Some x.[i+delimiter.Length..]\r\n\r\n\r\n    let tryBefore delimiter (x:string) =\r\n        if not <| isValueString delimiter then\r\n            failwithf \"no delimiter passed\"\r\n        match x.IndexOf delimiter with\r\n        | x when x < 0 ->\r\n            None\r\n        | i -> Some x.[ 0..i - 1 ]\r\n\r\n    // let after delimiter (x:string) =\r\n    //     if not <| isValueString delimiter then\r\n    //         failwithf \"no delimiter passed\"\r\n    //     let i = x.IndexOf(delimiter)\r\n    //     x.[i+delimiter.Length..]\r\n\r\n\r\n// did not appear to work\r\n// module DU =\r\n//     open Microsoft.FSharp.Reflection\r\n//     let inline fromString<'t>(s:string) =\r\n//         match Microsoft.FSharp.Reflection.FSharpType.GetUnionCases typeof<'t> |> Array.filter(fun case -> case.Name = s) with\r\n//         | [| case |] -> Some(FSharpValue.MakeUnion(case, Array.empty):?> 't)\r\n//         | _ -> None\r\n\r\nmodule Helpers =\r\n\r\n    let flip f x y = f y x\r\n\r\n\r\n    let (|ValueString|_|) =\r\n        function\r\n        | x when String.isValueString x -> Some x\r\n        | _ -> None\r\n    let (|EqualsI|_|) y =\r\n        function\r\n        | ValueString x ->\r\n            if x.Equals(y,System.StringComparison.InvariantCultureIgnoreCase) then\r\n                Some ()\r\n            else None\r\n        | _ -> None\r\n    let equalsIStr (item:'t) (x:string) =\r\n        match x with\r\n        | EqualsI (string (box item)) -> Some item\r\n        | _ -> None\r\n\r\n    let (|EqualsIStr|_|) (x:'t) = equalsIStr x\r\n\r\n    let (|After|_|) delimiter x =\r\n        String.tryAfter delimiter x\r\n\r\n    let (|Before|_|) delimiter x =\r\n        String.tryBefore delimiter x\r\n\r\n    let inline tryParse f (x: string) =\r\n        match f x with\r\n        | true, x -> Some x\r\n        | _ -> None\r\n\r\n    let tryParseInt x = tryParse System.Int32.TryParse x\r\n    let tryParseDec x = tryParse System.Single.TryParse x |> Option.map float\r\n\r\n\r\n\r\nopen Helpers\r\n\r\nmodule Option =\r\n    let ofValueString =\r\n        function\r\n        | ValueString x -> Some x\r\n        |_ -> None\r\n    let ofResult x =\r\n        match x with\r\n        | Ok x -> Some x\r\n        | _ -> None\r\n\r\nmodule Result =\r\n    let iter f (x:Result<_,_>)=\r\n        match x with\r\n        |Ok x -> f x\r\n        | _ -> ()\r\n\r\ntype NameValue = {Name:string;Value:float option}\r\n","module CodeHelpers.HypixelApi\r\n\r\n// https://github.com/HypixelDev/PublicAPI\r\n\r\nopen Elmish\r\nopen Microsoft.FSharp.Collections\r\nopen CodeHelpers.FableHelpers\r\n\r\ntype Method = GET | POST\r\n\r\ntype Promise<'t> = Fable.Core.JS.Promise<'t>\r\nlet inline promise f =\r\n    Fable.Core.JS.Constructors.Promise.Create f\r\n// let inline ``then`` f (x:Promise<'t>) =\r\n//     x.``then``()\r\nlet inline ``then`` fResolve fReject (x:Promise<_>) =\r\n    x.``then``(fResolve,fReject)\r\n\r\ntype XOptions = {\r\n    Method: Method\r\n    Url: string\r\n    Headers: Map<string,string>\r\n    Body: obj option\r\n}\r\n\r\nmodule CorsPromise =\r\n    let request xopt =\r\n        let p = promise (fun resolve reject->\r\n            let xhr = Browser.XMLHttpRequest.XMLHttpRequest.Create()\r\n            xhr.``open``(string xopt.Method, xopt.Url,true) //\"http://www.example.org/example.txt\")\r\n            // xhr.setRequestHeader(\"Content-Type\",\"text/plain\")\r\n            xopt.Headers\r\n            |> Map.iter(fun k v ->\r\n                xhr.setRequestHeader(k,v)\r\n            )\r\n            let f _ =\r\n                if xhr.status >= 200 && xhr.status < 300 then\r\n                    resolve(xhr.response)\r\n                else reject(xhr.statusText)\r\n            xhr.addEventListener(\"load\",f)\r\n            xhr.addEventListener(\"error\", fun _ ->\r\n                reject(xhr.statusText)\r\n            )\r\n            // toGlobal \"hypixelXhr\" xhr\r\n            match xopt.Body with\r\n            | Some v -> xhr.send(v)\r\n            | None -> xhr.send()\r\n        )\r\n        p\r\n\r\nlet fetchExample (): Promise<string> =\r\n    CorsPromise.request {\r\n        Method= GET\r\n        Url= \"https://api.github.com\"\r\n        Headers= Map.empty\r\n        Body= None\r\n    }\r\n\r\n// https://cors-anywhere.herokuapp.com/\r\n// https://robwu.nl/cors-anywhere.html\r\nlet fetchHerokuProxy url =\r\n    CorsPromise.request {\r\n        Method= GET\r\n        Url= sprintf \"https://cors-anywhere.herokuapp.com/%s\" url\r\n        Headers= Map.empty\r\n        Body= None\r\n    }\r\n\r\nlet fetch useProxy url =\r\n    if useProxy then\r\n        fetchHerokuProxy url\r\n    else\r\n        CorsPromise.request {\r\n            Method= GET\r\n            Url= url\r\n            Headers= Map.empty\r\n            Body= None\r\n        }\r\n\r\n\r\ntype ApiReqType =\r\n    | MinecraftUuid of name:string * timestamp: string option\r\n    | HypixelProfile of key:string * name:string\r\n    | HypixelSkyblockProfile of key:string * uuid:string\r\n\r\nlet getUrl =\r\n    function\r\n    | MinecraftUuid (n,tsOpt) ->\r\n        // https://api.mojang.com/users/profiles/minecraft/<username>?at=<timestamp>\r\n        let qs = tsOpt |> Option.map (sprintf \"?at=%s\") |> Option.defaultValue \"\"\r\n        let url = sprintf \"https://api.mojang.com/users/profiles/minecraft/%s%s\" n qs\r\n        url\r\n    | HypixelProfile(k,n) ->\r\n        let url = sprintf \"http://api.hypixel.net/player?key=%s&name=%s\" k n\r\n        url\r\n    | HypixelSkyblockProfile(k,u) ->\r\n        let url = sprintf \"https://api.hypixel.net/Skyblock/profiles?key=%s&uuid=%s\" k u\r\n        url\r\n\r\n// let fetchUuid useProxy (name,tsOpt) =\r\n//     // https://api.mojang.com/users/profiles/minecraft/<username>?at=<timestamp>\r\n//     let qs = tsOpt |> Option.map (sprintf \"?at=%s\") |> Option.defaultValue \"\"\r\n//     let url = sprintf \"https://api.mojang.com/users/profiles/minecraft/%s%s\" name qs\r\n//     if useProxy then\r\n//         fetchHerokuProxy url\r\n//     else\r\n//         CorsPromise.request {\r\n//             Method= GET\r\n//             Url= url\r\n//             Headers= Map.empty\r\n//             Body= None\r\n//         }\r\n\r\n\r\n// let fetchHypixelProfile useProxy (key,name) =\r\n//     let url = sprintf \"http://api.hypixel.net/player?key=%s&name=%s\" key name\r\n//     if useProxy then\r\n//         fetchHerokuProxy url\r\n//     else\r\n//         CorsPromise.request {\r\n//             Method= GET\r\n//             Url= url\r\n//             Headers= Map.empty\r\n//             Body= None\r\n//         }\r\n\r\n// // https://api.hypixel.net/Skyblock/profiles?key=[KEY]&uuid=[UUID]\r\n// let fetchSkyblockProfile useProxy (key,uuid) =\r\n//     let url = sprintf \"https://api.hypixel.net/Skyblock/profiles?key=%s&uuid=%s\" key uuid\r\n//     if useProxy then\r\n//         fetchHerokuProxy url\r\n//     else\r\n//         CorsPromise.request {\r\n//             Method= GET\r\n//             Url= url\r\n//             Headers= Map.empty\r\n//             Body= None\r\n//         }\r\n","namespace Fulma\r\n\r\nopen Fable.React\r\nopen Fable.React.Props\r\n\r\nmodule Reflection =\r\n\r\n    open Microsoft.FSharp.Reflection\r\n    open System\r\n\r\n    let getCaseName (case : 'T) =\r\n#if FABLE_COMPILER\r\n        Fable.Core.Reflection.getCaseName case\r\n#else\r\n        // Get UnionCaseInfo value from the F# reflection tools\r\n        let (caseInfo, _args) = FSharpValue.GetUnionFields(case, typeof<'T>)\r\n        caseInfo.GetCustomAttributes()\r\n        |> Seq.tryPick (function\r\n                        | :? CompiledNameAttribute as att -> Some att.CompiledName\r\n                        | _ -> None)\r\n        |> Option.defaultWith (fun () -> caseInfo.Name)\r\n#endif\r\n\r\n    let getCaseTag (case : 'T) =\r\n#if FABLE_COMPILER\r\n        Fable.Core.Reflection.getCaseTag case\r\n#else\r\n        let (caseInfo, _args) = FSharpValue.GetUnionFields(case, typeof<'T>)\r\n        caseInfo.Tag\r\n#endif\r\n\r\n[<RequireQualifiedAccess>]\r\ntype Screen =\r\n    | All\r\n    | [<CompiledName(\"desktop\")>] Desktop\r\n    | [<CompiledName(\"tablet\")>] Tablet\r\n    | [<CompiledName(\"mobile\")>] Mobile\r\n    | [<CompiledName(\"widescreen\")>] WideScreen\r\n    | [<CompiledName(\"touch\")>] Touch\r\n    | [<CompiledName(\"fullhd\")>] FullHD\r\n\r\n    static member ToString (screen : Screen) =\r\n        match screen with\r\n        | All -> \"\"\r\n        | Desktop\r\n        | Tablet\r\n        | Mobile\r\n        | WideScreen\r\n        | Touch\r\n        | FullHD -> \"-\" + Reflection.getCaseName screen\r\n\r\n[<AutoOpen>]\r\nmodule Color =\r\n\r\n    type IColor =\r\n        | [<CompiledName(\"is-black\")>] IsBlack\r\n        | [<CompiledName(\"is-dark\")>] IsDark\r\n        | [<CompiledName(\"is-light\")>] IsLight\r\n        | [<CompiledName(\"is-white\")>] IsWhite\r\n        | [<CompiledName(\"is-primary\")>] IsPrimary\r\n        | [<CompiledName(\"is-info\")>] IsInfo\r\n        | [<CompiledName(\"is-success\")>] IsSuccess\r\n        | [<CompiledName(\"is-warning\")>] IsWarning\r\n        | [<CompiledName(\"is-danger\")>] IsDanger\r\n        | [<CompiledName(\"is-link\")>] IsLink\r\n        | [<CompiledName(\"is-black-bis\")>] IsBlackBis\r\n        | [<CompiledName(\"is-black-ter\")>] IsBlackTer\r\n        | [<CompiledName(\"is-grey-darker\")>] IsGreyDarker\r\n        | [<CompiledName(\"is-grey-dark\")>] IsGreyDark\r\n        | [<CompiledName(\"is-grey\")>] IsGrey\r\n        | [<CompiledName(\"is-grey-light\")>] IsGreyLight\r\n        | [<CompiledName(\"is-grey-lighter\")>] IsGreyLighter\r\n        | [<CompiledName(\"is-white-ter\")>] IsWhiteTer\r\n        | [<CompiledName(\"is-white-bis\")>] IsWhiteBis\r\n        /// Allow you to specify a custom color. The color will be prefixed by \"is-\"\r\n        | IsCustomColor of string\r\n        /// Allow you to specify a NoColor case.\r\n        | NoColor\r\n\r\n    let ofColor level =\r\n        match level with\r\n        | NoColor -> \"\"\r\n        | IsCustomColor color -> \"is-\" + color\r\n        | IsBlack\r\n        | IsDark\r\n        | IsLight\r\n        | IsWhite\r\n        | IsPrimary\r\n        | IsInfo\r\n        | IsSuccess\r\n        | IsWarning\r\n        | IsDanger\r\n        | IsLink\r\n        | IsBlackBis\r\n        | IsBlackTer\r\n        | IsGreyDarker\r\n        | IsGreyDark\r\n        | IsGrey\r\n        | IsGreyLight\r\n        | IsGreyLighter\r\n        | IsWhiteTer\r\n        | IsWhiteBis -> Reflection.getCaseName level\r\n\r\n[<AutoOpen>]\r\nmodule Size =\r\n\r\n    type ISize =\r\n        | [<CompiledName(\"is-small\")>] IsSmall\r\n        | [<CompiledName(\"is-medium\")>] IsMedium\r\n        | [<CompiledName(\"is-large\")>] IsLarge\r\n\r\n    let inline ofSize size =\r\n        Reflection.getCaseName size\r\n\r\n[<RequireQualifiedAccess>]\r\nmodule TextSize =\r\n    type Option =\r\n        | Is1\r\n        | Is2\r\n        | Is3\r\n        | Is4\r\n        | Is5\r\n        | Is6\r\n        | Is7\r\n\r\n        static member ToString (x: Option) =\r\n            Reflection.getCaseTag x + 1 |> string\r\n\r\n    let inline generic screen size =\r\n        \"is-size-\" + Option.ToString size + Screen.ToString screen\r\n\r\n    let inline only screen size =\r\n        match screen with\r\n        | Screen.Tablet\r\n        | Screen.Desktop\r\n        | Screen.WideScreen ->\r\n            \"is-size-\" + Option.ToString size + Screen.ToString screen + \"-only\"\r\n        | x ->\r\n            Fable.Core.JS.console.warn(sprintf \"Screen `%s` does not support `is-size-xxx-only`.\" (string x))\r\n            \"\"\r\n\r\n[<RequireQualifiedAccess>]\r\nmodule TextAlignment =\r\n\r\n    type Option =\r\n        /// Add `has-text-centered`\r\n        | [<CompiledName(\"has-text-centered\")>] Centered\r\n        /// Add `has-text-justified`\r\n        | [<CompiledName(\"has-text-justified\")>] Justified\r\n        /// Add `has-text-left`\r\n        | [<CompiledName(\"has-text-left\")>] Left\r\n        /// Add `has-text-right`\r\n        | [<CompiledName(\"has-text-right\")>] Right\r\n\r\n        static member inline ToString opt =\r\n            Reflection.getCaseName opt\r\n\r\n    let inline generic screen alignment =\r\n        Option.ToString alignment + Screen.ToString screen\r\n\r\n    let inline only screen alignment =\r\n        match screen with\r\n        | Screen.Tablet\r\n        | Screen.Desktop\r\n        | Screen.WideScreen ->\r\n            Option.ToString alignment + Screen.ToString screen + \"-only\"\r\n        | x ->\r\n            Fable.Core.JS.console.warn(sprintf \"Screen `%s` does not support `is-size-xxx-only`.\" (string x))\r\n            \"\"\r\n\r\n[<RequireQualifiedAccess>]\r\nmodule FlexDirection =\r\n\r\n    type Option =\r\n        /// <summary>Add <c>is-flex-direction-row</c></summary>\r\n        | [<CompiledName(\"is-flex-direction-row\")>] Row\r\n        /// <summary>Add <c>is-flex-direction-row-reverse</c></summary>\r\n        | [<CompiledName(\"is-flex-direction-row-reverse\")>] RowReverse\r\n        /// <summary>Add <c>is-flex-direction-column</c></summary>\r\n        | [<CompiledName(\"is-flex-direction-column\")>] Column\r\n        /// <summary>Add <c>is-flex-direction-column-reverse</c></summary>\r\n        | [<CompiledName(\"is-flex-direction-column-reverse\")>] ColumnReverse\r\n\r\n        static member inline toClass (opt : Option) =\r\n            Reflection.getCaseName opt\r\n\r\n[<RequireQualifiedAccess>]\r\nmodule FlexWrap =\r\n\r\n    type Option =\r\n        /// <summary>Add <c>is-flex-wrap-nowrap</c></summary>\r\n        | [<CompiledName(\"is-flex-wrap-nowrap\")>] NoWrap\r\n        /// <summary>Add <c>is-flex-wrap-wrap</c></summary>\r\n        | [<CompiledName(\"is-flex-wrap-wrap\")>] Wrap\r\n        /// <summary>Add <c>is-flex-wrap-wrap-reverse</c></summary>\r\n        | [<CompiledName(\"is-flex-wrap-wrap-reverse\")>] WrapReverse\r\n\r\n        static member inline toClass (opt : Option) =\r\n            Reflection.getCaseName opt\r\n\r\n[<RequireQualifiedAccess>]\r\nmodule FlexJustifyContent =\r\n\r\n    type Option =\r\n        /// <summary>Add <c>is-justify-content-flex-start</c></summary>\r\n        | [<CompiledName(\"is-justify-content-flex-start\")>] FlexStart\r\n        /// <summary>Add <c>is-justify-content-flex-end</c></summary>\r\n        | [<CompiledName(\"is-justify-content-flex-end\")>] FlexEnd\r\n        /// <summary>Add <c>is-justify-content-center</c></summary>\r\n        | [<CompiledName(\"is-justify-content-center\")>] Center\r\n        /// <summary>Add <c>is-justify-content-space-between</c></summary>\r\n        | [<CompiledName(\"is-justify-content-space-between\")>] SpaceBetween\r\n        /// <summary>Add <c>is-justify-content-space-around</c></summary>\r\n        | [<CompiledName(\"is-justify-content-space-around\")>] SpaceAround\r\n        /// <summary>Add <c>is-justify-content-space-evenly</c></summary>\r\n        | [<CompiledName(\"is-justify-content-space-evenly\")>] SpaceEvenly\r\n        /// <summary>Add <c>is-justify-content-start</c></summary>\r\n        | [<CompiledName(\"is-justify-content-start\")>] Start\r\n        /// <summary>Add <c>is-justify-content-end</c></summary>\r\n        | [<CompiledName(\"is-justify-content-end\")>] End\r\n        /// <summary>Add <c>is-justify-content-left</c></summary>\r\n        | [<CompiledName(\"is-justify-content-left\")>] Left\r\n        /// <summary>Add <c>is-justify-content-right</c></summary>\r\n        | [<CompiledName(\"is-justify-content-right\")>] Right\r\n\r\n        static member inline toClass (opt : Option) =\r\n            Reflection.getCaseName opt\r\n\r\n[<RequireQualifiedAccess>]\r\nmodule FlexAlignContent =\r\n\r\n    type Option =\r\n        /// <summary>Add <c>is-align-content-flex-start</c></summary>\r\n        | [<CompiledName(\"is-align-content-flex-start\")>] FlexStart\r\n        /// <summary>Add <c>is-align-content-flex-end</c></summary>\r\n        | [<CompiledName(\"is-align-content-flex-end\")>] FlexEnd\r\n        /// <summary>Add <c>is-align-content-center</c></summary>\r\n        | [<CompiledName(\"is-align-content-center\")>] Center\r\n        /// <summary>Add <c>is-align-content-space-between</c></summary>\r\n        | [<CompiledName(\"is-align-content-space-between\")>] SpaceBetween\r\n        /// <summary>Add <c>is-align-content-space-around</c></summary>\r\n        | [<CompiledName(\"is-align-content-space-around\")>] SpaceAround\r\n        /// <summary>Add <c>is-align-content-space-evenly</c></summary>\r\n        | [<CompiledName(\"is-align-content-space-evenly\")>] SpaceEvenly\r\n        /// <summary>Add <c>is-align-content-stretch</c></summary>\r\n        | [<CompiledName(\"is-align-content-stretch\")>] Stretch\r\n        /// <summary>Add <c>is-align-content-start</c></summary>\r\n        | [<CompiledName(\"is-align-content-start\")>] Start\r\n        /// <summary>Add <c>is-align-content-end</c></summary>\r\n        | [<CompiledName(\"is-align-content-end\")>] End\r\n        /// <summary>Add <c>is-align-content-baseline</c></summary>\r\n        | [<CompiledName(\"is-align-content-baseline\")>] Baseline\r\n\r\n        static member inline toClass (opt : Option) =\r\n            Reflection.getCaseName opt\r\n\r\n\r\n[<RequireQualifiedAccess>]\r\nmodule FlexAlignItems =\r\n\r\n    type Option =\r\n        /// <summary>Add <c>is-align-items-stretch</c></summary>\r\n        | [<CompiledName(\"is-align-items-stretch\")>] Stretch\r\n        /// <summary>Add <c>is-align-items-flex-start</c></summary>\r\n        | [<CompiledName(\"is-align-items-flex-start\")>] FlexStart\r\n        /// <summary>Add <c>is-align-items-flex-end</c></summary>\r\n        | [<CompiledName(\"is-align-items-flex-end\")>] FlexEnd\r\n        /// <summary>Add <c>is-align-items-center</c></summary>\r\n        | [<CompiledName(\"is-align-items-center\")>] Center\r\n        /// <summary>Add <c>is-align-items-baseline</c></summary>\r\n        | [<CompiledName(\"is-align-items-baseline\")>] Baseline\r\n        /// <summary>Add <c>is-align-items-start</c></summary>\r\n        | [<CompiledName(\"is-align-items-start\")>] Start\r\n        /// <summary>Add <c>is-align-items-end</c></summary>\r\n        | [<CompiledName(\"is-align-items-end\")>] End\r\n        /// <summary>Add <c>is-align-items-self-start</c></summary>\r\n        | [<CompiledName(\"is-align-items-self-start\")>] SelfStart\r\n        /// <summary>Add <c>is-align-items-self-end</c></summary>\r\n        | [<CompiledName(\"is-align-items-self-end\")>] SelfEnd\r\n\r\n        static member inline toClass (opt : Option) =\r\n            Reflection.getCaseName opt\r\n\r\n[<RequireQualifiedAccess>]\r\nmodule FlexAlignSelf =\r\n\r\n    type Option =\r\n        /// <summary>Add <c>is-align-self-auto</c></summary>\r\n        | [<CompiledName(\"is-align-self-auto\")>] Auto\r\n        /// <summary>Add <c>is-align-self-flex-start</c></summary>\r\n        | [<CompiledName(\"is-align-self-flex-start\")>] FlexStart\r\n        /// <summary>Add <c>is-align-self-flex-end</c></summary>\r\n        | [<CompiledName(\"is-align-self-flex-end\")>] FlexEnd\r\n        /// <summary>Add <c>is-align-self-center</c></summary>\r\n        | [<CompiledName(\"is-align-self-center\")>] Center\r\n        /// <summary>Add <c>is-align-self-baseline</c></summary>\r\n        | [<CompiledName(\"is-align-self-baseline\")>] Baseline\r\n        /// <summary>Add <c>is-align-self-stretch</c></summary>\r\n        | [<CompiledName(\"is-align-self-stretch\")>] Stretch\r\n\r\n        static member inline toClass (opt : Option) =\r\n            Reflection.getCaseName opt\r\n\r\n[<RequireQualifiedAccess>]\r\nmodule FlexGrow =\r\n\r\n    type Option =\r\n        /// <summary>Add <c>is-flex-grow-0</c></summary>\r\n        | [<CompiledName(\"is-flex-grow-0\")>] Is0\r\n        /// <summary>Add <c>is-flex-grow-1</c></summary>\r\n        | [<CompiledName(\"is-flex-grow-1\")>] Is1\r\n        /// <summary>Add <c>is-flex-grow-2</c></summary>\r\n        | [<CompiledName(\"is-flex-grow-2\")>] Is2\r\n        /// <summary>Add <c>is-flex-grow-3</c></summary>\r\n        | [<CompiledName(\"is-flex-grow-3\")>] Is3\r\n        /// <summary>Add <c>is-flex-grow-4</c></summary>\r\n        | [<CompiledName(\"is-flex-grow-4\")>] Is4\r\n        /// <summary>Add <c>is-flex-grow-5</c></summary>\r\n        | [<CompiledName(\"is-flex-grow-5\")>] Is5\r\n\r\n        static member inline toClass (opt : Option) =\r\n            Reflection.getCaseName opt\r\n\r\n[<RequireQualifiedAccess>]\r\nmodule FlexShrink =\r\n\r\n    type Option =\r\n        /// <summary>Add <c>is-flex-shrink-0</c></summary>\r\n        | [<CompiledName(\"is-flex-shrink-0\")>] Is0\r\n        /// <summary>Add <c>is-flex-shrink-1</c></summary>\r\n        | [<CompiledName(\"is-flex-shrink-1\")>] Is1\r\n        /// <summary>Add <c>is-flex-shrink-2</c></summary>\r\n        | [<CompiledName(\"is-flex-shrink-2\")>] Is2\r\n        /// <summary>Add <c>is-flex-shrink-3</c></summary>\r\n        | [<CompiledName(\"is-flex-shrink-3\")>] Is3\r\n        /// <summary>Add <c>is-flex-shrink-4</c></summary>\r\n        | [<CompiledName(\"is-flex-shrink-4\")>] Is4\r\n        /// <summary>Add <c>is-flex-shrink-5</c></summary>\r\n        | [<CompiledName(\"is-flex-shrink-5\")>] Is5\r\n\r\n        static member inline toClass (opt : Option) =\r\n            Reflection.getCaseName opt\r\n\r\n\r\n[<RequireQualifiedAccess>]\r\nmodule TextWeight =\r\n\r\n    type Option =\r\n        /// Add `has-text-weight-light`\r\n        | [<CompiledName(\"has-text-weight-light\")>] Light\r\n        /// Add `has-text-weight-normal`\r\n        | [<CompiledName(\"has-text-weight-normal\")>] Normal\r\n        /// Add `has-text-weight-semibold`\r\n        | [<CompiledName(\"has-text-weight-semibold\")>] SemiBold\r\n        /// Add `has-text-weight-bold`\r\n        | [<CompiledName(\"has-text-weight-bold\")>] Bold\r\n        /// Add `has-text-weight-medium`\r\n        | [<CompiledName(\"has-text-weight-medium\")>] Medium\r\n\r\n    let inline internal ofOption opt =\r\n        Reflection.getCaseName opt\r\n\r\n[<RequireQualifiedAccess>]\r\nmodule TextTransform =\r\n\r\n    type Option =\r\n        /// Add `is-capitalized`\r\n        | [<CompiledName(\"is-capitalized\")>] Capitalized\r\n        /// Add `is-lowercase`\r\n        | [<CompiledName(\"is-lowercase\")>] LowerCase\r\n        /// Add `is-uppercase`\r\n        | [<CompiledName(\"is-uppercase\")>] UpperCase\r\n        /// Add `is-italic`\r\n        | [<CompiledName(\"is-italic\")>] Italic\r\n        /// Add `is-underlined`\r\n        | [<CompiledName(\"is-underlined\")>] Underlined\r\n\r\n        static member inline toClass opt =\r\n            Reflection.getCaseName opt\r\n\r\n[<RequireQualifiedAccess>]\r\nmodule Display =\r\n\r\n    type Option =\r\n        | [<CompiledName(\"block\")>] Block\r\n        | [<CompiledName(\"flex\")>] Flex\r\n        | [<CompiledName(\"inline\")>] Inline\r\n        | [<CompiledName(\"inline-block\")>] InlineBlock\r\n        | [<CompiledName(\"inline-flex\")>] InlineFlex\r\n\r\n        static member inline toClass opt =\r\n            Reflection.getCaseName opt\r\n\r\n    let internal toDisplayClass screen display =\r\n        let display = Option.toClass display\r\n        let screen = Screen.ToString screen\r\n\r\n        \"is-\" + display + screen\r\n\r\n    let internal toDisplayOnlyClass screen display =\r\n        match screen with\r\n        | Screen.Tablet\r\n        | Screen.Desktop\r\n        | Screen.WideScreen ->\r\n            let display = Option.toClass display\r\n            let screen = Screen.ToString screen\r\n            \"is-\" + display + screen + \"-only\"\r\n\r\n        | x ->\r\n            Fable.Core.JS.console.warn(sprintf \"Screen `%s` does not support display only.\" (string x))\r\n            \"\"\r\n\r\n[<RequireQualifiedAccess>]\r\nmodule Spacing =\r\n    type TypeAndDirection =\r\n        | [<CompiledName(\"m\")>] Margin\r\n        | [<CompiledName(\"mt\")>] MarginTop\r\n        | [<CompiledName(\"mr\")>] MarginRight\r\n        | [<CompiledName(\"mb\")>] MarginBottom\r\n        | [<CompiledName(\"ml\")>] MarginLeft\r\n        | [<CompiledName(\"my\")>] MarginTopAndBottom\r\n        | [<CompiledName(\"mx\")>] MarginLeftAndRight\r\n        | [<CompiledName(\"p\")>] Padding\r\n        | [<CompiledName(\"pt\")>] PaddingTop\r\n        | [<CompiledName(\"pr\")>] PaddingRight\r\n        | [<CompiledName(\"pb\")>] PaddingBottom\r\n        | [<CompiledName(\"pl\")>] PaddingLeft\r\n        | [<CompiledName(\"py\")>] PaddingTopAndBottom\r\n        | [<CompiledName(\"px\")>] PaddingLeftAndRight\r\n\r\n        static member inline toClass opt =\r\n            Reflection.getCaseName opt\r\n\r\n    type Amount =\r\n        | [<CompiledName(\"auto\")>] IsAuto\r\n        | [<CompiledName(\"0\")>] Is0\r\n        | [<CompiledName(\"1\")>] Is1\r\n        | [<CompiledName(\"2\")>] Is2\r\n        | [<CompiledName(\"3\")>] Is3\r\n        | [<CompiledName(\"4\")>] Is4\r\n        | [<CompiledName(\"5\")>] Is5\r\n        | [<CompiledName(\"6\")>] Is6\r\n\r\n        static member inline toClass opt =\r\n            Reflection.getCaseName opt\r\n\r\n    let internal toSpacingClass typ amount =\r\n        let typ = TypeAndDirection.toClass typ\r\n        let amount = Amount.toClass amount\r\n\r\n        typ + \"-\" + amount\r\n\r\n[<RequireQualifiedAccess>]\r\nmodule Modifier =\r\n    let internal ofBackground level =\r\n        match level with\r\n        | NoColor -> \"\"\r\n        | IsCustomColor color -> \"has-background-\" + color\r\n        | IsBlack\r\n        | IsDark\r\n        | IsLight\r\n        | IsWhite\r\n        | IsPrimary\r\n        | IsInfo\r\n        | IsSuccess\r\n        | IsWarning\r\n        | IsDanger\r\n        | IsLink\r\n        | IsBlackBis\r\n        | IsBlackTer\r\n        | IsGreyDarker\r\n        | IsGreyDark\r\n        | IsGrey\r\n        | IsGreyLight\r\n        | IsGreyLighter\r\n        | IsWhiteTer\r\n        | IsWhiteBis -> \"has-background-\" + (Reflection.getCaseName level).[3..]\r\n\r\n    let internal ofText level =\r\n        match level with\r\n        | NoColor -> \"\"\r\n        | IsCustomColor color -> \"has-text-\" + color\r\n        | IsBlack\r\n        | IsDark\r\n        | IsLight\r\n        | IsWhite\r\n        | IsPrimary\r\n        | IsInfo\r\n        | IsSuccess\r\n        | IsWarning\r\n        | IsDanger\r\n        | IsLink\r\n        | IsBlackBis\r\n        | IsBlackTer\r\n        | IsGreyDarker\r\n        | IsGreyDark\r\n        | IsGrey\r\n        | IsGreyLight\r\n        | IsGreyLighter\r\n        | IsWhiteTer\r\n        | IsWhiteBis -> \"has-text-\" + (Reflection.getCaseName level).[3..]\r\n\r\n    let internal ofInvisible screen =\r\n        \"is-invisible\" + Screen.ToString screen\r\n\r\n    let internal ofHidden screen =\r\n        \"is-hidden\" + Screen.ToString screen\r\n\r\n    let internal ofInvisibleOnly screen =\r\n        match screen with\r\n        | Screen.Tablet\r\n        | Screen.Desktop\r\n        | Screen.WideScreen ->\r\n            \"is-invisible\" + Screen.ToString screen + \"-only\"\r\n        | x ->\r\n            Fable.Core.JS.console.warn(sprintf \"Screen `%s` does not support `is-invisible-xxx-only`.\" (string x))\r\n            \"\"\r\n\r\n    let internal ofHiddenOnly screen =\r\n        match screen with\r\n        | Screen.Tablet\r\n        | Screen.Desktop\r\n        | Screen.WideScreen ->\r\n            \"is-hidden\" + Screen.ToString screen + \"-only\"\r\n        | x ->\r\n            Fable.Core.JS.console.warn(sprintf \"Screen `%s` does not support `is-hidden-xxx-only`.\" (string x))\r\n            \"\"\r\n\r\n    type IModifier =\r\n        | BackgroundColor of IColor\r\n        | TextColor of IColor\r\n        | TextWeight of TextWeight.Option\r\n        | TextSize of Screen * TextSize.Option\r\n        | TextSizeOnly of Screen * TextSize.Option\r\n        | TextAlignment of Screen * TextAlignment.Option\r\n        | TextAlignmentOnly of Screen * TextAlignment.Option\r\n        | TextTransform of TextTransform.Option\r\n        | Display of Screen * Display.Option\r\n        | DisplayOnly of Screen * Display.Option\r\n        | [<CompiledName(\"is-clearfix\")>] IsClearfix\r\n        | [<CompiledName(\"is-pulled-left\")>] IsPulledLeft\r\n        | [<CompiledName(\"is-pulled-right\")>] IsPulledRight\r\n        | [<CompiledName(\"is-marginless\")>] IsMarginless\r\n        | [<CompiledName(\"is-paddingless\")>] IsPaddingless\r\n        | [<CompiledName(\"is-overlay\")>] IsOverlay\r\n        | [<CompiledName(\"is-clipped\")>] IsClipped\r\n        | [<CompiledName(\"is-radiusless\")>] IsRadiusless\r\n        | [<CompiledName(\"is-shadowless\")>] IsShadowless\r\n        | [<CompiledName(\"is-unselectable\")>] IsUnselectable\r\n        | [<CompiledName(\"is-clickable\")>] IsClickable\r\n        | [<CompiledName(\"is-relative\")>] IsRelative\r\n        | [<CompiledName(\"is-flex\")>] IsFlex\r\n        | IsInvisible of Screen * bool\r\n        | IsHidden of Screen * bool\r\n        | IsInvisibleOnly of Screen * bool\r\n        | IsHiddenOnly of Screen * bool\r\n        | IsSrOnly\r\n        | IsScreenReaderOnly\r\n        | Spacing of Spacing.TypeAndDirection * Spacing.Amount\r\n        // Flexbox helpers\r\n        | FlexDirection of FlexDirection.Option\r\n        | FlexWrap of FlexWrap.Option\r\n        | FlexJustifyContent of FlexJustifyContent.Option\r\n        | FlexAlignContent of FlexAlignContent.Option\r\n        | FlexAlignItems of FlexAlignItems.Option\r\n        | FlexAlignSelf of FlexAlignSelf.Option\r\n        | FlexGrow of FlexGrow.Option\r\n        | FlexShrink of FlexShrink.Option\r\n\r\n\r\n\r\n                //     | IsGap (screen, size) ->\r\n                // if not (List.contains \"is-variable\" result.Classes) then\r\n                //     result.AddClass(\"is-variable\").AddClass(gapSizeGeneric screen size)\r\n                // else\r\n                //     result.AddClass(gapSizeGeneric screen size)\r\n\r\n\r\n\r\n    let parseModifiers options =\r\n        let parseOptions result option =\r\n            match option with\r\n            | BackgroundColor color             -> (ofBackground color)::result\r\n            | TextColor color                   -> (ofText color)::result\r\n            | TextWeight textWeight             -> (TextWeight.ofOption textWeight)::result\r\n            | TextSize (screen, size)           -> (TextSize.generic screen size)::result\r\n            | TextSizeOnly (screen, size)       -> (TextSize.only screen size)::result\r\n            | TextAlignment (screen, size)      -> (TextAlignment.generic screen size)::result\r\n            | TextAlignmentOnly (screen, size)  -> (TextAlignment.only screen size)::result\r\n            | TextTransform transform           -> (TextTransform.Option.toClass transform)::result\r\n            | Display (screen, display)         -> (Display.toDisplayClass screen display)::result\r\n            | DisplayOnly (screen, display)     -> (Display.toDisplayOnlyClass screen display)::result\r\n            | IsInvisible (screen, b)           -> if b then (ofInvisible screen)::result else result\r\n            | IsInvisibleOnly (screen, b)       -> if b then (ofInvisibleOnly screen)::result else result\r\n            | IsHidden (screen, b)              -> if b then (ofHidden screen)::result else result\r\n            | IsHiddenOnly (screen, b)          -> if b then (ofHiddenOnly screen)::result else result\r\n            | IsSrOnly\r\n            | IsScreenReaderOnly -> \"is-sr-only\"::result\r\n            | IsClearfix\r\n            | IsPulledLeft\r\n            | IsPulledRight\r\n            | IsMarginless\r\n            | IsPaddingless\r\n            | IsOverlay\r\n            | IsClipped\r\n            | IsRadiusless\r\n            | IsShadowless\r\n            | IsClickable\r\n            | IsUnselectable\r\n            | IsFlex\r\n            | IsRelative -> (Reflection.getCaseName option)::result\r\n            | Spacing (typ, amount) -> (Spacing.toSpacingClass typ amount)::result\r\n            | FlexDirection direction ->\r\n                if not (List.contains \"is-flex\" result) then\r\n                    \"is-flex\"::(FlexDirection.Option.toClass direction)::result\r\n                else\r\n                    (FlexDirection.Option.toClass direction)::result\r\n            | FlexWrap option ->\r\n                if not (List.contains \"is-flex\" result) then\r\n                    \"is-flex\"::(FlexWrap.Option.toClass option)::result\r\n                else\r\n                    (FlexWrap.Option.toClass option)::result\r\n            | FlexJustifyContent option ->\r\n                if not (List.contains \"is-flex\" result) then\r\n                    \"is-flex\"::(FlexJustifyContent.Option.toClass option)::result\r\n                else\r\n                    (FlexJustifyContent.Option.toClass option)::result\r\n            | FlexAlignContent option ->\r\n                if not (List.contains \"is-flex\" result) then\r\n                    \"is-flex\"::(FlexAlignContent.Option.toClass option)::result\r\n                else\r\n                    (FlexAlignContent.Option.toClass option)::result\r\n            | FlexAlignItems option ->\r\n                if not (List.contains \"is-flex\" result) then\r\n                    \"is-flex\"::(FlexAlignItems.Option.toClass option)::result\r\n                else\r\n                    (FlexAlignItems.Option.toClass option)::result\r\n\r\n            | FlexAlignSelf option ->\r\n                (FlexAlignSelf.Option.toClass option)::result\r\n\r\n            | FlexGrow size ->\r\n                (FlexGrow.Option.toClass size)::result\r\n\r\n            | FlexShrink size ->\r\n                (FlexShrink.Option.toClass size)::result\r\n\r\n        options |> List.fold parseOptions []\r\n\r\n[<AutoOpen>]\r\nmodule Common =\r\n    type GenericOption =\r\n        | CustomClass of string\r\n        | Props of IHTMLProp list\r\n        | Modifiers of Modifier.IModifier list\r\n\r\n    type GenericOptions =\r\n        { Props : IHTMLProp list\r\n          Classes : string list\r\n          RemovedClasses : string list }\r\n\r\n        static member Empty =\r\n            { Props = []; Classes = []; RemovedClasses = [] }\r\n\r\n        static member Parse(options, parser, ?baseClass, ?baseProps) =\r\n            let result = options |> List.fold parser GenericOptions.Empty\r\n\r\n            let result =\r\n                match baseClass with\r\n                | Some baseClass -> result.AddClass(baseClass)\r\n                | None -> result\r\n\r\n            match baseProps with\r\n            | Some baseProps -> result.AddProps(baseProps)\r\n            | None -> result\r\n\r\n        member this.AddProp(prop : IHTMLProp) =\r\n            { this with Props = prop::this.Props }\r\n\r\n        member this.AddProps(props : IHTMLProp list) =\r\n            { this with Props = props@this.Props }\r\n\r\n        member this.AddClass(cl: string) =\r\n            { this with Classes = cl::this.Classes }\r\n\r\n        member this.RemoveClass(cl: string) =\r\n            { this with RemovedClasses = cl::this.RemovedClasses }\r\n\r\n        member this.AddCaseName(case: 'T) =\r\n            Reflection.getCaseName case |> this.AddClass\r\n\r\n        member this.AddModifiers(modifiers) =\r\n            { this with Classes = (modifiers |> Modifier.parseModifiers) @ this.Classes }\r\n\r\n        member this.ToAttributes() =\r\n            match this.Classes |> List.filter (fun cls -> not (System.String.IsNullOrEmpty cls) && not (List.contains cls this.RemovedClasses)) with\r\n            | [] -> this.Props\r\n            | classes -> (classes |> String.concat \" \" |> ClassName :> _) :: this.Props\r\n\r\n        /// Convert to standard element\r\n        member this.ToReactElement(el : IHTMLProp list -> ReactElement list -> ReactElement, ?children): ReactElement =\r\n            let children = defaultArg children []\r\n            el (this.ToAttributes ()) children\r\n\r\n        /// Convert to self closing element\r\n        member this.ToReactElement(el : IHTMLProp list -> ReactElement): ReactElement =\r\n            el (this.ToAttributes ())\r\n\r\n    let parseOptions (result : GenericOptions) option =\r\n        match option with\r\n        | Props props -> result.AddProps props\r\n        | CustomClass customClass -> result.AddClass customClass\r\n        | Modifiers modifiers -> result.AddModifiers modifiers\r\n\r\n    module Helpers =\r\n\r\n        [<System.Obsolete(\"Use GenericOptions.Parse. This build an abstraction layer usable by all the components and helps reduce the bundle size\")>]\r\n        let classes std (options : string option list) (booleans: (string * bool) list) =\r\n            let std = (std, options) ||> List.fold (fun complete option ->\r\n                match option with\r\n                | Some name -> complete + \" \" + name\r\n                | None -> complete )\r\n            (std, booleans) ||> List.fold (fun complete (name, flag) ->\r\n                if flag then complete + \" \" + name else complete)\r\n            |> ClassName :> IHTMLProp\r\n\r\n[<RequireQualifiedAccess>]\r\nmodule Text =\r\n    open Fable.React\r\n\r\n    let p (options: GenericOption list) children =\r\n        GenericOptions.Parse(options, parseOptions).ToReactElement(p, children)\r\n\r\n    let div (options: GenericOption list) children =\r\n        GenericOptions.Parse(options, parseOptions).ToReactElement(div, children)\r\n\r\n    let span (options: GenericOption list) children =\r\n        GenericOptions.Parse(options, parseOptions).ToReactElement(span, children)\r\n","namespace Fulma\r\n\r\nopen Fulma\r\nopen Fable.React\r\nopen Fable.React.Props\r\n\r\n[<RequireQualifiedAccess>]\r\nmodule Columns =\r\n\r\n    type ISize =\r\n        | [<CompiledName(\"is-1\")>] Is1\r\n        | [<CompiledName(\"is-2\")>] Is2\r\n        | [<CompiledName(\"is-3\")>] Is3\r\n        | [<CompiledName(\"is-4\")>] Is4\r\n        | [<CompiledName(\"is-5\")>] Is5\r\n        | [<CompiledName(\"is-6\")>] Is6\r\n        | [<CompiledName(\"is-7\")>] Is7\r\n        | [<CompiledName(\"is-8\")>] Is8\r\n\r\n        static member ToString (x : ISize)=\r\n            Reflection.getCaseName x\r\n\r\n    let inline private gapSizeGeneric (screen : Screen) (size : ISize) =\r\n        ISize.ToString size + Screen.ToString screen\r\n\r\n    let inline private gapSizeOnly (screen : Screen) (size : ISize) =\r\n        match screen with\r\n        | Screen.Tablet\r\n        | Screen.Desktop\r\n        | Screen.WideScreen ->\r\n            ISize.ToString size + Screen.ToString screen + \"-only\"\r\n        | x ->\r\n            let msg = sprintf \"Screen `%s` does not support `is-%s-%s-only`.\" (Screen.ToString x) (ISize.ToString size) (Screen.ToString x)\r\n            Fable.Core.JS.console.warn(msg)\r\n            \"\"\r\n\r\n    type Option =\r\n        /// Add `is-centered` class\r\n        | [<CompiledName(\"is-centered\")>] IsCentered\r\n        /// Add `is-vcentered` class\r\n        | [<CompiledName(\"is-vcentered\")>] IsVCentered\r\n        /// Add `is-multiline` class\r\n        | [<CompiledName(\"is-multiline\")>] IsMultiline\r\n        /// Add `is-gapless` class\r\n        | [<CompiledName(\"is-gapless\")>] IsGapless\r\n        /// Add `is-mobile` class\r\n        | [<CompiledName(\"is-mobile\")>] IsMobile\r\n        /// Add `is-desktop` class\r\n        | [<CompiledName(\"is-desktop\")>] IsDesktop\r\n        /// Configure the gap size. You can configure the display and gap size\r\n        /// Example: Columns.IsGap (Columns.Desktop, Columns.Is6)\r\n        /// Becomes: `is-6-desktop`\r\n        | IsGap of Screen * ISize\r\n        /// Configure the gap size. You can configure the display and gap size\r\n        /// Example: Columns.IsGapOnly (Columns.Tablet, Columns.Is6)\r\n        /// Becomes: `is-6-tablet-only`\r\n        | IsGapOnly of Screen * ISize\r\n        | CustomClass of string\r\n        | Props of IHTMLProp list\r\n        | Modifiers of Modifier.IModifier list\r\n\r\n    /// Generate <div class=\"columns\"></div>\r\n    let columns (options: Option list) children =\r\n        let parseOptions (result : GenericOptions) option =\r\n            match option with\r\n            | IsCentered\r\n            | IsVCentered\r\n            | IsMultiline\r\n            | IsGapless\r\n            | IsMobile\r\n            | IsDesktop -> result.AddCaseName option\r\n            | IsGap (screen, size) ->\r\n                if not (List.contains \"is-variable\" result.Classes) then\r\n                    result.AddClass(\"is-variable\").AddClass(gapSizeGeneric screen size)\r\n                else\r\n                    result.AddClass(gapSizeGeneric screen size)\r\n            | IsGapOnly (screen, size) ->\r\n                if not (List.contains \"is-variable\" result.Classes) then\r\n                    result.AddClass(\"is-variable\").AddClass(gapSizeOnly screen size)\r\n                else\r\n                    result.AddClass(gapSizeOnly screen size)\r\n            | Props props -> result.AddProps props\r\n            | CustomClass customClass -> result.AddClass customClass\r\n            | Modifiers modifiers -> result.AddModifiers modifiers\r\n\r\n        GenericOptions.Parse(options, parseOptions, \"columns\").ToReactElement(div, children)\r\n","namespace Fulma\r\n\r\nopen Fulma\r\nopen Fable.React\r\nopen Fable.React.Props\r\n\r\n[<RequireQualifiedAccess>]\r\nmodule Column =\r\n\r\n    type ISize =\r\n        | [<CompiledName(\"is-one-quarter\")>] IsOneQuarter\r\n        | [<CompiledName(\"is-one-third\")>] IsOneThird\r\n        | [<CompiledName(\"is-half\")>] IsHalf\r\n        | [<CompiledName(\"is-two-thirds\")>] IsTwoThirds\r\n        | [<CompiledName(\"is-three-quarters\")>] IsThreeQuarters\r\n        | [<CompiledName(\"is-1\")>] Is1\r\n        | [<CompiledName(\"is-2\")>] Is2\r\n        | [<CompiledName(\"is-3\")>] Is3\r\n        | [<CompiledName(\"is-4\")>] Is4\r\n        | [<CompiledName(\"is-5\")>] Is5\r\n        | [<CompiledName(\"is-6\")>] Is6\r\n        | [<CompiledName(\"is-7\")>] Is7\r\n        | [<CompiledName(\"is-8\")>] Is8\r\n        | [<CompiledName(\"is-9\")>] Is9\r\n        | [<CompiledName(\"is-10\")>] Is10\r\n        | [<CompiledName(\"is-11\")>] Is11\r\n        | [<CompiledName(\"is-12\")>] Is12\r\n        | [<CompiledName(\"is-narrow\")>] IsNarrow\r\n        | [<CompiledName(\"is-full\")>] IsFull\r\n        | [<CompiledName(\"is-one-fifth\")>] IsOneFifth\r\n        | [<CompiledName(\"is-two-fifths\")>] IsTwoFifths\r\n        | [<CompiledName(\"is-three-fifths\")>] IsThreeFifths\r\n        | [<CompiledName(\"is-four-fifths\")>] IsFourFifths\r\n\r\n    type Option =\r\n        /// Configure the width of the column. You can configure the display and size\r\n        /// Example: Column.Width (Column.Desktop, Column.Is6)\r\n        /// Becomes: `is-6-desktop`\r\n        | Width of Screen * ISize\r\n        /// Configure the offset of the column. You can configure the display and offset size\r\n        /// Example: Column.Offset (Column.Desktop, Column.Is6)\r\n        /// Becomes: `is-offset-6-desktop`\r\n        | Offset of Screen * ISize\r\n        | CustomClass of string\r\n        | Props of IHTMLProp list\r\n        | Modifiers of Modifier.IModifier list\r\n\r\n    let private suffix = function\r\n        | Screen.All -> \"\"\r\n        | Screen.Desktop -> \"-desktop\"\r\n        | Screen.Tablet -> \"-tablet\"\r\n        | Screen.Mobile -> \"-mobile\"\r\n        | Screen.WideScreen -> \"-widescreen\"\r\n        | Screen.FullHD -> \"-fullhd\"\r\n        | Screen.Touch -> \"-touch\"\r\n\r\n    let internal ofWidth (screen, size) =\r\n        Reflection.getCaseName size + suffix screen\r\n\r\n    let internal ofOffset (screen, offset) =\r\n        let className = Reflection.getCaseName offset\r\n        \"is-offset-\" + className.[3..] + suffix screen\r\n\r\n    /// Generate <div class=\"column\"></div>\r\n    let column (options : Option list) children =\r\n        let parseOptions (result : GenericOptions) option =\r\n            match option with\r\n            | Width (screen, width) ->\r\n                ofWidth (screen, width) |> result.AddClass\r\n            | Offset (screen, offset) ->\r\n                ofOffset (screen, offset) |> result.AddClass\r\n            | CustomClass customClass ->\r\n                result.AddClass customClass\r\n            | Props props ->\r\n                result.AddProps props\r\n            | Modifiers modifiers ->\r\n                result.AddModifiers modifiers\r\n\r\n        GenericOptions.Parse(options, parseOptions, \"column\")\r\n            .ToReactElement(div, children)\r\n","module CodeHelpers.FableHelpers\r\n#line 2\r\nopen Fable.Core.JS\r\nopen Fable.Core.JsInterop\r\nopen Shared\r\nopen Shared.Helpers\r\nopen Elmish\r\nopen Fable.Core\r\nopen Thoth.Json\r\n\r\nmodule Map = FSharp.Collections.Map\r\ntype Map<'k,'v when 'k : comparison> = FSharp.Collections.Map<'k,'v>\r\n\r\nlet private debug = false\r\n// let Resolver.serialize x = JSON.Resolver.serialize x\r\n// let parse x = JSON.parse(x)\r\ntype Resolver =\r\n    // type Encoder<'T> = 'T -> JsonValue\r\n    static member inline MapEncoder<'t>(coders) = // : Encoder<FSharp.Collections.Map<_,_>> =\r\n        let mapEncoder : Encoder<_> =\r\n            fun (x:Map<string,float>) ->\r\n            Thoth.Json.Encode.object (\r\n                                        x\r\n                                        |> Map.toSeq\r\n                                        |> Seq.map(fun (k,v) ->\r\n                                            k, Thoth.Json.Encode.float v\r\n                                        )\r\n                    )\r\n        // type Decoder<'T> = string -> JsonValue -> Result<'T, DecoderError>\r\n        let mapDecoder : Decoder<Map<string,float>> =\r\n            fun x jv ->\r\n                let decoderish= Decode.dict Decode.float\r\n                decoderish x jv\r\n        let coders =\r\n            coders\r\n            |> Extra.withCustom mapEncoder mapDecoder\r\n        coders\r\n    // static member Serialize(x:'t, [<Inject>] ?resolver: ITypeResolver<'t>): string =\r\n    //     let extra = Resolver.MapEncoder Extra.empty\r\n    //     Thoth.Json.Encode.Auto.toString(2,x,extra=extra, resolver=resolver.Value)\r\n    static member inline Serialize(x:'t): string =\r\n        let extra = Resolver.MapEncoder Extra.empty\r\n        Thoth.Json.Encode.Auto.toString(2,x,extra=extra)\r\n    static member inline Deserialize<'t>(x:string) : 't option =\r\n        let extra = Resolver.MapEncoder Extra.empty\r\n        match Thoth.Json.Decode.Auto.fromString(x, extra= extra) with\r\n        | Ok v -> Some v\r\n        | _ ->\r\n            None\r\n\r\n// for debugging\r\nlet inline toGlobal (name:string) value =\r\n    printfn \"Adding global %s\" name\r\n    Browser.Dom.self?(name) <- value\r\n    ()\r\n// let addDays (x:Date,days:int):Date =\r\n//     let date = Constructors.Date.Create(x.valueOf())\r\n//     date.AddDays(days)\r\n\r\nlet pascal (x:string) =\r\n    (string x.[0]).ToUpper() + x.[1..]\r\n\r\nlet formatNumber (places: int option) (num:float) : string =\r\n    let formatCommas (x:string) =\r\n        // printfn \"Format %s\" x\r\n        [0 .. x.Length - 1]\r\n        |> List.map(fun i -> string x.[i])\r\n        // |> List.skip 1\r\n        |> List.rev\r\n        |> List.mapi (fun i c ->\r\n            if (i+1) % 3 = 0 then\r\n                sprintf \",%s\" c\r\n            else\r\n                c\r\n        )\r\n        |> List.rev\r\n        |> String.concat \"\"\r\n        |> String.trim1 [\",\"]\r\n    let places = Option.defaultValue 2 places\r\n    if isNull <| box num then \"null\"\r\n    elif isNaN num then \"NaN\"\r\n    else\r\n        let input = string num\r\n        // printfn \"Testing input %s %.2f\" input num\r\n        match input with\r\n        | Before \".\" b & After \".\" aft ->\r\n            b, if places > 0 then Some aft else None\r\n        | _ -> input, None\r\n        |> function // fix up commas\r\n            | b, aft when b.Length > 3 ->\r\n                formatCommas b, aft\r\n            | b,aft -> b,aft\r\n        |> function\r\n            | b, None -> if places > 0 then sprintf \"%s.%s\" b <| String.replicate places \"0\" else b\r\n            | b, Some aft ->\r\n                if places > aft.Length then\r\n                    \"0\"\r\n                    |> String.replicate (places - aft.Length)\r\n                    |> fun padding -> aft + padding\r\n                    |> sprintf \"%s.%s\" b\r\n                elif places < aft.Length then\r\n                    aft.[0 .. places - 1]\r\n                    |> sprintf \"%s.%s\" b\r\n                else sprintf \"%s.%s\" b aft\r\n\r\n\r\nlet formatInt (num:int) : string =\r\n    formatNumber (Some 0) (float num)\r\n\r\nlet getAttrValue name (x:Browser.Types.HTMLElement) =\r\n    if not <| isNull x.attributes then\r\n        if debug then\r\n            eprintfn \"Found attribute values %i\" x.attributes.length\r\n            console.log(x)\r\n            [0 .. x.attributes.length - 1]\r\n            |> Seq.iter(fun i ->\r\n                let attr = x.attributes.[i]\r\n                eprintfn \"\\tFound attribute: %s %A\" attr.name attr.value\r\n            )\r\n        x.attributes.getNamedItem name\r\n        |> Option.ofObj\r\n        |> Option.bind (fun x -> x.value |> Option.ofObj)\r\n    else None\r\n\r\nlet getTargetAsHtml (ev:Browser.Types.Event) =\r\n    Option.ofObj ev\r\n    |> Option.bind (fun ev -> Option.ofObj ev.target)\r\n    |> Option.map(box >> unbox<Browser.Types.HTMLElement>)\r\n\r\nlet getName (ev:Browser.Types.Event) =\r\n    match getTargetAsHtml ev with\r\n    | Some target ->\r\n        getAttrValue\"data-name\" target\r\n        |> Option.orElseWith (fun () -> getAttrValue \"name\" target)\r\n        |> Option.defaultValue \"\"\r\n    | None -> \"\"\r\n\r\nlet getTargetName title ev =\r\n    try\r\n        let name = getName ev\r\n        Ok name\r\n    with ex ->\r\n        console.error(title + \".getTargetName\")\r\n        Error ex.Message\r\n\r\nlet getTargetValue title (ev:Browser.Types.Event):string option =\r\n    try\r\n        console.log(\"getTargetValue.target\", ev.target)\r\n        let value =\r\n            // https://stackoverflow.com/questions/55093894/how-to-add-the-selected-attribute-to-a-select-option-in-fable\r\n            ev.target?value\r\n            |> Option.ofObj\r\n        value\r\n    with e ->\r\n        console.error(title + \".getTargetValue\",e)\r\n        None\r\n\r\nlet toggleArrayValue (source: _[],target) =\r\n    if source |> FSharp.Collections.Array.contains target then\r\n        source |> FSharp.Collections.Array.filter(fun x -> x <> target)\r\n    else source |> FSharp.Collections.Array.append ([| target |])\r\nlet toggleListValue (source: _ list) target =\r\n    if source |> List.contains target then\r\n        source |> List.filter(fun x -> x <> target)\r\n    else target::source\r\n\r\nlet toggleMapListValue (source: Map<_,_ list>) k v =\r\n    source\r\n    |> Map.tryFind k\r\n    |> function\r\n        | None ->\r\n            source |> Map.add k [v]\r\n        | Some [x] when x = v ->\r\n            source |> Map.remove k\r\n        | Some items when items |> List.contains v ->\r\n            source |> Map.add k (items |> List.filter(fun x -> x = v))\r\n        | Some items ->\r\n            source |> Map.add k (v::items)\r\n\r\n\r\n\r\nlet mapCmd f model cmd =\r\n    model, cmd |> Cmd.map f\r\nlet mapUpdate fModel fMsg model cmd =\r\n    fModel model, cmd |> Cmd.map fMsg","namespace Fable.FontAwesome\n\nopen Fable.Core\nopen Fable.React\nopen Fable.React.Props\n\nmodule internal Helpers =\n\n    let classes std (options : string option list) (booleans: (string * bool) list) =\n        let std = (std, options) ||> List.fold (fun complete opt ->\n            match opt with Some name -> complete + \" \" + name | None -> complete)\n        (std, booleans) ||> List.fold (fun complete (name, flag) ->\n            if flag then complete + \" \" + name else complete)\n        |> ClassName :> IHTMLProp\n\n[<RequireQualifiedAccess>]\nmodule Fa =\n\n    module Classes =\n        module Size =\n            let [<Literal>] FaExtraSmall = \"fa-xs\"\n            let [<Literal>] FaSmall = \"fa-sm\"\n            let [<Literal>] FaLarge = \"fa-lg\"\n            let [<Literal>] Fa2x = \"fa-2x\"\n            let [<Literal>] Fa3x = \"fa-3x\"\n            let [<Literal>] Fa4x = \"fa-4x\"\n            let [<Literal>] Fa5x = \"fa-5x\"\n            let [<Literal>] Fa6x = \"fa-6x\"\n            let [<Literal>] Fa7x = \"fa-7x\"\n            let [<Literal>] Fa8x = \"fa-8x\"\n            let [<Literal>] Fa9x = \"fa-9x\"\n            let [<Literal>] Fa10 = \"fa-10x\"\n\n        module Style =\n            let [<Literal>] FixedWidth = \"fa-fw\"\n            let [<Literal>] IsLi = \"fa-li\"\n            let [<Literal>] Border = \"fa-border\"\n            let [<Literal>] Inverse = \"fa-inverse\"\n\n        module Rotations =\n            let [<Literal>] Rotate90 = \"fa-rotate-90\"\n            let [<Literal>] Rotate180 = \"fa-rotate-180\"\n            let [<Literal>] Rotate270 = \"fa-rotate-270\"\n\n        module Flips =\n            let [<Literal>] Horizontal = \"fa-flip-horizontal\"\n            let [<Literal>] Vertical = \"fa-flip-vertical\"\n\n        module Animations =\n            let [<Literal>] Spin = \"fa-spin\"\n            let [<Literal>] Pulse = \"fa-pulse\"\n\n        module Pull =\n            let [<Literal>] Right = \"fa-pull-right\"\n            let [<Literal>] Left = \"fa-pull-left\"\n\n        module Stack =\n\n            let [<Literal>] Container = \"fa-stack\"\n\n            module Size =\n                let [<Literal>] Fa1x = \"fa-stack-1x\"\n                let [<Literal>] Fa2x = \"fa-stack-2x\"\n\n    type ISize =\n        | FaExtraSmall\n        | FaSmall\n        | FaLarge\n        | Fa2x\n        | Fa3x\n        | Fa4x\n        | Fa5x\n        | Fa6x\n        | Fa7x\n        | Fa8x\n        | Fa9x\n        | Fa10\n\n    type IconOption =\n        | Size of ISize\n        | Border\n        | PullLeft\n        | PullRight\n        | Inverse\n        | Rotate90\n        | Rotate180\n        | Rotate270\n        | FlipHorizontal\n        | FlipVertical\n        | IsLi\n        | Icon of string\n        | Spin\n        | Pulse\n        | Props of IHTMLProp list\n        | CustomClass of string\n        | FixedWidth\n        | Stack1x\n        | Stack2x\n\n    let internal ofSize (size : ISize) =\n        match size with\n        | FaExtraSmall -> Classes.Size.FaExtraSmall\n        | FaSmall -> Classes.Size.FaSmall\n        | FaLarge -> Classes.Size.FaLarge\n        | Fa2x -> Classes.Size.Fa2x\n        | Fa3x -> Classes.Size.Fa3x\n        | Fa4x -> Classes.Size.Fa4x\n        | Fa5x -> Classes.Size.Fa5x\n        | Fa6x -> Classes.Size.Fa6x\n        | Fa7x -> Classes.Size.Fa7x\n        | Fa8x -> Classes.Size.Fa8x\n        | Fa9x -> Classes.Size.Fa9x\n        | Fa10 -> Classes.Size.Fa10\n\n    type IconOptions =\n        { Icon : string option\n          Size : string option\n          Border : string option\n          Pull : string option\n          HaveSpin : bool\n          HavePulse : bool\n          Rotation : string option\n          Flip : string option\n          IsInverse : bool\n          Props : IHTMLProp list\n          FixedWidth : bool\n          IsLi : bool\n          StackSize : string option\n          CustomClass : string option }\n\n        static member Empty =\n            { Icon = None\n              Size = None\n              Border = None\n              Pull = None\n              HaveSpin = false\n              HavePulse = false\n              Rotation = None\n              Flip = None\n              IsInverse = false\n              Props = [ ]\n              FixedWidth = false\n              IsLi = false\n              StackSize = None\n              CustomClass = None }\n\n    let toIconOptions (faOptions: IconOption list) =\n        let parseOptions (result: IconOptions) (option: IconOption) =\n            match option with\n            | Size s ->\n                { result with Size = ofSize s |> Some }\n            | Border ->\n                { result with Border = Some Classes.Style.Border }\n            | PullLeft ->\n                { result with Pull = Some Classes.Pull.Left }\n            | PullRight ->\n                { result with Pull = Some Classes.Pull.Right }\n            | Inverse ->\n                { result with IsInverse = true }\n            | Icon faIcon ->\n                { result with Icon = faIcon |> Some }\n            | Rotate90 ->\n                { result with Rotation = Classes.Rotations.Rotate90 |> Some }\n            | Rotate180 ->\n                { result with Rotation = Classes.Rotations.Rotate180 |> Some }\n            | Rotate270 ->\n                { result with Rotation = Classes.Rotations.Rotate270 |> Some }\n            | FlipHorizontal ->\n                { result with Rotation = Classes.Flips.Horizontal |> Some }\n            | FlipVertical ->\n                { result with Rotation = Classes.Flips.Vertical |> Some }\n            | Spin ->\n                { result with HaveSpin = true }\n            | Pulse ->\n                { result with HavePulse = true }\n            | Props props ->\n                { result with Props = props }\n            | FixedWidth ->\n                { result with FixedWidth = true }\n            | IsLi ->\n                { result with IsLi = true }\n            | CustomClass customClass ->\n                { result with CustomClass = Some customClass }\n            | Stack1x ->\n                { result with StackSize = Some Classes.Stack.Size.Fa1x }\n            | Stack2x ->\n                { result with StackSize = Some Classes.Stack.Size.Fa2x }\n\n        faOptions |> List.fold parseOptions IconOptions.Empty\n\n    /// Logic used to display one icon alone or as one item in an unordered list:\n    let internal displayIcon baseElement baseClass (opts: IconOptions) children  =\n        let classes =\n            Helpers.classes baseClass\n                [ opts.Icon\n                  opts.Size\n                  opts.Border\n                  opts.Pull\n                  opts.Rotation\n                  opts.Flip\n                  opts.CustomClass\n                  opts.StackSize ]\n                [ Classes.Style.FixedWidth, opts.FixedWidth\n                  Classes.Style.IsLi, opts.IsLi\n                  Classes.Animations.Pulse, opts.HavePulse\n                  Classes.Animations.Spin, opts.HaveSpin\n                  Classes.Style.Inverse, opts.IsInverse ]\n\n        baseElement (classes::opts.Props)\n          children\n\n    let ul props children =\n        ul [ ClassName \"fa-ul\" ]\n            children\n\n    let ol props children =\n        ol [ ClassName \"fa-ul\" ]\n            children\n\n    let i (faOptions: IconOption list) children =\n        let opts = toIconOptions faOptions\n        displayIcon i \"\" opts children\n\n    let span (faOptions: IconOption list) children =\n        let opts = toIconOptions faOptions\n        displayIcon span \"\" opts children\n\n    module Stack =\n        type Option =\n            | Size of ISize\n            | CustomClass of string\n            | Props of IHTMLProp list\n\n        type internal Options =\n            { Size : string option\n              Props : IHTMLProp list\n              CustomClass : string option }\n\n            static member Empty =\n                { Size = None\n                  Props = [ ]\n                  CustomClass = None }\n\n\n    let stack options children =\n        let parseOption (result : Stack.Options) opt =\n            match opt with\n            | Stack.Size size ->\n                { result with Size = ofSize size |> Some }\n            | Stack.CustomClass customClass ->\n                { result with CustomClass = Some customClass }\n            | Stack.Props props ->\n                { result with Props = props }\n\n        let opts = options |> List.fold parseOption Stack.Options.Empty\n        let classes = Helpers.classes\n                        Classes.Stack.Container\n                        ( opts.Size\n                            :: opts.CustomClass\n                            :: [] )\n                        [ ]\n\n        Fable.React.Standard.span (classes::opts.Props)\n            children\n","//translate SharedComponents.tsx\r\nmodule Components.SharedComponents\r\n\r\nopen Fable.React\r\nopen Fable.React.Props\r\nopen Fulma\r\n\r\nopen Shared\r\n\r\ntype Children = ReactElement seq\r\n\r\ntype ThemeProps = {\r\n    Theme:string\r\n}\r\n// https://bulma.io/documentation/modifiers/syntax/\r\n// type SizeClass = 'is-large' | 'is-small';\r\ntype SizeClass =\r\n    |Small\r\n    |Large\r\nlet getSizeText =\r\n    function\r\n    |Small -> \"is-small\"\r\n    |Large -> \"is-large\"\r\n\r\ntype NumberInputProps = {\r\n    Name:string\r\n    OnChange: NameValue -> unit\r\n    Placeholder: string option\r\n    Value: float option\r\n}\r\n\r\nopen CodeHelpers.FableHelpers\r\nopen Shared.Helpers\r\n\r\nlet Select<'t> \r\n    (props:{|\r\n            addedClasses: string list\r\n            items: 't list\r\n            map: 't -> string\r\n            parse: string -> 't option\r\n            onChange: 't -> unit\r\n            active: 't |})\r\n    =\r\n        select [\r\n            yield Value (props.active |> props.map)\r\n            yield Class (\"select\" :: props.addedClasses |> String.concat \" \")\r\n            yield OnChange (getTargetValue \"SelectOpt.OnChange\" >> Option.bind props.parse >> Option.iter props.onChange)\r\n            ](props.items |> Seq.map(fun item -> option [props.map item |> box |> Value ][unbox <| props.map item]))\r\n\r\nlet SelectOpt<'t> \r\n    (props:{|\r\n            addedClasses: string list\r\n            emptyLabel: string\r\n            items: 't list\r\n            map: 't -> string\r\n            parse: string -> 't option\r\n            onChange: 't option -> unit\r\n            active: 't option |})\r\n    =\r\n        select [\r\n            yield Value (props.active |> Option.map props.map |> Option.defaultValue \"\")\r\n            yield Class (\"select\" :: props.addedClasses |> String.concat \" \")\r\n            yield OnChange (getTargetValue \"SelectOpt.OnChange\" >> Option.bind props.parse >> props.onChange)\r\n            ][\r\n                yield option [Value \"\"][unbox props.emptyLabel]\r\n                yield! (props.items |> Seq.map(fun item -> option [props.map item |> box |> Value ][unbox <| props.map item]))\r\n            ]\r\n\r\nlet NumberInput (props:NumberInputProps) =\r\n    let parser = \r\n        Option.bind tryParseDec\r\n    input [ \r\n        yield Class \"input\"\r\n        yield OnChange (fun x -> {Name= props.Name;Value= getTargetValue (sprintf \"NumberInput.%s\" props.Name) x |> parser } |> props.OnChange)\r\n        match props.Placeholder with\r\n        | Some x ->\r\n            yield Placeholder x\r\n        | None -> ()\r\n        match props.Value with\r\n        | Some x ->\r\n            yield DefaultValue x\r\n        | None -> ()\r\n        ]\r\n\r\n// type InputColumnProps\r\n\r\n// type InputType = React.DetailedHTMLProps<\r\n// let inputb = <select />\r\n// let inputa = <input />\r\n// export let HField = (props: { title: string; label: string; input: React.DetailedReactHTMLElement<{ className: string; }, HTMLElement>; }) =>(\r\nlet HField<'t> (props:{|title:string;label:string;input:string -> ReactElement|}): ReactElement =\r\n    div [Title props.title][\r\n        div [Class \"field is-horizontal\"][\r\n            div [Class \"field-label is-normal\"][\r\n                label [Class \"label\"][unbox props.label]\r\n            ]\r\n            div [Class \"field-body\"][\r\n                div [Class \"field\"][\r\n                    p [Class \"control\"][\r\n                        (props.input \" input \")\r\n                    ]\r\n                ]\r\n            ]\r\n        ]\r\n    ]\r\n\r\nmodule TabLink =\r\n    // export type TabLinkProps<T extends string> = {\r\n    //   name:T\r\n    //   onClick:Types.Action1<T>\r\n    //   active: T | undefined\r\n    //   children: React.ReactNode\r\n    //   title?:string\r\n    // }\r\n    type TabLinkProps = {\r\n        Name:string\r\n        OnClick: string -> unit\r\n        Active: string option\r\n        Children: Children // Fable.React.ReactNode\r\n        Title:string option\r\n    }\r\n\r\n    let TabLink props =\r\n        li [\r\n            Key props.Name\r\n            Title (props.Title |> Option.defaultValue props.Name)\r\n            Class (match props.Active with | Some active when active = props.Name -> \"active\" | _ -> \"\")\r\n           ][\r\n               a[\r\n                   OnClick (fun _ -> props.OnClick props.Name)\r\n                   Data(\"name\",props.Name)\r\n                ] props.Children\r\n            ]\r\n\r\n    let TabTextLink name active onClick = \r\n        TabLink {Name=name;Active=active;OnClick=onClick;Title=None;Children=[unbox name]}\r\n\r\nopen TabLink\r\n\r\nlet TabContainer<'t> addedClasses \r\n    (stdTabs:{|\r\n                names:'t list\r\n                map: 't -> string\r\n                onClick:'t -> unit\r\n                active:'t option |} option)\r\n    (children: ReactElement seq) =\r\n        div [Class (\"tabs is-centered is-boxed\" + (addedClasses |> Option.defaultValue \"\"))][\r\n            ul [] [\r\n                match stdTabs with\r\n                | None -> ()\r\n                | Some tabs ->\r\n                    yield!\r\n                        tabs.names\r\n                        |> Seq.map(fun n ->\r\n                            TabTextLink (tabs.map n) (tabs.active |> Option.map tabs.map) (fun _ -> tabs.onClick n)\r\n                        )\r\n\r\n                yield! children\r\n            ]\r\n        ]\r\n\r\ntype DiagnosticMode =\r\n    |Shown\r\n    |Hidden\r\n\r\nlet Diagnostic mode (value:obj) =\r\n    try\r\n        pre[][\r\n            match mode with\r\n            | Shown ->\r\n                yield unbox (Resolver.Serialize value)\r\n            | _ -> ()\r\n        ]\r\n    with ex ->\r\n        pre[][\r\n            yield unbox ex.Message\r\n        ]\r\n\r\nlet Table (props:{| headers:string list;children:ReactElement seq |}) =\r\n    table [Class \"table\"][\r\n        thead [][\r\n            tr[][\r\n                yield! props.headers |> Seq.map(fun h -> \r\n                    th [Key h;Class \"th\"][unbox h]\r\n                )\r\n            ]\r\n        ]\r\n        tbody [] props.children\r\n    ]\r\n\r\ntype FoldableState = {\r\n  IsFolded:bool\r\n}\r\n\r\ntype FoldableProps = {\r\n  DefaultFold:bool\r\n  Title:string\r\n  Children:ReactElement\r\n}\r\n\r\n// export let FoldTarget = (props:{isFolded:boolean, children:React.ReactNode}) => (<React.Fragment>\r\n//   {props.isFolded? null : props.children}\r\n// </React.Fragment>);\r\nlet FoldTarget isFolded element : ReactElement =\r\n    fragment [] [\r\n        if isFolded then yield element\r\n    ]\r\n\r\n// export let FoldMaster = (props:{title:string,isFolded:boolean,onToggle:Types.Action1<boolean>}) =>\r\n// {\r\n//   let toggle = () => props.onToggle(props.isFolded == false);\r\n//   return (<div onClick={toggle}>{<FontAwesomeIcon icon={props.isFolded === true ? faPlus : faMinus} />} {props.title}</div>);\r\n// }\r\nopen Fable.FontAwesome\r\n\r\nmodule Fa =\r\n    let FaIcon opts fa =\r\n        Icon.icon opts [Fa.i [fa][]]\r\n\r\nlet FoldMaster (props:{| title:string;isFolded:bool;onToggle:bool -> unit |}) =\r\n    let icon = if props.isFolded then Fa.Solid.Minus else Fa.Solid.Plus \r\n    let toggle = fun _ -> props.onToggle(not props.isFolded)\r\n    div [OnClick toggle][\r\n        Fa.FaIcon [] icon\r\n        unbox props.title\r\n    ]\r\n\r\nlet getEvValue:Browser.Types.Event -> string =\r\n    fun e ->\r\n        Browser.Dom.console.log(e.currentTarget)\r\n        let result = e.Value\r\n        printfn \"EvTarget is %A\" result\r\n        result\r\n","namespace Fulma\r\n\r\nopen Fulma\r\nopen Fable.React\r\nopen Fable.React.Props\r\n\r\n[<RequireQualifiedAccess>]\r\nmodule Icon =\r\n\r\n    type Option =\r\n        // Sizes\r\n        | Size of ISize\r\n        /// Add `is-left` class\r\n        | [<CompiledName(\"is-left\")>] IsLeft\r\n        /// Add `is-right` class\r\n        | [<CompiledName(\"is-right\")>] IsRight\r\n        // Extra\r\n        | CustomClass of string\r\n        | Props of IHTMLProp list\r\n        | Modifiers of Modifier.IModifier list\r\n\r\n    /// Generate <span class=\"icon\"></span>\r\n    let icon options children =\r\n        let parseOptions (result : GenericOptions) option =\r\n            match option with\r\n            // Sizes\r\n            | Size size -> ofSize size |> result.AddClass\r\n            // Position\r\n            | IsLeft\r\n            | IsRight -> result.AddCaseName option\r\n            // Extra\r\n            | Props props -> result.AddProps props\r\n            | CustomClass customClass -> result.AddClass customClass\r\n            | Modifiers modifiers -> result.AddModifiers modifiers\r\n\r\n        GenericOptions.Parse(options, parseOptions, \"icon\").ToReactElement(span, children)\r\n\r\n    module Text =\r\n\r\n        let span (options: GenericOption list) children =\r\n            GenericOptions.Parse(options, parseOptions, \"icon-text\").ToReactElement(span, children)\r\n\r\n        let div (options: GenericOption list) children =\r\n            GenericOptions.Parse(options, parseOptions, \"icon-text\").ToReactElement(div, children)\r\n","[<AutoOpen>]\r\nmodule Fable.React.Extensions\r\n\r\ntype Browser.Types.Event with\r\n    /// Access the value from target\r\n    /// Equivalent to `(this.target :?> HTMLInputElement).value`\r\n    member this.Value =\r\n        (this.target :?> Browser.Types.HTMLInputElement).value\r\n\r\n    /// Access the checked property from target\r\n    /// Equivalent to `(this.target :?> HTMLInputElement).checked`\r\n    member this.Checked =\r\n        (this.target :?> Browser.Types.HTMLInputElement).``checked``\r\n","namespace Fulma\r\n\r\nopen Fulma\r\nopen Fable.React\r\nopen Fable.React.Props\r\nopen Browser.Types\r\n\r\n[<RequireQualifiedAccess>]\r\nmodule Input =\r\n\r\n    module Classes =\r\n        let [<Literal>] Container = \"input\"\r\n        module State =\r\n            let [<Literal>] IsFocused = \"is-focused\"\r\n            let [<Literal>] IsActive = \"is-active\"\r\n            let [<Literal>] IsHovered = \"is-hovered\"\r\n            let [<Literal>] IsLoading = \"is-loading\"\r\n            let [<Literal>] IsStatic = \"is-static\"\r\n        module Styles =\r\n            let [<Literal>] IsRounded = \"is-rounded\"\r\n        module Size =\r\n            let [<Literal>] IsSmall = \"is-small\"\r\n            let [<Literal>] IsMedium = \"is-medium\"\r\n            let [<Literal>] IsLarge = \"is-large\"\r\n            let [<Literal>] IsFullwidth = \"is-fullwidth\"\r\n            let [<Literal>] IsInline = \"is-inline\"\r\n\r\n    type IInputType =\r\n        | Text\r\n        | Password\r\n        | DatetimeLocal\r\n        | Date\r\n        | Month\r\n        | Time\r\n        | Week\r\n        | Number\r\n        | Email\r\n        | Url\r\n        | Search\r\n        | Tel\r\n        | ColorType\r\n\r\n    type Option =\r\n        | Size of ISize\r\n        /// Set `Type` HTMLAttr\r\n        /// Don't use if you used one of the helpers like: `Input.password`\r\n        | Type of IInputType\r\n        | Color of IColor\r\n        /// Set `Id` HTMLAttr\r\n        | Id of string\r\n        /// Add `disabled` HTMLAttr if true\r\n        | Disabled of bool\r\n        /// Set `IsReadOnly` HTMLAttr\r\n        | IsReadOnly of bool\r\n        /// Add `is-static` class if true\r\n        | [<CompiledName(\"is-static\")>] IsStatic of bool\r\n        /// Add `is-rounded` class\r\n        | [<CompiledName(\"is-rounded\")>] IsRounded\r\n        /// Set `Value` HTMLAttr\r\n        | Value of string\r\n        | Key of string\r\n        /// Set `DefaultValue` HTMLAttr\r\n        | DefaultValue of string\r\n        /// `Ref` callback that sets the value of an input textbox after DOM element is created.\r\n        | ValueOrDefault of string\r\n        /// Set `Placeholder` HTMLAttr\r\n        | Placeholder of string\r\n        | OnChange of (Event -> unit)\r\n        | Ref of (Element->unit)\r\n        | Props of IHTMLProp list\r\n        | CustomClass of string\r\n        | Modifiers of Modifier.IModifier list\r\n\r\n    let private ofType (typ : IInputType) =\r\n        match typ with\r\n        | Text -> \"text\"\r\n        | Password -> \"password\"\r\n        | DatetimeLocal -> \"datetime-local\"\r\n        | Date -> \"date\"\r\n        | Month -> \"month\"\r\n        | Time -> \"time\"\r\n        | Week -> \"week\"\r\n        | Number -> \"number\"\r\n        | Email -> \"email\"\r\n        | Url -> \"url\"\r\n        | Search -> \"search\"\r\n        | Tel -> \"tel\"\r\n        | IInputType.ColorType -> \"color\"\r\n\r\n    open Fable.Core.JsInterop\r\n\r\n    /// Generate <input class=\"input\" />\r\n    let input (options : Option list) =\r\n        let parseOptions (result : GenericOptions) option =\r\n            match option with\r\n            | IsStatic state -> if state then result.AddCaseName option else result\r\n            | IsRounded -> result.AddCaseName option\r\n            | Size size -> ofSize size |> result.AddClass\r\n            | Color color -> ofColor color |> result.AddClass\r\n            | Type type' -> Props.Type (ofType type') |> result.AddProp\r\n            | Id id -> Props.Id id |> result.AddProp\r\n            | Disabled disabled -> Props.Disabled disabled |> result.AddProp\r\n            | IsReadOnly state -> Props.ReadOnly state |> result.AddProp\r\n            | Value value -> Props.Value value |> result.AddProp\r\n            | DefaultValue defaultValue -> Props.DefaultValue defaultValue |> result.AddProp\r\n            | ValueOrDefault valueOrDefault ->\r\n                Props.Ref <| (fun e ->\r\n                    if e |> isNull |> not\r\n                        && !!e?value <> valueOrDefault then\r\n                        e?value <- valueOrDefault\r\n                ) |> result.AddProp\r\n            | Placeholder placeholder -> Props.Placeholder placeholder |> result.AddProp\r\n            | OnChange cb -> Props.OnChange cb |> result.AddProp\r\n            | Ref ref -> Props.Ref ref |> result.AddProp\r\n            | Props props -> result.AddProps props\r\n            | CustomClass customClass -> result.AddClass customClass\r\n            | Modifiers modifiers -> result.AddModifiers modifiers\r\n            | Key k -> Props.Prop.Key k |> result.AddProp\r\n\r\n        GenericOptions.Parse(options, parseOptions, \"input\").ToReactElement(input)\r\n\r\n    /// Generate <input type=\"text\" class=\"input\" />\r\n    let inline text options = input (Type Text :: options)\r\n    /// Generate <input type=\"password\" class=\"input\" />\r\n    let inline password options = input (Type Password :: options)\r\n    /// Generate <input type=\"datetime-local\" class=\"input\" />\r\n    let inline datetimeLocal options = input (Type DatetimeLocal :: options)\r\n    /// Generate <input type=\"date\" class=\"input\" />\r\n    let inline date options = input (Type Date :: options)\r\n    /// Generate <input type=\"month\" class=\"input\" />\r\n    let inline month options = input (Type Month :: options)\r\n    /// Generate <input type=\"time\" class=\"input\" />\r\n    let inline time options = input (Type Time :: options)\r\n    /// Generate <input type=\"week\" class=\"input\" />\r\n    let inline week options = input (Type Week :: options)\r\n    /// Generate <input type=\"number\" class=\"input\" />\r\n    let inline number options = input (Type Number :: options)\r\n    /// Generate <input type=\"email\" class=\"input\" />\r\n    let inline email options = input (Type Email :: options)\r\n    /// Generate <input type=\"url\" class=\"input\" />\r\n    let inline url options = input (Type Url :: options)\r\n    /// Generate <input type=\"search\" class=\"input\" />\r\n    let inline search options = input (Type Search :: options)\r\n    /// Generate <input type=\"tel\" class=\"input\" />\r\n    let inline tel options = input (Type Tel :: options)\r\n    /// Generate <input type=\"color\" class=\"input\" />\r\n    let inline color options = input (Type IInputType.ColorType :: options)\r\n","module Components.Api\r\n\r\n// https://hypixel.net/threads/skyblock-api.2942479/\r\n\r\nopen Fable.React\r\nopen Fable.React.Props\r\nopen Elmish\r\nopen Fulma\r\n\r\nopen Shared\r\nopen Shared.Helpers\r\nopen CodeHelpers.HypixelApi\r\nopen CodeHelpers.FableHelpers\r\nopen Components.SharedComponents\r\n\r\nlet useProxy = true\r\n\r\ntype Model = {\r\n    Key: string\r\n    Name: string // user name\r\n    Uuid: string\r\n    Loading: bool\r\n    SkyblockProfile: string\r\n}\r\n\r\ntype Msg =\r\n    | FetchRequested\r\n    | ClearRequested\r\n    | ResultLoaded of Result<string,exn>\r\n    | KeyChange of string\r\n    | NameChange of string\r\n    | UuidChange of string\r\n    | SkyblockDataChange of string\r\n    | SkyblockProfileLoadClick\r\n\r\nlet init initOverride : Model * Cmd<Msg> =\r\n    initOverride |> Option.defaultValue {Key=\"\";Name=\"\";Uuid=\"\";Loading=false;SkyblockProfile=\"\"}, Cmd.none\r\n\r\n\r\nlet update msg model : Model * Cmd<Msg> =\r\n        match msg with\r\n        | SkyblockDataChange x ->\r\n            {model with SkyblockProfile= x}, Cmd.none\r\n        | SkyblockProfileLoadClick ->\r\n            model.SkyblockProfile\r\n            |> Option.ofValueString\r\n            |> Option.map(Resolver.Deserialize)\r\n            |> function\r\n                | Some x ->\r\n                    Fable.Core.JS.console.log(\"skyblock profile\", x)\r\n                    model, Cmd.none\r\n                | None ->\r\n                    eprintfn \"Failed to deserialize skyblock profile\"\r\n                    model, Cmd.none\r\n\r\n        | UuidChange x ->\r\n            {model with Uuid=x}, Cmd.none\r\n        | KeyChange x ->\r\n            {model with Key=x}, Cmd.none\r\n        | NameChange x ->\r\n            {model with Name = x}, Cmd.none\r\n        | ResultLoaded(Ok x) ->\r\n            eprintfn \"ApiLoaded?\"\r\n            Fable.Core.JS.console.log(\"ApiLoaded?\",x)\r\n            {model with Loading = false}, Cmd.none\r\n        | ResultLoaded(Error ex) ->\r\n            eprintfn \"ApiLoaded?\"\r\n            Fable.Core.JS.console.log(\"ApiLoaded?\",ex.Message)\r\n            {model with Loading = false}, Cmd.none\r\n        | ClearRequested ->\r\n            {model with Loading = false}, Cmd.none\r\n        | FetchRequested ->\r\n            if model.Loading then\r\n                eprintfn \"Clicked while loading\"\r\n                model, Cmd.none\r\n            else\r\n                match model.Key, model.Uuid, model.Name with\r\n                | ValueString k, ValueString u, _ ->\r\n                    let f = Cmd.OfPromise.either (fetch useProxy) (getUrl (ApiReqType.HypixelSkyblockProfile(k,u))) (Ok >> Msg.ResultLoaded) ( Error >> Msg.ResultLoaded)\r\n                    {model with Loading=true}, f\r\n\r\n                | ValueString k, _, ValueString n ->\r\n                    // let f = Cmd.OfPromise.either (CodeHelpers.HypixelAPI.fetchCharacter useProxy) (k,n) (Ok>>Msg.ResultLoaded) (Error>>Msg.ResultLoaded)\r\n                    let f = Cmd.OfPromise.either (fetch useProxy) (getUrl(ApiReqType.HypixelProfile(k,n))) (Ok>>Msg.ResultLoaded) (Error>>Msg.ResultLoaded)\r\n                    {model with Loading = true}, f\r\n\r\n                // TODO: temp hack not a good idea, quick cors test\r\n                | _, _, ValueString name ->\r\n                    let url = getUrl(ApiReqType.MinecraftUuid (name,None))\r\n                    let f = Cmd.OfPromise.either (fetch useProxy) url (Ok >> Msg.ResultLoaded) (Error >> Msg.ResultLoaded)\r\n                    {model with Loading = true}, f\r\n                | ValueString _, _,  _ ->\r\n                    eprintfn \"Api attempted without a name\"\r\n                    model, Cmd.none\r\n                | _ , _, ValueString _ ->\r\n                    eprintfn \"Api attempted without a key\"\r\n                    model, Cmd.none\r\n                | _ ->\r\n                    eprintfn \"Api attempted without a name or key\"\r\n                    model, Cmd.none\r\nmodule Internals =\r\n    let labeledColumn (label:string) elements =\r\n        Columns.columns[] [\r\n            Column.column [][\r\n                unbox label\r\n            ]\r\n            Column.column [ Column.Option.Width(Screen.All, Column.IsThreeFifths) ] elements\r\n        ]\r\n    let taColumn dispatch label fMsg attr children =\r\n        labeledColumn label [\r\n            Fulma.Textarea.textarea (Textarea.OnChange (getEvValue >> fMsg >> dispatch)::attr) children\r\n        ]\r\n\r\n    let inputColumn dispatch label inputType fMsg value =\r\n        labeledColumn label [\r\n            Fulma.Input.input [Input.Option.Type inputType; Input.Option.DefaultValue value; Input.Option.OnChange (getEvValue>> fMsg >> dispatch)]\r\n        ]\r\n\r\n    let inline apiButton dispatch (label:string) fMsg =\r\n        button [Class \"button\"; OnClick(fun _ -> fMsg |> dispatch)][\r\n            unbox label\r\n        ]\r\n\r\nopen Internals\r\n\r\nlet view (model:Model) (dispatch:Msg -> unit) =\r\n    let inputColumn = inputColumn dispatch\r\n    let apiButton = apiButton dispatch\r\n\r\n    div[][\r\n        inputColumn \"Account Name\" Input.IInputType.Text Msg.NameChange model.Name\r\n        inputColumn \"Minecraft Account Uuid\" Input.IInputType.Text Msg.UuidChange model.Uuid\r\n        inputColumn \"Hypixel ApiKey\" Input.IInputType.Password Msg.KeyChange model.Key\r\n        apiButton \"Fetch Hypixel profile\" Msg.FetchRequested\r\n        apiButton \"Clear loading state\" Msg.ClearRequested\r\n        taColumn dispatch \"Skyblock Info\" Msg.SkyblockDataChange\r\n            [Textarea.DefaultValue model.SkyblockProfile][]\r\n        apiButton \"Load Skyblock Profile\" Msg.SkyblockProfileLoadClick\r\n        hr []\r\n\r\n        ul [](\r\n            let lia (title:string) (link:string) =\r\n                li [] [\r\n                    a [Href link; Target \"_blank\"] [unbox title]\r\n            ]\r\n\r\n        // https://api.hypixel.net/Skyblock/profiles?key=[KEY]&uuid=[UUID]\r\n        // param `at` is optional\r\n        // https://api.mojang.com/users/profiles/minecraft/<username>?at=<timestamp>\r\n            [\r\n                match model.Key, model.Uuid with\r\n                | ValueString k, ValueString u ->\r\n                    yield lia \"View Hypixel Skyblock data in new tab\" <| getUrl (ApiReqType.HypixelSkyblockProfile(k,u))\r\n                | _ ->\r\n                    yield li [][\r\n                        unbox \"Hypixel data requires Hypixel Api Key and Minecraft Account Uuid\"\r\n                    ]\r\n                match model.Key, model.Name with\r\n                | ValueString k, ValueString n ->\r\n                    yield lia \"View Hypixel data in new tab\" <| getUrl (ApiReqType.HypixelProfile(k, n))\r\n                | _ ->\r\n                    yield li [][\r\n                        unbox \"Hypixel data requires Hypixel Api Key and Account Name\"\r\n                    ]\r\n                match model.Name with\r\n                | ValueString n ->\r\n                    yield lia \"View Data in new tab\" <| getUrl (ApiReqType.MinecraftUuid (n,None))\r\n                | _ -> ()\r\n            ]\r\n        )\r\n    ]","namespace Fulma\r\n\r\nopen Fulma\r\nopen Fable.React\r\nopen Fable.React.Props\r\nopen Browser.Types\r\n\r\n[<RequireQualifiedAccess>]\r\nmodule Textarea =\r\n\r\n    type Option =\r\n        | Size of ISize\r\n        /// Add `is-fullwidth` class\r\n        | [<CompiledName(\"is-fullwidth\")>] IsFullWidth\r\n        /// Add `is-inline` class\r\n        | [<CompiledName(\"is-inline\")>] IsInline\r\n        /// Add `is-loading` class if true\r\n        | [<CompiledName(\"is-loading\")>] IsLoading of bool\r\n        /// Add `is-focused` class\r\n        | [<CompiledName(\"is-focused\")>] IsFocused of bool\r\n        /// Add `is-active` class if true\r\n        | [<CompiledName(\"is-active\")>] IsActive of bool\r\n        /// Add `IsReadOnly` HTMLAttr\r\n        | IsReadOnly of bool\r\n        | Color of IColor\r\n        | Id of string\r\n        /// Add `disabled` HTMLAttr if true\r\n        | Disabled of bool\r\n        /// Set `Value` HTMLAttr\r\n        | Value of string\r\n        /// Set `DefaultValue` HTMLAttr\r\n        | DefaultValue of string\r\n        /// `Ref` callback that sets the value of an input textbox after DOM element is created.\r\n        | ValueOrDefault of string\r\n        /// Set `Placeholder` HTMLAttr\r\n        | Placeholder of string\r\n        | Props of IHTMLProp list\r\n        | OnChange of (Event -> unit)\r\n        | Ref of (Element->unit)\r\n        | CustomClass of string\r\n        /// Add `has-fixed-size` class\r\n        | [<CompiledName(\"has-fixed-size\")>] HasFixedSize\r\n        | Modifiers of Modifier.IModifier list\r\n\r\n    open Fable.Core.JsInterop\r\n\r\n    /// Generate <textarea class=\"textarea\"></textarea>\r\n    let textarea options children =\r\n        let parseOptions (result : GenericOptions) option =\r\n            match option with\r\n            | Size size -> ofSize size |> result.AddClass\r\n            | Color color -> ofColor color |> result.AddClass\r\n            | IsFullWidth\r\n            | HasFixedSize\r\n            | IsInline -> result.AddCaseName option\r\n            | IsLoading state\r\n            | IsFocused state\r\n            | IsActive state -> if state then result.AddCaseName option else result\r\n            | Id id -> Props.Id id |> result.AddProp\r\n            | Disabled disabled -> Props.Disabled disabled |> result.AddProp\r\n            | IsReadOnly state -> Props.ReadOnly state |> result.AddProp\r\n            | Value value -> Props.Value value |> result.AddProp\r\n            | DefaultValue defaultValue -> Props.DefaultValue defaultValue |> result.AddProp\r\n            | ValueOrDefault valueOrDefault ->\r\n                Props.Ref <| (fun e ->\r\n                    if e |> isNull |> not\r\n                        && !!e?value <> valueOrDefault then\r\n                        e?value <- valueOrDefault\r\n                ) |> result.AddProp\r\n            | Placeholder placeholder -> Props.Placeholder placeholder |> result.AddProp\r\n            | OnChange cb -> Props.OnChange cb |> result.AddProp\r\n            | Ref ref -> Props.Ref ref |> result.AddProp\r\n            | Props props -> result.AddProps props\r\n            | CustomClass customClass -> result.AddClass customClass\r\n            | Modifiers modifiers -> result.AddModifiers modifiers\r\n\r\n        GenericOptions.Parse(options, parseOptions, \"textarea\").ToReactElement(textarea, children)\r\n","module AppDomain.SalesReference\r\n\r\nopen Shared\r\nopen Shared.Helpers\r\n\r\ntype Category = Farming | Mining | Combat | WoodsOrFishes | Oddities with\r\n    static member FromString =\r\n        function\r\n        | EqualsI \"farming\" -> Some Farming\r\n        | EqualsI \"mining\" -> Some Mining\r\n        | EqualsI \"combat\" -> Some Combat\r\n        | EqualsI \"WoodsOrFishes\" -> Some WoodsOrFishes\r\n        | EqualsI \"Oddities\" -> Some Oddities\r\n        | x ->\r\n            eprintfn \"Category.FromString could not interpret %s\" x\r\n            None\r\n\r\ntype ItemForm = {\r\n  Label:string\r\n  Div:int option\r\n  Vend:float option\r\n  IsBazaar: bool\r\n  Asterisk:string option\r\n} with\r\n    static member CreateEmpty lbl div = {Label=lbl;Div=Some div;Vend=None;Asterisk=None;IsBazaar=true}\r\n    static member CreateSpecial lbl = {Label=lbl;Div=None;Vend=None;Asterisk=None;IsBazaar=true}\r\n    static member NoBazaar x = {x with IsBazaar=false}\r\n    static member MakeStandards (name,?adds:{| plainsuffix:string option; blockname:string option |}) =\r\n        let plainSuffix =\r\n            adds\r\n            |> Option.bind(fun a -> a.plainsuffix)\r\n            |> Option.bind (|ValueString|_|)\r\n            |> Option.defaultValue \"\"\r\n        let blockname =\r\n            adds\r\n            |> Option.bind(fun a -> a.blockname)\r\n            |> Option.bind (|ValueString|_|)\r\n            |> Option.defaultValue \"\"\r\n        [\r\n            ItemForm.CreateEmpty (name + (if plainSuffix <> \"\" then \" \" + plainSuffix else \"\")) 1\r\n            ItemForm.CreateEmpty (\"Enchanted \" + name) 160\r\n            ItemForm.CreateEmpty (if blockname <> \"\" then blockname else (sprintf \"Enchanted %s Block\" name)) (160*160)\r\n        ]\r\n\r\ntype Preconfiguration = {\r\n  Name:string\r\n  Category:Category\r\n  Forms:ItemForm list\r\n} with\r\n    // static member CreateEmpty name category = {Name=name;Category=Category;Forms=List.empty}\r\n    static member MakeSimple name category =\r\n        {Name=name;Category=category;Forms=[\r\n            ItemForm.CreateEmpty name 1\r\n        ]}\r\n    static member MakeSemiSimple catName name category =\r\n      {\r\n        Name=sprintf \"%s - %s\" catName name\r\n        Category=category\r\n        Forms=[\r\n          ItemForm.CreateEmpty name 1\r\n        ]\r\n      }\r\n    static member AddForm f x =\r\n      {\r\n        x with\r\n          Forms = x.Forms @ [f]\r\n      }\r\n    static member MakeDual (name,category,?emult) =\r\n        let emult = Option.defaultValue 160 emult\r\n        {Name=name;Category=category;Forms= [\r\n            ItemForm.CreateEmpty name 1\r\n            ItemForm.CreateEmpty (sprintf \"Enchanted %s\" name) emult\r\n        ]}\r\n\r\n// type Suffixes = {plain?:string,enchanted?:string,eblock?:string}\r\nlet makeStandardMining (name:string,plainsuffix:string option) : Preconfiguration  = {\r\n  Name= name\r\n  Category= Category.Mining\r\n  Forms= ItemForm.MakeStandards(name,{|blockname=None;plainsuffix=plainsuffix|})\r\n}\r\n\r\nlet preconfigurations = [\r\n  {\r\n    Name=\"Wheat - Wheat\"\r\n    Category=Farming\r\n    Forms=[\r\n      ItemForm.CreateEmpty \"Wheat\" 1\r\n      ItemForm.CreateEmpty \"Enchanted Bread\" 60\r\n      ItemForm.CreateEmpty \"Hay Bale\" 9\r\n      ItemForm.CreateEmpty \"Enchanted Hay Bale\" (9*16*9)\r\n      ItemForm.CreateEmpty \"Tightly-Tied Hay Bale\" <| 9 * 16 * 9 * 144\r\n    ]\r\n  }\r\n  {\r\n    Name=\"Wheat - Seeds\"\r\n    Category=Farming\r\n    Forms=[\r\n      ItemForm.CreateEmpty \"Seeds\" 1\r\n      ItemForm.CreateEmpty \"Enchanted Seeds\" 160\r\n    ]\r\n  }\r\n  {\r\n    Name=\"Carrot\"\r\n    Category=Farming\r\n    Forms=[\r\n      {ItemForm.CreateEmpty \"Carrot\" 1 with Vend= Some (float <| 3m / 7m) }\r\n      ItemForm.CreateEmpty \"Enchanted Carrot\" 160\r\n      ItemForm.CreateSpecial \"Enchanted Carrot on a Stick\"\r\n      ItemForm.CreateEmpty \"Simple Carrot Candy\" 576\r\n      {\r\n        Label = \"Enchanted Golden Carrot\"\r\n        Div= Some 20_512\r\n        Vend= None\r\n        IsBazaar = true\r\n        Asterisk = Some \"Needs 28.44 Gold Ingot\"\r\n      }\r\n      ItemForm.CreateEmpty \"Great Carrot Candy\" 51_776\r\n      {\r\n        Label = \"Superb Carrot Candy\"\r\n        Div= Some 544_064\r\n        Vend= None\r\n        IsBazaar = true\r\n        Asterisk = Some \"Needs 682.67 Gold Ingot\"\r\n      }\r\n      {\r\n        Label = \"Ultimate Carrot Candy\"\r\n        Div= Some 4_352_512\r\n        Vend= None\r\n        IsBazaar = true\r\n        Asterisk = Some \"Needs 5,461.36 Gold Ingot and Ultimate Carrot Candy Upgrade\"\r\n      }\r\n    ]\r\n  }\r\n  {\r\n    Name=\"Potato\"\r\n    Category=Farming\r\n    Forms=ItemForm.MakeStandards(\"Potato\", {| blockname=Some \"Enchanted Baked Potato\";plainsuffix=None |})\r\n  }\r\n  {\r\n    Name=\"Pumpkin\"\r\n    Category=Farming\r\n    Forms=[\r\n      ItemForm.CreateEmpty \"Pumpkin\" 1\r\n      ItemForm.CreateEmpty \"Enchanted Pumpkin\" 160\r\n      ItemForm.CreateEmpty \"Polished Pumpkin\" <| 160 * 160\r\n    ]\r\n  }\r\n  {\r\n    Name=\"Melon\"\r\n    Category=Farming\r\n    Forms=[\r\n      ItemForm.CreateEmpty \"Melon\" 1\r\n      ItemForm.CreateEmpty \"Enchanted Melon\" 160\r\n      ItemForm.CreateSpecial \"Enchanted Glistening Melon\"\r\n      // Melon 2... same name, different icon\r\n      ItemForm.CreateEmpty \"Enchanted Melon Block\" <| 160*160\r\n    ]\r\n  }\r\n  Preconfiguration.MakeDual(\"Seeds\", Farming)\r\n  {\r\n    Name=\"Red Mushrooms\"\r\n    Category=Farming\r\n    Forms=[\r\n      ItemForm.CreateEmpty \"Red Mushroom\" 1\r\n      ItemForm.CreateEmpty \"Enchanted Red Mushroom\" 160\r\n      ItemForm.CreateEmpty \"Red Mushroom Block\" 9\r\n      ItemForm.CreateEmpty \"Enchanted Red Mushroom Block\" <| 9*64*9\r\n    ]\r\n  }\r\n  {\r\n    Name=\"Brown Mushrooms\"\r\n    Category=Farming\r\n    Forms=[\r\n      ItemForm.CreateEmpty \"Brown Mushroom\" 1\r\n      ItemForm.CreateEmpty \"Enchanted Brown Mushroom\" 160\r\n      ItemForm.CreateEmpty \"Brown Mushroom Block\" 9\r\n      ItemForm.CreateEmpty \"Enchanted Brown Mushroom Block\" <| 9*64*9\r\n    ]\r\n  }\r\n  {\r\n    Name=\"Cocoa Beans\"\r\n    Category=Farming\r\n    Forms=[\r\n      ItemForm.CreateEmpty \"Cocoa Beans\" 1\r\n      ItemForm.CreateEmpty \"Enchanted Cocoa Beans\" 160\r\n      {ItemForm.CreateSpecial \"Enchanted Cookie\" with Asterisk= Some \"Requires Wheat\"}\r\n    ]\r\n  }\r\n  {\r\n    Name=\"Cactus\"\r\n    Category=Farming\r\n    Forms=[\r\n      ItemForm.CreateEmpty \"Cactus\" 1\r\n      ItemForm.CreateEmpty \"Enchanted Cactus Green\" 160\r\n      ItemForm.CreateEmpty \"Enchanted Cactus\" <| 160*160\r\n    ]\r\n  }\r\n  {\r\n    Name=\"Sugar Cane\"\r\n    Category=Farming\r\n    Forms=[\r\n      ItemForm.CreateEmpty \"Sugar Cane\" 1\r\n      ItemForm.CreateEmpty \"Enchanted Sugar\" 160\r\n      ItemForm.CreateEmpty \"Enchanted Paper\" <| 64 * 3\r\n      ItemForm.CreateEmpty \"Enchanted Sugar Cane\" <| 160*160\r\n    ]\r\n  }\r\n  {\r\n    Name=\"Chicken & Feather - Raw Chicken\"\r\n    Category=Farming\r\n    Forms=[\r\n      ItemForm.CreateEmpty \"Raw Chicken\" 1\r\n      ItemForm.CreateEmpty \"Enchanted Raw Chicken\" 160\r\n    ]\r\n  }\r\n  {\r\n    Name=\"Chicken & Feather - Feather\"\r\n    Category=Farming\r\n    Forms=[\r\n      ItemForm.CreateEmpty \"Feather\" 1\r\n      ItemForm.CreateEmpty \"Enchanted Feather\" 160\r\n    ]\r\n  }\r\n  {\r\n    Name=\"Chicken & Feather - Egg\"\r\n    Category=Farming\r\n    Forms=[\r\n      {ItemForm.CreateEmpty \"Enchanted Egg\" 1 with Asterisk= Some \"144(16*9) eggs\"}\r\n      {ItemForm.CreateSpecial \"EnchantedCake\" with Asterisk= Some \"Needs Enchanted Eggs, Wheat, Milk, & Enchanted Sugar\"}\r\n      {(ItemForm.CreateEmpty \"Super Enchanted Egg\" <| 16*9) with Asterisk= Some \"20,736 eggs\"}\r\n    ]\r\n  }\r\n  Preconfiguration.MakeDual(\"Leather\", Farming)\r\n  Preconfiguration.MakeDual(\"Raw Beef\", Farming)\r\n  {\r\n    Name=\"Pork\"\r\n    Category=Farming\r\n    Forms=[\r\n      ItemForm.CreateEmpty \"Raw Pork\" 1\r\n      ItemForm.CreateEmpty \"Enchanted Pork\" 160\r\n      ItemForm.CreateEmpty \"Enchanted Grilled Pork\" <| 160 * 160\r\n    ]\r\n  }\r\n\r\n  {\r\n    Name=\"Cobblestone\"\r\n    Category=Mining\r\n    Forms=[\r\n      ItemForm.CreateEmpty \"Cobblestone\" 1\r\n      ItemForm.CreateEmpty \"Enchanted Cobblestone\" 160\r\n      {ItemForm.CreateEmpty \"Auto Smelter\" 64 with Asterisk= Some \"Needs 1 coal\"}\r\n    ]\r\n  }\r\n  {\r\n    Name=\"Mutton\"\r\n    Category=Farming\r\n    Forms=[\r\n      ItemForm.CreateEmpty \"Raw Mutton\" 1\r\n      ItemForm.CreateEmpty \"Enchanted Mutton\" 160\r\n      ItemForm.CreateEmpty \"Enchanted Cooked Mutton\" <| 160*160\r\n    ]\r\n  }\r\n  {\r\n    Name=\"Rabbit\"\r\n    Category=Farming\r\n    Forms=[\r\n      ItemForm.CreateEmpty \"Raw Rabbit\" 1\r\n      ItemForm.CreateEmpty \"Enchanted Raw Rabbit\" 160\r\n    ]\r\n  }\r\n  {\r\n    Name=\"Rabbit(Feetsies)\"\r\n    Category=Farming\r\n    Forms=[\r\n      ItemForm.CreateEmpty \"Rabbit's Foot\" 1\r\n      ItemForm.CreateEmpty \"Enchanted Rabbit Foot\" 160\r\n    ]\r\n  }\r\n  {\r\n    Name=\"Rabbit(Hide)\"\r\n    Category=Farming\r\n    Forms=[\r\n      ItemForm.CreateEmpty \"Rabbit Hide\" <| 1\r\n      ItemForm.CreateEmpty \"Enchanted Rabbit Hide\" <| 64*9\r\n    ]\r\n  }\r\n  Preconfiguration.MakeDual(\"Nether Wart\",Farming)\r\n  Preconfiguration.MakeDual(\"Mycelium\", Farming)\r\n  {\r\n    Name=\"Coal\"\r\n    Category=Mining\r\n    Forms=[\r\n      ItemForm.CreateEmpty \"Coal Ore\" 1\r\n      ItemForm.CreateEmpty \"Enchanted Coal\" 160\r\n      {(ItemForm.CreateEmpty \"Enchanted Charcoal\" <| 128*160) with Asterisk = Some \"Needs 32 Wood\"}\r\n      {(ItemForm.CreateEmpty \"Enchanted Block of Coal\" <| 160*160) with Asterisk = Some \"Made from Enchanted Coal\"}\r\n    ]\r\n  }\r\n  makeStandardMining(\"Iron\",Some \"Ingot\")\r\n  makeStandardMining(\"Gold\",Some \"Ingot\")\r\n  makeStandardMining(\"Diamond\", None)\r\n  makeStandardMining(\"Lapis\",None)\r\n  makeStandardMining(\"Emerald\",None)\r\n  makeStandardMining(\"Redstone\",None)\r\n  makeStandardMining(\"Quartz\",None)\r\n  Preconfiguration.MakeDual(\"Obsidian\", Mining)\r\n  {\r\n    Name=\"Glowstone\"\r\n    Category=Mining\r\n    Forms=[\r\n      ItemForm.CreateEmpty \"Glowstone Dust\" 1\r\n      ItemForm.CreateEmpty \"Enchanted Glowstone Dust\" 160\r\n      ItemForm.CreateEmpty \"Enchanted Glowstone\"<| 48 * 4 * 160\r\n    ]\r\n  }\r\n  Preconfiguration.MakeSimple \"Gravel\" Mining\r\n  Preconfiguration.MakeDual(\"Flint\",Mining)\r\n  {\r\n    Name=\"Ice\"\r\n    Category=Mining\r\n    Forms=[\r\n      ItemForm.CreateEmpty \"Ice\" <| 1\r\n      // is there a packed ice -> enchanted ice recipe?\r\n      ItemForm.CreateEmpty \"Packed Ice\" <| 9\r\n      ItemForm.CreateEmpty \"Enchanted Ice\" 160\r\n      ItemForm.CreateEmpty \"Enchanted Packed Ice\" <| 160 * 160\r\n      // use costs to determine price from\r\n      // {Label=\"Frost Walker book\", isCost=true, uses=\"Ice\",vend=\"\"}\r\n      // {Label=\"Ice Minion I\", isCost=true, uses=\"Ice\"; Vend=\"\"}\r\n    ]\r\n  }\r\n  Preconfiguration.MakeSimple \"Netherrack\" Mining\r\n  Preconfiguration.MakeDual(\"Sand - Sand\", Mining)\r\n  {\r\n    Name=\"Sand - Red\"\r\n    Category=Mining\r\n    Forms=[\r\n      ItemForm.CreateEmpty \"Red Sand\" 1\r\n      ItemForm.CreateEmpty \"Enchanted Red Sand\" <| 160 * 160\r\n    ]\r\n  }\r\n  Preconfiguration.MakeDual(\"End Stone\",Mining)\r\n  {\r\n    Name=\"Snow\"\r\n    Category=Mining\r\n    Forms=[\r\n      ItemForm.CreateEmpty \"Snowball\" 1\r\n      ItemForm.CreateEmpty \"Snow Block\" 4\r\n      ItemForm.CreateEmpty \"Enchanted Snow Block\" <| 4 * 160\r\n    ]\r\n  }\r\n  {\r\n    Name=\"Dwarven Materials - Mithril\"\r\n    Category=Mining\r\n    Forms=[\r\n      ItemForm.CreateEmpty \"Mithril\" 1\r\n      ItemForm.CreateEmpty \"Enchanted Mithril\" 160\r\n      ItemForm.CreateEmpty \"Refined Mithril\" <| 160 * 160\r\n    ]\r\n  }\r\n  {\r\n    Name=\"Dwarven Materials - Titanium\"\r\n    Category=Mining\r\n    Forms=[\r\n      ItemForm.CreateEmpty \"Titanium\" 1\r\n      ItemForm.CreateEmpty \"Enchanted Titanium\" 160\r\n      ItemForm.CreateEmpty \"Refined Titanium\" <| 160 * 16\r\n    ]\r\n  }\r\n  {\r\n    Name=\"Dwarven Materials - Starfall\"\r\n    Category=Mining\r\n    Forms=[ItemForm.CreateEmpty \"Starfall\" 1]\r\n  }\r\n  {\r\n    Name=\"Dwarven Materials - Treasurite\"\r\n    Category=Mining\r\n    Forms=[ItemForm.CreateEmpty \"Treasurite\" 1]\r\n  }\r\n  {\r\n    Name=\"Sulphur\"\r\n    Category=Mining\r\n    Forms=[\r\n      ItemForm.CreateEmpty \"Sulphur\" 1\r\n      ItemForm.CreateEmpty \"Enchanted Sulphur\" 160\r\n      ItemForm.CreateEmpty \"Enchanted Sulphur Cube\" <| 160 * 160\r\n    ]\r\n  }\r\n  Preconfiguration.MakeDual(\"Rotten Flesh\", Combat)\r\n  {\r\n    Name=\"Bone\"\r\n    Category=Combat\r\n    Forms=[\r\n      ItemForm.CreateEmpty \"Bone\" 1\r\n      ItemForm.CreateEmpty \"Enchanted Bone\" 160\r\n      ItemForm.CreateEmpty \"Enchanted Bone Block\" <| 160 * 160\r\n    ]\r\n  }\r\n  Preconfiguration.MakeDual(\"String\", Combat)\r\n  {\r\n    Name=\"Spider Eye\"\r\n    Category= Combat\r\n    Forms=[\r\n      ItemForm.CreateEmpty \"Spider Eye\" 1\r\n      ItemForm.CreateEmpty \"Enchanted Spider Eye\" 160\r\n      {ItemForm.CreateEmpty \"Enchanted Fermented Spider Eye\" 64 with Asterisk = Some \"Needs 64 sugar and 64 brown mushrooms\"}\r\n    ]\r\n  }\r\n  {\r\n    Name=\"Gunpowder\"\r\n    Category=Combat\r\n    Forms=[\r\n      ItemForm.CreateEmpty \"Gunpowder\" 1\r\n      ItemForm.CreateEmpty \"Enchanted Gunpowder\" 160\r\n      {(ItemForm.CreateEmpty \"Enchanted Firework Rocket\" <| 160*64) with Asterisk = Some \"Needs 16 paper\"}\r\n    ]\r\n  }\r\n  {\r\n    Name=\"Ender Pearl\"\r\n    Category=Combat\r\n    Forms=[\r\n      ItemForm.CreateEmpty \"Ender Pearl\" <| 1\r\n      ItemForm.CreateEmpty \"Enchanted Ender Pearl\" <| 4*5\r\n      {(ItemForm.CreateEmpty \"Enchanted Eye of Ender\" <| 4*5*16) with Asterisk = Some \"Needs 64 Blaze Powder (32 Blaze Rods)\"}\r\n    ]\r\n  }\r\n  Preconfiguration.MakeDual(\"Ghast Tear\", Combat, 5)\r\n  {\r\n    Name=\"Slimeball\"\r\n    Category=Combat\r\n    Forms=ItemForm.MakeStandards(\"Slimeball\",{|blockname=Some \"Enchanted Slime Block\";plainsuffix=None|})\r\n  }\r\n  {\r\n    Name=\"Blaze Rod\"\r\n    Category=Combat\r\n    Forms=[\r\n      ItemForm.CreateEmpty \"Blaze Rod\" <| 1\r\n      ItemForm.CreateEmpty \"Enchanted Blaze Powder\" 160\r\n      ItemForm.CreateEmpty \"Enchanted Blaze Rod\" <| 160 * 160\r\n    ]\r\n  }\r\n  Preconfiguration.MakeSemiSimple \"Mythological\" \"Griffin Feather\" Combat\r\n  Preconfiguration.MakeSemiSimple \"Mythological\" \"Daedalus Stick\" Combat\r\n  Preconfiguration.MakeSemiSimple \"Mythological\" \"Ancient Claw\" Combat |> Preconfiguration.AddForm (ItemForm.CreateEmpty \"Enchanted Ancient Claw\" 160)\r\n  Preconfiguration.MakeSemiSimple \"Revenant Horror\" \"Revenant Flesh\" Combat\r\n\r\n  Preconfiguration.MakeDual(\"Magma Cream\",Combat)\r\n\r\n  Preconfiguration.MakeDual(\"Oak\",WoodsOrFishes)\r\n  Preconfiguration.MakeDual(\"Spruce\", WoodsOrFishes)\r\n  Preconfiguration.MakeDual(\"Birch\", WoodsOrFishes)\r\n  {\r\n    Name=\"Dark Oak\"\r\n    Category = WoodsOrFishes\r\n    Forms = [\r\n\r\n      ItemForm.CreateEmpty \"Dark Oak\" 1\r\n      ItemForm.CreateEmpty \"Enchanted Dark Oak\" 160\r\n      ItemForm.CreateEmpty \"Boots of Growth\" <| 64 * 160 * 4 |> ItemForm.NoBazaar\r\n      ItemForm.CreateEmpty \"Helmet of Growth\" <| 64 * 160 * 5 |> ItemForm.NoBazaar\r\n      ItemForm.CreateEmpty \"Leggings of Growth\" <| 64 * 160 * 7 |> ItemForm.NoBazaar\r\n      ItemForm.CreateEmpty \"Chestplate of Growth\" <| 64 * 160 * 8 |> ItemForm.NoBazaar\r\n      ItemForm.CreateEmpty \"Armor of Growth\" <| 64 * 160 * (4+5+7+8) |> ItemForm.NoBazaar\r\n    ]\r\n  }\r\n  Preconfiguration.MakeDual(\"Acacia\", WoodsOrFishes)\r\n  Preconfiguration.MakeDual(\"Jungle\", WoodsOrFishes)\r\n  {\r\n    Name=\"Raw Fish\"\r\n    Category= WoodsOrFishes\r\n    Forms=ItemForm.MakeStandards(\"Raw Fish\",{| blockname=Some \"Enchanted Cooked Fish\";plainsuffix=None |})\r\n  }\r\n  {\r\n    Name=\"Salmon\"\r\n    Category=WoodsOrFishes\r\n    Forms=ItemForm.MakeStandards(\"Salmon\", {| blockname=Some \"Enchanted Cooked Salmon\";plainsuffix=None |})\r\n  }\r\n  Preconfiguration.MakeDual(\"Clownfish\",WoodsOrFishes)\r\n  Preconfiguration.MakeDual(\"Pufferfish\",WoodsOrFishes)\r\n  Preconfiguration.MakeDual(\"Prismarine Shard\",WoodsOrFishes)\r\n  Preconfiguration.MakeDual(\"Prismarine Crystals\",WoodsOrFishes)\r\n  Preconfiguration.MakeDual(\"Clay\", WoodsOrFishes)\r\n  Preconfiguration.MakeDual(\"Lily Pad\", WoodsOrFishes)\r\n  Preconfiguration.MakeDual(\"Ink Sac\", WoodsOrFishes)\r\n  Preconfiguration.MakeDual(\"Sponge\", WoodsOrFishes)\r\n]\r\ntype NameValue = {\r\n    Name:string\r\n    Value:float\r\n}\r\n\r\ntype VendorReference = {\r\n  Name: string\r\n  Values: NameValue list\r\n}\r\n\r\nlet crv (name,value) = {Name=name;Value=value}\r\n\r\nlet referenceValues = [\r\n    {Name=\"Adventurer\";Values=[\r\n      crv(\"Rotten flesh\",8.0)\r\n      crv(\"Bone\",8.0)\r\n      crv(\"String\",10.0)\r\n      crv(\"Gunpowder\",10.0)\r\n    ]}\r\n    {Name=\"Lumber Merchant\";Values=[\r\n      crv(\"Oak Wood\",5.0)\r\n      crv(\"Birch Wood\",5.0)\r\n      crv(\"Spruce Wood\",5.0)\r\n      crv(\"Dark Oak Wood\",5.0)\r\n      crv(\"Acacia Wood\",5.0)\r\n      crv(\"Jungle Wood\",5.0)\r\n    ]}\r\n    {Name=\"Farm Merchant\";Values=[\r\n      crv(\"Wheat\", 2.33)\r\n      crv(\"Carrot\",2.33)\r\n      crv(\"Potato\",2.33)\r\n      crv(\"Melon\",2.0)\r\n      crv(\"Sugar Cane\",5.0)\r\n      crv(\"Pumpkin\",8.0)\r\n      crv(\"Cocoa Beans\",5.0)\r\n      crv(\"Red Mushroom\",12.0)\r\n      crv(\"Brown Mushroom\",12.0)\r\n      crv(\"Sand\",4.0)\r\n      crv(\"Enchanted Bonemeal\",2.0)\r\n    ]}\r\n    {Name=\"Mine Merchant\";Values=[\r\n      crv(\"Coal\", 8.0 / 2.0)\r\n      crv(\"Iron Ingot\", 22.0 / 4.0)\r\n      crv(\"Gold Ingot\", 12.0 / 2.0)\r\n      crv(\"Gravel\", 12.0 / 2.0)\r\n      crv(\"Cobblestone\", 3.0)\r\n    ]}\r\n    {Name=\"Fish Merchant\"; Values=[\r\n      crv(\"Raw Fish\", 20.0)\r\n      crv(\"Raw Salmon\", 30.0)\r\n      crv(\"Clownfish\", 100.0)\r\n      crv(\"Pufferfish\", 40.0)\r\n    ]}\r\n];\r\n\r\n","import { toIterator, getEnumerator } from \"./Util.js\";\r\nimport { iterate, map, iterateIndexed, concat } from \"./Seq.js\";\r\nimport { FSharpRef } from \"./Types.js\";\r\nimport { class_type } from \"./Reflection.js\";\r\nimport { getItemFromDict, tryGetValue } from \"./MapUtil.js\";\r\nimport { some } from \"./Option.js\";\r\n\r\nexport class HashSet {\r\n    constructor(items, comparer) {\r\n        const this$ = new FSharpRef(null);\r\n        this.comparer = comparer;\r\n        this$.contents = this;\r\n        this.hashMap = (new Map([]));\r\n        this[\"init@8-2\"] = 1;\r\n        const enumerator = getEnumerator(items);\r\n        try {\r\n            while (enumerator[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n                void HashSet__Add_2B595(this$.contents, enumerator[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\r\n            }\r\n        }\r\n        finally {\r\n            enumerator.Dispose();\r\n        }\r\n    }\r\n    get [Symbol.toStringTag]() {\r\n        return \"HashSet\";\r\n    }\r\n    toJSON(_key) {\r\n        const this$ = this;\r\n        return Array.from(this$);\r\n    }\r\n    [\"System.Collections.IEnumerable.GetEnumerator\"]() {\r\n        const this$ = this;\r\n        return getEnumerator(this$);\r\n    }\r\n    GetEnumerator() {\r\n        const this$ = this;\r\n        return getEnumerator(concat(this$.hashMap.values()));\r\n    }\r\n    [Symbol.iterator]() {\r\n        return toIterator(this.GetEnumerator());\r\n    }\r\n    [\"System.Collections.Generic.ICollection`1.Add2B595\"](item) {\r\n        const this$ = this;\r\n        void HashSet__Add_2B595(this$, item);\r\n    }\r\n    [\"System.Collections.Generic.ICollection`1.Clear\"]() {\r\n        const this$ = this;\r\n        HashSet__Clear(this$);\r\n    }\r\n    [\"System.Collections.Generic.ICollection`1.Contains2B595\"](item) {\r\n        const this$ = this;\r\n        return HashSet__Contains_2B595(this$, item);\r\n    }\r\n    [\"System.Collections.Generic.ICollection`1.CopyToZ2E171D71\"](array, arrayIndex) {\r\n        const this$ = this;\r\n        iterateIndexed((i, e) => {\r\n            array[arrayIndex + i] = e;\r\n        }, this$);\r\n    }\r\n    [\"System.Collections.Generic.ICollection`1.get_Count\"]() {\r\n        const this$ = this;\r\n        return HashSet__get_Count(this$) | 0;\r\n    }\r\n    [\"System.Collections.Generic.ICollection`1.get_IsReadOnly\"]() {\r\n        return false;\r\n    }\r\n    [\"System.Collections.Generic.ICollection`1.Remove2B595\"](item) {\r\n        const this$ = this;\r\n        return HashSet__Remove_2B595(this$, item);\r\n    }\r\n    get size() {\r\n        const this$ = this;\r\n        return HashSet__get_Count(this$) | 0;\r\n    }\r\n    add(k) {\r\n        const this$ = this;\r\n        void HashSet__Add_2B595(this$, k);\r\n        return this$;\r\n    }\r\n    clear() {\r\n        const this$ = this;\r\n        HashSet__Clear(this$);\r\n    }\r\n    delete(k) {\r\n        const this$ = this;\r\n        return HashSet__Remove_2B595(this$, k);\r\n    }\r\n    has(k) {\r\n        const this$ = this;\r\n        return HashSet__Contains_2B595(this$, k);\r\n    }\r\n    keys() {\r\n        const this$ = this;\r\n        return map((x) => x, this$);\r\n    }\r\n    values() {\r\n        const this$ = this;\r\n        return map((x) => x, this$);\r\n    }\r\n    entries() {\r\n        const this$ = this;\r\n        return map((v) => [v, v], this$);\r\n    }\r\n    forEach(f, thisArg) {\r\n        const this$ = this;\r\n        iterate((x) => {\r\n            f(x, x, this$);\r\n        }, this$);\r\n    }\r\n}\r\n\r\nexport function HashSet$reflection(gen0) {\r\n    return class_type(\"Fable.Collections.HashSet\", [gen0], HashSet);\r\n}\r\n\r\nexport function HashSet_$ctor_Z6150332D(items, comparer) {\r\n    return new HashSet(items, comparer);\r\n}\r\n\r\nfunction HashSet__TryFindIndex_2B595(this$, k) {\r\n    const h = this$.comparer.GetHashCode(k) | 0;\r\n    let matchValue;\r\n    let outArg = null;\r\n    matchValue = [tryGetValue(this$.hashMap, h, new FSharpRef(() => outArg, (v) => {\r\n        outArg = v;\r\n    })), outArg];\r\n    if (matchValue[0]) {\r\n        return [true, h, matchValue[1].findIndex((v_1) => this$.comparer.Equals(k, v_1))];\r\n    }\r\n    else {\r\n        return [false, h, -1];\r\n    }\r\n}\r\n\r\nfunction HashSet__TryFind_2B595(this$, k) {\r\n    const matchValue = HashSet__TryFindIndex_2B595(this$, k);\r\n    let pattern_matching_result;\r\n    if (matchValue[0]) {\r\n        if (matchValue[2] > -1) {\r\n            pattern_matching_result = 0;\r\n        }\r\n        else {\r\n            pattern_matching_result = 1;\r\n        }\r\n    }\r\n    else {\r\n        pattern_matching_result = 1;\r\n    }\r\n    switch (pattern_matching_result) {\r\n        case 0: {\r\n            return some(getItemFromDict(this$.hashMap, matchValue[1])[matchValue[2]]);\r\n        }\r\n        case 1: {\r\n            return void 0;\r\n        }\r\n    }\r\n}\r\n\r\nexport function HashSet__get_Comparer(this$) {\r\n    return this$.comparer;\r\n}\r\n\r\nexport function HashSet__Clear(this$) {\r\n    this$.hashMap.clear();\r\n}\r\n\r\nexport function HashSet__get_Count(this$) {\r\n    let count = 0;\r\n    let enumerator = getEnumerator(this$.hashMap.values());\r\n    try {\r\n        while (enumerator[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n            const items = enumerator[\"System.Collections.Generic.IEnumerator`1.get_Current\"]();\r\n            count = ((count + items.length) | 0);\r\n        }\r\n    }\r\n    finally {\r\n        enumerator.Dispose();\r\n    }\r\n    return count | 0;\r\n}\r\n\r\nexport function HashSet__Add_2B595(this$, k) {\r\n    const matchValue = HashSet__TryFindIndex_2B595(this$, k);\r\n    let pattern_matching_result;\r\n    if (matchValue[0]) {\r\n        if (matchValue[2] > -1) {\r\n            pattern_matching_result = 0;\r\n        }\r\n        else {\r\n            pattern_matching_result = 1;\r\n        }\r\n    }\r\n    else {\r\n        pattern_matching_result = 1;\r\n    }\r\n    switch (pattern_matching_result) {\r\n        case 0: {\r\n            return false;\r\n        }\r\n        case 1: {\r\n            if (matchValue[0]) {\r\n                const value = void (getItemFromDict(this$.hashMap, matchValue[1]).push(k));\r\n                return true;\r\n            }\r\n            else {\r\n                this$.hashMap.set(matchValue[1], [k]);\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport function HashSet__Contains_2B595(this$, k) {\r\n    const matchValue = HashSet__TryFindIndex_2B595(this$, k);\r\n    let pattern_matching_result;\r\n    if (matchValue[0]) {\r\n        if (matchValue[2] > -1) {\r\n            pattern_matching_result = 0;\r\n        }\r\n        else {\r\n            pattern_matching_result = 1;\r\n        }\r\n    }\r\n    else {\r\n        pattern_matching_result = 1;\r\n    }\r\n    switch (pattern_matching_result) {\r\n        case 0: {\r\n            return true;\r\n        }\r\n        case 1: {\r\n            return false;\r\n        }\r\n    }\r\n}\r\n\r\nexport function HashSet__Remove_2B595(this$, k) {\r\n    const matchValue = HashSet__TryFindIndex_2B595(this$, k);\r\n    let pattern_matching_result;\r\n    if (matchValue[0]) {\r\n        if (matchValue[2] > -1) {\r\n            pattern_matching_result = 0;\r\n        }\r\n        else {\r\n            pattern_matching_result = 1;\r\n        }\r\n    }\r\n    else {\r\n        pattern_matching_result = 1;\r\n    }\r\n    switch (pattern_matching_result) {\r\n        case 0: {\r\n            getItemFromDict(this$.hashMap, matchValue[1]).splice(matchValue[2], 1);\r\n            return true;\r\n        }\r\n        case 1: {\r\n            return false;\r\n        }\r\n    }\r\n}\r\n\r\n","import { equals, toIterator, getEnumerator } from \"./Util.js\";\r\nimport { iterate, map, delay, toArray, iterateIndexed, concat } from \"./Seq.js\";\r\nimport { FSharpRef } from \"./Types.js\";\r\nimport { class_type } from \"./Reflection.js\";\r\nimport { getItemFromDict, tryGetValue } from \"./MapUtil.js\";\r\nimport { format } from \"./String.js\";\r\n\r\nexport class Dictionary {\r\n    constructor(pairs, comparer) {\r\n        const this$ = new FSharpRef(null);\r\n        this.comparer = comparer;\r\n        this$.contents = this;\r\n        this.hashMap = (new Map([]));\r\n        this[\"init@8-1\"] = 1;\r\n        const enumerator = getEnumerator(pairs);\r\n        try {\r\n            while (enumerator[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n                const pair = enumerator[\"System.Collections.Generic.IEnumerator`1.get_Current\"]();\r\n                Dictionary__Add_5BDDA1(this$.contents, pair[0], pair[1]);\r\n            }\r\n        }\r\n        finally {\r\n            enumerator.Dispose();\r\n        }\r\n    }\r\n    get [Symbol.toStringTag]() {\r\n        return \"Dictionary\";\r\n    }\r\n    toJSON(_key) {\r\n        const this$ = this;\r\n        return Array.from(this$);\r\n    }\r\n    [\"System.Collections.IEnumerable.GetEnumerator\"]() {\r\n        const this$ = this;\r\n        return getEnumerator(this$);\r\n    }\r\n    GetEnumerator() {\r\n        const this$ = this;\r\n        return getEnumerator(concat(this$.hashMap.values()));\r\n    }\r\n    [Symbol.iterator]() {\r\n        return toIterator(this.GetEnumerator());\r\n    }\r\n    [\"System.Collections.Generic.ICollection`1.Add2B595\"](item) {\r\n        const this$ = this;\r\n        Dictionary__Add_5BDDA1(this$, item[0], item[1]);\r\n    }\r\n    [\"System.Collections.Generic.ICollection`1.Clear\"]() {\r\n        const this$ = this;\r\n        Dictionary__Clear(this$);\r\n    }\r\n    [\"System.Collections.Generic.ICollection`1.Contains2B595\"](item) {\r\n        const this$ = this;\r\n        const matchValue = Dictionary__TryFind_2B595(this$, item[0]);\r\n        let pattern_matching_result;\r\n        if (matchValue != null) {\r\n            if (equals(matchValue[1], item[1])) {\r\n                pattern_matching_result = 0;\r\n            }\r\n            else {\r\n                pattern_matching_result = 1;\r\n            }\r\n        }\r\n        else {\r\n            pattern_matching_result = 1;\r\n        }\r\n        switch (pattern_matching_result) {\r\n            case 0: {\r\n                return true;\r\n            }\r\n            case 1: {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n    [\"System.Collections.Generic.ICollection`1.CopyToZ2E171D71\"](array, arrayIndex) {\r\n        const this$ = this;\r\n        iterateIndexed((i, e) => {\r\n            array[arrayIndex + i] = e;\r\n        }, this$);\r\n    }\r\n    [\"System.Collections.Generic.ICollection`1.get_Count\"]() {\r\n        const this$ = this;\r\n        return Dictionary__get_Count(this$) | 0;\r\n    }\r\n    [\"System.Collections.Generic.ICollection`1.get_IsReadOnly\"]() {\r\n        return false;\r\n    }\r\n    [\"System.Collections.Generic.ICollection`1.Remove2B595\"](item) {\r\n        const this$ = this;\r\n        const matchValue = Dictionary__TryFind_2B595(this$, item[0]);\r\n        if (matchValue != null) {\r\n            if (equals(matchValue[1], item[1])) {\r\n                void Dictionary__Remove_2B595(this$, item[0]);\r\n            }\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n    [\"System.Collections.Generic.IDictionary`2.Add5BDDA1\"](key, value) {\r\n        const this$ = this;\r\n        Dictionary__Add_5BDDA1(this$, key, value);\r\n    }\r\n    [\"System.Collections.Generic.IDictionary`2.ContainsKey2B595\"](key) {\r\n        const this$ = this;\r\n        return Dictionary__ContainsKey_2B595(this$, key);\r\n    }\r\n    [\"System.Collections.Generic.IDictionary`2.get_Item2B595\"](key) {\r\n        const this$ = this;\r\n        return Dictionary__get_Item_2B595(this$, key);\r\n    }\r\n    [\"System.Collections.Generic.IDictionary`2.set_Item5BDDA1\"](key, v) {\r\n        const this$ = this;\r\n        Dictionary__set_Item_5BDDA1(this$, key, v);\r\n    }\r\n    [\"System.Collections.Generic.IDictionary`2.get_Keys\"]() {\r\n        const this$ = this;\r\n        return toArray(delay(() => map((pair) => pair[0], this$)));\r\n    }\r\n    [\"System.Collections.Generic.IDictionary`2.Remove2B595\"](key) {\r\n        const this$ = this;\r\n        return Dictionary__Remove_2B595(this$, key);\r\n    }\r\n    [\"System.Collections.Generic.IDictionary`2.TryGetValue23A0B95A\"](key, value) {\r\n        const this$ = this;\r\n        const matchValue = Dictionary__TryFind_2B595(this$, key);\r\n        if (matchValue != null) {\r\n            const pair = matchValue;\r\n            value.contents = pair[1];\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n    [\"System.Collections.Generic.IDictionary`2.get_Values\"]() {\r\n        const this$ = this;\r\n        return toArray(delay(() => map((pair) => pair[1], this$)));\r\n    }\r\n    get size() {\r\n        const this$ = this;\r\n        return Dictionary__get_Count(this$) | 0;\r\n    }\r\n    clear() {\r\n        const this$ = this;\r\n        Dictionary__Clear(this$);\r\n    }\r\n    delete(k) {\r\n        const this$ = this;\r\n        return Dictionary__Remove_2B595(this$, k);\r\n    }\r\n    entries() {\r\n        const this$ = this;\r\n        return map((p) => [p[0], p[1]], this$);\r\n    }\r\n    get(k) {\r\n        const this$ = this;\r\n        return Dictionary__get_Item_2B595(this$, k);\r\n    }\r\n    has(k) {\r\n        const this$ = this;\r\n        return Dictionary__ContainsKey_2B595(this$, k);\r\n    }\r\n    keys() {\r\n        const this$ = this;\r\n        return map((p) => p[0], this$);\r\n    }\r\n    set(k, v) {\r\n        const this$ = this;\r\n        Dictionary__set_Item_5BDDA1(this$, k, v);\r\n        return this$;\r\n    }\r\n    values() {\r\n        const this$ = this;\r\n        return map((p) => p[1], this$);\r\n    }\r\n    forEach(f, thisArg) {\r\n        const this$ = this;\r\n        iterate((p) => {\r\n            f(p[1], p[0], this$);\r\n        }, this$);\r\n    }\r\n}\r\n\r\nexport function Dictionary$reflection(gen0, gen1) {\r\n    return class_type(\"Fable.Collections.Dictionary\", [gen0, gen1], Dictionary);\r\n}\r\n\r\nexport function Dictionary_$ctor_6623D9B3(pairs, comparer) {\r\n    return new Dictionary(pairs, comparer);\r\n}\r\n\r\nfunction Dictionary__TryFindIndex_2B595(this$, k) {\r\n    const h = this$.comparer.GetHashCode(k) | 0;\r\n    let matchValue;\r\n    let outArg = null;\r\n    matchValue = [tryGetValue(this$.hashMap, h, new FSharpRef(() => outArg, (v) => {\r\n        outArg = v;\r\n    })), outArg];\r\n    if (matchValue[0]) {\r\n        return [true, h, matchValue[1].findIndex((pair) => this$.comparer.Equals(k, pair[0]))];\r\n    }\r\n    else {\r\n        return [false, h, -1];\r\n    }\r\n}\r\n\r\nexport function Dictionary__TryFind_2B595(this$, k) {\r\n    const matchValue = Dictionary__TryFindIndex_2B595(this$, k);\r\n    let pattern_matching_result;\r\n    if (matchValue[0]) {\r\n        if (matchValue[2] > -1) {\r\n            pattern_matching_result = 0;\r\n        }\r\n        else {\r\n            pattern_matching_result = 1;\r\n        }\r\n    }\r\n    else {\r\n        pattern_matching_result = 1;\r\n    }\r\n    switch (pattern_matching_result) {\r\n        case 0: {\r\n            return getItemFromDict(this$.hashMap, matchValue[1])[matchValue[2]];\r\n        }\r\n        case 1: {\r\n            return void 0;\r\n        }\r\n    }\r\n}\r\n\r\nexport function Dictionary__get_Comparer(this$) {\r\n    return this$.comparer;\r\n}\r\n\r\nexport function Dictionary__Clear(this$) {\r\n    this$.hashMap.clear();\r\n}\r\n\r\nexport function Dictionary__get_Count(this$) {\r\n    let count = 0;\r\n    let enumerator = getEnumerator(this$.hashMap.values());\r\n    try {\r\n        while (enumerator[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n            const pairs = enumerator[\"System.Collections.Generic.IEnumerator`1.get_Current\"]();\r\n            count = ((count + pairs.length) | 0);\r\n        }\r\n    }\r\n    finally {\r\n        enumerator.Dispose();\r\n    }\r\n    return count | 0;\r\n}\r\n\r\nexport function Dictionary__get_Item_2B595(this$, k) {\r\n    const matchValue = Dictionary__TryFind_2B595(this$, k);\r\n    if (matchValue != null) {\r\n        return matchValue[1];\r\n    }\r\n    else {\r\n        throw (new Error(\"The item was not found in collection\"));\r\n    }\r\n}\r\n\r\nexport function Dictionary__set_Item_5BDDA1(this$, k, v) {\r\n    const matchValue = Dictionary__TryFindIndex_2B595(this$, k);\r\n    let pattern_matching_result;\r\n    if (matchValue[0]) {\r\n        if (matchValue[2] > -1) {\r\n            pattern_matching_result = 0;\r\n        }\r\n        else {\r\n            pattern_matching_result = 1;\r\n        }\r\n    }\r\n    else {\r\n        pattern_matching_result = 1;\r\n    }\r\n    switch (pattern_matching_result) {\r\n        case 0: {\r\n            getItemFromDict(this$.hashMap, matchValue[1])[matchValue[2]] = [k, v];\r\n            break;\r\n        }\r\n        case 1: {\r\n            if (matchValue[0]) {\r\n                const value = void (getItemFromDict(this$.hashMap, matchValue[1]).push([k, v]));\r\n            }\r\n            else {\r\n                this$.hashMap.set(matchValue[1], [[k, v]]);\r\n            }\r\n            break;\r\n        }\r\n    }\r\n}\r\n\r\nexport function Dictionary__Add_5BDDA1(this$, k, v) {\r\n    const matchValue = Dictionary__TryFindIndex_2B595(this$, k);\r\n    let pattern_matching_result;\r\n    if (matchValue[0]) {\r\n        if (matchValue[2] > -1) {\r\n            pattern_matching_result = 0;\r\n        }\r\n        else {\r\n            pattern_matching_result = 1;\r\n        }\r\n    }\r\n    else {\r\n        pattern_matching_result = 1;\r\n    }\r\n    switch (pattern_matching_result) {\r\n        case 0: {\r\n            const msg = format(\"An item with the same key has already been added. Key: {0}\", k);\r\n            throw (new Error(msg));\r\n            break;\r\n        }\r\n        case 1: {\r\n            if (matchValue[0]) {\r\n                const value = void (getItemFromDict(this$.hashMap, matchValue[1]).push([k, v]));\r\n            }\r\n            else {\r\n                this$.hashMap.set(matchValue[1], [[k, v]]);\r\n            }\r\n            break;\r\n        }\r\n    }\r\n}\r\n\r\nexport function Dictionary__ContainsKey_2B595(this$, k) {\r\n    const matchValue = Dictionary__TryFindIndex_2B595(this$, k);\r\n    let pattern_matching_result;\r\n    if (matchValue[0]) {\r\n        if (matchValue[2] > -1) {\r\n            pattern_matching_result = 0;\r\n        }\r\n        else {\r\n            pattern_matching_result = 1;\r\n        }\r\n    }\r\n    else {\r\n        pattern_matching_result = 1;\r\n    }\r\n    switch (pattern_matching_result) {\r\n        case 0: {\r\n            return true;\r\n        }\r\n        case 1: {\r\n            return false;\r\n        }\r\n    }\r\n}\r\n\r\nexport function Dictionary__Remove_2B595(this$, k) {\r\n    const matchValue = Dictionary__TryFindIndex_2B595(this$, k);\r\n    let pattern_matching_result;\r\n    if (matchValue[0]) {\r\n        if (matchValue[2] > -1) {\r\n            pattern_matching_result = 0;\r\n        }\r\n        else {\r\n            pattern_matching_result = 1;\r\n        }\r\n    }\r\n    else {\r\n        pattern_matching_result = 1;\r\n    }\r\n    switch (pattern_matching_result) {\r\n        case 0: {\r\n            getItemFromDict(this$.hashMap, matchValue[1]).splice(matchValue[2], 1);\r\n            return true;\r\n        }\r\n        case 1: {\r\n            return false;\r\n        }\r\n    }\r\n}\r\n\r\n","import { toList, toArray, map, filter, delay } from \"./Seq.js\";\r\nimport { HashSet } from \"./MutableSet.js\";\r\nimport { addToDict, getItemFromDict, tryGetValue, addToSet } from \"./MapUtil.js\";\r\nimport { Dictionary } from \"./MutableMap.js\";\r\nimport { getEnumerator } from \"./Util.js\";\r\nimport { FSharpRef } from \"./Types.js\";\r\n\r\nexport function distinct(xs, comparer) {\r\n    return delay(() => {\r\n        const hashSet = new HashSet([], comparer);\r\n        return filter((x) => addToSet(x, hashSet), xs);\r\n    });\r\n}\r\n\r\nexport function distinctBy(projection, xs, comparer) {\r\n    return delay(() => {\r\n        const hashSet = new HashSet([], comparer);\r\n        return filter((x) => addToSet(projection(x), hashSet), xs);\r\n    });\r\n}\r\n\r\nexport function except(itemsToExclude, xs, comparer) {\r\n    return delay(() => {\r\n        const hashSet = new HashSet(itemsToExclude, comparer);\r\n        return filter((x) => addToSet(x, hashSet), xs);\r\n    });\r\n}\r\n\r\nexport function countBy(projection, xs, comparer) {\r\n    return delay(() => {\r\n        const dict = new Dictionary([], comparer);\r\n        const keys = [];\r\n        const enumerator = getEnumerator(xs);\r\n        try {\r\n            while (enumerator[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n                const key = projection(enumerator[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\r\n                let matchValue;\r\n                let outArg = 0;\r\n                matchValue = [tryGetValue(dict, key, new FSharpRef(() => outArg, (v) => {\r\n                    outArg = (v | 0);\r\n                })), outArg];\r\n                if (matchValue[0]) {\r\n                    dict.set(key, matchValue[1] + 1);\r\n                }\r\n                else {\r\n                    dict.set(key, 1);\r\n                    void (keys.push(key));\r\n                }\r\n            }\r\n        }\r\n        finally {\r\n            enumerator.Dispose();\r\n        }\r\n        return map((key_1) => [key_1, getItemFromDict(dict, key_1)], keys);\r\n    });\r\n}\r\n\r\nexport function groupBy(projection, xs, comparer) {\r\n    return delay(() => {\r\n        const dict = new Dictionary([], comparer);\r\n        const keys = [];\r\n        const enumerator = getEnumerator(xs);\r\n        try {\r\n            while (enumerator[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n                const x = enumerator[\"System.Collections.Generic.IEnumerator`1.get_Current\"]();\r\n                const key = projection(x);\r\n                let matchValue;\r\n                let outArg = null;\r\n                matchValue = [tryGetValue(dict, key, new FSharpRef(() => outArg, (v) => {\r\n                    outArg = v;\r\n                })), outArg];\r\n                if (matchValue[0]) {\r\n                    void (matchValue[1].push(x));\r\n                }\r\n                else {\r\n                    addToDict(dict, key, [x]);\r\n                    void (keys.push(key));\r\n                }\r\n            }\r\n        }\r\n        finally {\r\n            enumerator.Dispose();\r\n        }\r\n        return map((key_1) => [key_1, getItemFromDict(dict, key_1)], keys);\r\n    });\r\n}\r\n\r\nexport function Array_distinct(xs, comparer) {\r\n    return toArray(distinct(xs, comparer));\r\n}\r\n\r\nexport function Array_distinctBy(projection, xs, comparer) {\r\n    return toArray(distinctBy(projection, xs, comparer));\r\n}\r\n\r\nexport function Array_except(itemsToExclude, xs, comparer) {\r\n    return toArray(except(itemsToExclude, xs, comparer));\r\n}\r\n\r\nexport function Array_countBy(projection, xs, comparer) {\r\n    return toArray(countBy(projection, xs, comparer));\r\n}\r\n\r\nexport function Array_groupBy(projection, xs, comparer) {\r\n    return toArray(map((tupledArg) => [tupledArg[0], toArray(tupledArg[1])], groupBy(projection, xs, comparer)));\r\n}\r\n\r\nexport function List_distinct(xs, comparer) {\r\n    return toList(distinct(xs, comparer));\r\n}\r\n\r\nexport function List_distinctBy(projection, xs, comparer) {\r\n    return toList(distinctBy(projection, xs, comparer));\r\n}\r\n\r\nexport function List_except(itemsToExclude, xs, comparer) {\r\n    return toList(except(itemsToExclude, xs, comparer));\r\n}\r\n\r\nexport function List_countBy(projection, xs, comparer) {\r\n    return toList(countBy(projection, xs, comparer));\r\n}\r\n\r\nexport function List_groupBy(projection, xs, comparer) {\r\n    return toList(map((tupledArg) => [tupledArg[0], toList(tupledArg[1])], groupBy(projection, xs, comparer)));\r\n}\r\n\r\n","module Components.Bazaar\r\n\r\nopen Components.SharedComponents\r\nopen Fable.React\r\nopen Fable.React.Props\r\nopen CodeHelpers.FableHelpers\r\nopen AppDomain.SalesReference\r\nopen Shared\r\nopen Shared.Helpers\r\nopen Elmish\r\n\r\ntype BazaarMode = Buy | Sell\r\nmodule Internal =\r\n    type RateDisplayProps = {\r\n        Mode: BazaarMode\r\n        Values: {| name:string;value:float option;i:int;div:int option;isBazaar:bool|} list\r\n    }\r\n\r\n    let RateDisplay (props) =\r\n        if props.Values |> Seq.exists(fun _ -> true) then\r\n            div [Class \"bd-outline\"] [\r\n                table [Class \"table\"] [\r\n                    thead [] [\r\n                        tr [] [\r\n                            th [] [unbox \"Name\"]\r\n                            th [] [unbox <| string props.Mode]\r\n                            if props.Values |> Seq.exists(fun x -> not x.isBazaar) then\r\n                                yield! (\r\n                                    props.Values\r\n                                    |> Seq.filter(fun x -> x.isBazaar)\r\n                                    |> Seq.map(fun v ->\r\n                                        th [] [ unbox <| sprintf \"%A with %s\" props.Mode v.name]\r\n                                    )\r\n\r\n                                )\r\n                        ]\r\n                    ]\r\n                    tbody [](\r\n                        let bazaarCount = props.Values |> Seq.filter(fun x -> x.isBazaar) |> Seq.length\r\n                        let sortedValues =\r\n                            props.Values\r\n                            |> List.sortByDescending(fun x ->\r\n                                if props.Mode <> BazaarMode.Buy then\r\n                                    x.value\r\n                                else\r\n                                    x.value |> Option.map ((*) -1.))\r\n\r\n                        sortedValues\r\n                        |> Seq.mapi (fun i x ->\r\n                            tr [Key x.name] [\r\n                                td [] [unbox x.name]\r\n                                td [] [\r\n                                    match props.Mode, x.value, x.div with\r\n                                    | BazaarMode.Sell, Some v, Some d when d > 0 ->\r\n                                        let value = v / float d\r\n                                        let formatted = formatNumber (Some 2) value\r\n                                        yield unbox <| formatted\r\n                                    | _ -> ()\r\n                                ]\r\n                                if not x.isBazaar then\r\n                                    yield! (\r\n                                        props.Values\r\n                                        |> List.filter(fun v -> v.isBazaar)\r\n                                        |> List.map(fun v ->\r\n                                            match x.div, v.div with\r\n                                            | Some xdiv, Some vdiv ->\r\n\r\n                                                match v.value with\r\n                                                |  None -> td [] []\r\n                                                | Some value ->\r\n                                                    let effCount = float xdiv / float vdiv\r\n                                                    let sCount = formatNumber (Some 0) effCount |> string\r\n                                                    let effCost = effCount * float value\r\n                                                    let sValue = formatNumber (Some 0) effCost |> sprintf \"$%s\"\r\n                                                    td [ HTMLAttr.Title sCount] [unbox sValue]\r\n                                            | _ -> td [] []\r\n                                        )\r\n                                    )\r\n                            ]\r\n                        )\r\n                    )\r\n                ]\r\n            ]\r\n        else div [] []\r\n\r\n    let BazaarTable (props:{| preHeaders:string list; addedHeaders:string list|}, children) =\r\n        let h = props.preHeaders @ [\"Label\";\"Value\";\"Divisor\";\"Vendor\"] @ props.addedHeaders\r\n        Table {|headers=h; children=children|}\r\n\r\n    module Preconfigured =\r\n        type Model = {\r\n            Selected:string\r\n            Category:Category option\r\n            Values:Map<string,float>\r\n        } with\r\n            static member Create model : Model = model\r\n\r\n        type Props = {\r\n            Mode:BazaarMode\r\n        }\r\n\r\n        type Msg =\r\n            | CategoryChange of Category option\r\n            | ItemChange of string\r\n            | ValueChange of string * float option\r\n\r\n        let init overrideOpt =\r\n            match overrideOpt with\r\n            | None ->\r\n                {\r\n                    Category= None\r\n                    Selected= \"Ice\"\r\n                    Values= Map.empty\r\n                }\r\n            | Some x -> x\r\n\r\n        let update msg (model:Model) =\r\n            match msg with\r\n            | Msg.CategoryChange c ->\r\n                let next = {model with Category = c}\r\n                printfn \"Category changed? %A\" next\r\n                next,Cmd.none\r\n            | Msg.ItemChange x ->\r\n                {model with Selected = x}, Cmd.none\r\n            | ValueChange (n,v) ->\r\n                printfn \"Adding or removing value %s: %A\" n v\r\n                let next =\r\n                        {model with Values =\r\n                                    match v with\r\n                                    | Some v ->\r\n                                        model.Values |> Map.add n v\r\n                                    | None ->\r\n                                        model.Values |> Map.remove n\r\n                        }\r\n                printfn \"Values next: %A\" next.Values\r\n                next, Cmd.none\r\n\r\n        let view (props:Props) model dispatch =\r\n            let forms =\r\n                preconfigurations\r\n                |> List.tryFind(fun x -> x.Name = model.Selected)\r\n                |> Option.map(fun x -> x.Forms)\r\n                |> Option.defaultValue List.empty\r\n            // the idea was to store items as base name . form name, but storage wasn't updated\r\n            // also not sure what the justification was\r\n            let getKeyValue lbl =\r\n                let vk = lbl\r\n                let result = model.Values |> Map.tryFind vk\r\n                printfn \"getKeyValue from %i keys for %s(%s) -> %A\" model.Values.Count lbl vk result\r\n                result\r\n\r\n            let formTypes = preconfigurations |> Seq.map(fun x -> x.Category) |> Seq.distinct\r\n            let items =\r\n                model.Category\r\n                |> function\r\n                    |Some cat ->\r\n                        preconfigurations\r\n                        |> List.filter(fun x -> x.Category = cat)\r\n                    |None ->\r\n                        preconfigurations |> List.sortBy(fun x -> x.Name)\r\n            let onCategoryChange =\r\n                getTargetValue (\"categorySelect\")\r\n                >> Option.iter(\r\n                        Category.FromString\r\n                        >> CategoryChange\r\n                        >> dispatch\r\n                    )\r\n            div [] [\r\n                select [    Class \"select\"\r\n                            Value (\r\n                                match model.Category with\r\n                                | None -> \"\"\r\n                                | Some cat -> string cat\r\n                            )\r\n                            OnChange onCategoryChange\r\n                ] [\r\n                    yield option [Value \"\"] [unbox \"Filter...\"]\r\n                    yield! formTypes |> Seq.map(string >> fun x -> option [Key x; Value x] [unbox x])\r\n                ]\r\n\r\n                select [\r\n                    Class \"select\"\r\n                    Value model.Selected\r\n                    OnChange (getTargetValue(\"Preconfigured.item.selected\") >> Option.defaultValue \"\" >> Msg.ItemChange>>dispatch)\r\n                    ] [\r\n                        yield option [Value \"\"] [unbox \"Item\"]\r\n                        yield! items |> Seq.map(fun pre -> option [Key pre.Name;Value pre.Name] [unbox pre.Name])\r\n                ]\r\n                div [] [\r\n                    unbox model.Selected\r\n                    BazaarTable ({| preHeaders=List.empty;addedHeaders=List.empty |},\r\n                        (\r\n                            forms |> List.map(fun form ->\r\n                                tr [Key form.Label;Class \"tr\"] [\r\n                                    td [\r\n                                        Title (Option.defaultValue null form.Asterisk)\r\n                                        Class (form.Asterisk |> Option.map(fun _ -> \"star\") |> Option.defaultValue null |> (+) \"td \")\r\n                                        ] [\r\n                                            unbox form.Label\r\n                                    ]\r\n                                    td [] [\r\n                                        NumberInput {\r\n                                            Name= form.Label\r\n                                            Value= getKeyValue form.Label\r\n                                            OnChange=(fun nv -> Msg.ValueChange(nv.Name,nv.Value) |> dispatch)\r\n                                            Placeholder= None\r\n                                        }\r\n                                    ]\r\n                                    td [] [\r\n                                        match form.Div with\r\n                                        | Some x -> yield unbox x\r\n                                        | None -> ()\r\n                                    ]\r\n                                    td [] [\r\n                                        match form.Vend with\r\n                                        | Some x -> yield unbox x\r\n                                        | None -> ()\r\n                                    ]\r\n                                ]\r\n                            )\r\n                        )\r\n                    )\r\n                ]\r\n                RateDisplay {   Mode= props.Mode\r\n                                Values=\r\n                                    forms\r\n                                    |> List.mapi(fun i form ->\r\n                                        let kv = getKeyValue(form.Label)\r\n                                        {| name=form.Label;value=kv;div=form.Div; isBazaar= form.IsBazaar; i = i |})\r\n\r\n\r\n                }\r\n                hr []\r\n                Diagnostic DiagnosticMode.Shown model\r\n            ]\r\n\r\nlet merchants =\r\n    div [](\r\n        referenceValues\r\n        |> List.map(fun r ->\r\n            div [] [\r\n                unbox r.Name\r\n                ul [Class \"list ul bd-outline\"](\r\n                    r.Values\r\n                    |> List.map(fun x ->\r\n                        li [Class \"list-item\"] [unbox (sprintf \"%s - %.1f\" x.Name x.Value)]\r\n                    )\r\n                )\r\n            ]\r\n        )\r\n    )\r\n\r\n[<RequireQualifiedAccess>]\r\ntype Submenu = | Preconfigured | Custom | Merchants\r\n\r\nopen Internal\r\nopen SharedComponents.TabLink\r\n\r\ntype Model = {\r\n        Submenu:Submenu\r\n        Mode: BazaarMode\r\n        Preconfigured:Preconfigured.Model\r\n        // TODO:\r\n        // CustomState:CustomState\r\n} with\r\n    // might work: work around for having to open a namespace to create a model, but each namespace defines a model\r\n    static member Create model : Model =\r\n        model\r\n\r\ntype Msg =\r\n    | ModeChange\r\n    | SubmenuChange of Submenu\r\n    | PreconfiguredMsg of Preconfigured.Msg\r\n\r\nlet init overrideOpt : Model * Cmd<Msg> =\r\n    match overrideOpt with\r\n    | None ->\r\n        {\r\n            Submenu= Submenu.Preconfigured\r\n            Mode= Sell\r\n            Preconfigured= Preconfigured.init None\r\n        }, Cmd.none\r\n    | Some x ->\r\n        x, Cmd.none\r\n\r\nlet update msg (model:Model) : Model * Cmd<Msg> =\r\n\r\n    match msg with\r\n    | ModeChange ->\r\n        { model with Mode = match model.Mode with | Sell -> Buy | Buy -> Sell} , Cmd.none\r\n    | SubmenuChange sm ->\r\n        {model with Submenu = sm}, Cmd.none\r\n    | PreconfiguredMsg msg ->\r\n        printfn \"Bazaar.update.PreconfiguredMsg %A\" msg\r\n        let cm,cmd =\r\n            Preconfigured.update msg model.Preconfigured\r\n        {model with Preconfigured = cm}, cmd |> Cmd.map PreconfiguredMsg\r\n\r\nlet view (props:ThemeProps) (model : Model) (dispatch : Msg -> unit) =\r\n    let result =\r\n        let tab =\r\n            try\r\n                match model.Submenu with\r\n                | Submenu.Preconfigured ->\r\n                    let cm = model.Preconfigured\r\n                    Internal.Preconfigured.view {Mode=model.Mode} cm (Msg.PreconfiguredMsg >> dispatch)\r\n                | Submenu.Merchants -> merchants\r\n                | Submenu.Custom -> div [] [unbox \"Custom is not implemented\"]\r\n            with ex ->\r\n                eprintfn \"%A\" ex.StackTrace\r\n                pre [] [\r\n                    unbox (sprintf \"Failed to render tab: %s\" ex.Message)\r\n                ]\r\n\r\n        div [] [\r\n            select [Value model.Mode;OnChange (fun _ -> ModeChange |> dispatch)](\r\n                [Buy;Sell] |> List.map(string >> fun n -> option [Key n] [unbox n])\r\n            )\r\n            unbox (string model.Mode)\r\n            TabContainer (Option.ofValueString props.Theme) None (\r\n                [Submenu.Preconfigured;Submenu.Merchants] |> List.map(fun sm ->\r\n                    TabTextLink (string sm) (string model.Submenu|> Some) (fun _ -> Msg.SubmenuChange sm |> dispatch)\r\n                )\r\n            )\r\n            div [Class props.Theme] [\r\n                tab\r\n            ]\r\n            Diagnostic Shown model\r\n\r\n        ]\r\n    result\r\n\r\n","module AppDomain.BrewingReference\r\n\r\nopen Shared.Helpers\r\n\r\ntype PotionLevel = {Source:string;Lvl:int}\r\n\r\ntype Potion = {\r\n  Name: string\r\n  IsVanilla: bool\r\n  Bases: string list\r\n  IsDebuff: bool\r\n  Levels: PotionLevel list\r\n}\r\n\r\n// type so we can use optional and named params\r\ntype private BrewHelpers =\r\n    static member PotPh (name,isVanilla,lvl1source:string,?isDebuff:bool,?bases:string list): Potion =\r\n      {\r\n        Name= name\r\n        IsVanilla= isVanilla\r\n        IsDebuff= isDebuff |> Option.defaultValue false\r\n        Bases= bases |> Option.defaultValue [\"Awkward\"]\r\n        Levels= [{Source=lvl1source; Lvl=1}]\r\n      }\r\n\r\nlet potions : Potion list = [\r\n  { Name=\"Speed\"; IsVanilla=true; IsDebuff=false\r\n    Bases=[\r\n      \"Awkward\"\r\n      \"Cheap Coffee\"\r\n      \"Decent Coffee\"\r\n    ]\r\n    Levels=[\r\n      {Source=\"sugar\";Lvl=1}\r\n      {Source=\"esugar\"; Lvl=3}\r\n      {Source=\"eSugarcane\"; Lvl=5}\r\n    ]\r\n  }\r\n  {\r\n    Name=\"Jump Boost\"; IsVanilla=true; IsDebuff=false\r\n    Bases=[\r\n\r\n    ]\r\n    Levels=[\r\n      {Source=\"Rabbit\\\"s Foot\";Lvl=1}\r\n    ]\r\n  }\r\n  {\r\n    Name=\"Healing\"; IsVanilla= true;IsDebuff=false\r\n    Bases=[]\r\n    Levels=[\r\n      {Source=\"Glistering Melon\";Lvl=1}\r\n      {Source=\"Encahnted Melon\"; Lvl=3}\r\n      {Source=\"Encahnted Glistering Melon\"; Lvl=5}\r\n    ]\r\n    }\r\n  BrewHelpers.PotPh(\"Poison\", true,\"Spider Eye\",true)\r\n  { Name=\"Water Breathing\"; IsVanilla= true;IsDebuff=false\r\n    Bases=[]\r\n    Levels=[\r\n      {Source=\"Pufferfish\";Lvl=1}\r\n      {Source=\"Enchanted Pufferfish\";Lvl=3}]\r\n  }\r\n  BrewHelpers.PotPh(\"Fire Resistance\", true,\"Magma Cream\",false)\r\n  BrewHelpers.PotPh(\"Night Vision\", true,\"Golden Carrot\",false)\r\n  { Name=\"Strength\"; IsVanilla= true;IsDebuff=false\r\n    Bases=[]\r\n    Levels=[\r\n      {Source=\"Blazing Powder\";Lvl=1}\r\n      {Source=\"Enchanted Blazing Powder\";Lvl=3}\r\n      {Source=\"Enchanted Blazing Rod\";Lvl=5}\r\n    ]}\r\n  BrewHelpers.PotPh(\"Invisibility\", true,\"Fermented Spider Eye\",false,[\"Night Vision\"])\r\n  { Name=\"Regeneration\"; IsVanilla= true; IsDebuff=false\r\n    Bases=[]\r\n    Levels=[\r\n        {Source=\"Ghast Tear\";Lvl=1}\r\n        {Source=\"Enchanted Ghast Tear\";Lvl=5}\r\n  ]}\r\n  { Name=\"Weakness\"; IsVanilla= true; IsDebuff=true\r\n    Bases=[]\r\n    Levels=[\r\n      {Source=\"Fermented Spider Eye\";Lvl=1}\r\n      {Source=\"Enchanted Spider Eye\"; Lvl=3}\r\n      {Source=\"Enchanted Fermented Spider Eye\";Lvl=5}\r\n    ]\r\n  }\r\n  BrewHelpers.PotPh(\"Slowness\", true,\"Fermented Spider Eye\",true,[\"Speed\"])\r\n  BrewHelpers.PotPh(\"Damage\", true,\"Fermented Spider Eye\",true,[\"Health\"])\r\n  // start nonVanilla\r\n  BrewHelpers.PotPh(\"Haste\", false,\"Coal\")\r\n  { Name=\"Rabbit\";IsVanilla= false; IsDebuff=false\r\n    Bases=[]\r\n    Levels=[\r\n      {Source=\"Raw Rabbit\";Lvl=1}\r\n      {Source=\"Enchanted Rabbit\\\"s Foot\";Lvl=3}\r\n    ]\r\n  }\r\n  BrewHelpers.PotPh(\"Burning\", false,\"Red Sand\",true)\r\n  BrewHelpers.PotPh(\"Knockback\", false,\"Slimeball\")\r\n  BrewHelpers.PotPh(\"Venomous\", false,\"Poisonous Potato\",true)\r\n  BrewHelpers.PotPh(\"Stun\", false,\"Obsidian\")\r\n  BrewHelpers.PotPh(\"Archery\", false,\"Feather\")\r\n  { Name=\"Absorption\"; IsVanilla= false; IsDebuff= false\r\n    Bases=[]\r\n    Levels=[\r\n      {Source=\"Gold Ingot\";Lvl=1}\r\n      {Source=\"Enchanted Gold\"; Lvl=3}\r\n      {Source=\"Enchanted Gold Block\";Lvl=5}\r\n    ]\r\n  }\r\n  { Name=\"Adrenaline\"; IsVanilla= false; IsDebuff= false\r\n    Bases=[]\r\n    Levels=[\r\n      {Source=\"Cocoa Beans\";Lvl=1}\r\n      {Source=\"Enchanted Cocoa Beans\"; Lvl=3}\r\n      {Source=\"Enchanted Cookie\";Lvl=5}\r\n    ]\r\n  }\r\n  { Name=\"Critical\";IsVanilla=false;IsDebuff=false\r\n    Bases=[]\r\n    Levels=[{Source=\"Flint\";Lvl=1}]\r\n  }\r\n  BrewHelpers.PotPh(\"Dodge\", false,\"Raw Salmon\")\r\n  BrewHelpers.PotPh(\"Agility\", false,\"Enchanted Cake\")\r\n  BrewHelpers.PotPh(\"Wounded\", false,\"Netherrack\",true)\r\n  BrewHelpers.PotPh(\"Experience\", false,\"Lapis Lazuli\")\r\n  { Name=\"Resistance\"; IsVanilla= false; IsDebuff= false\r\n    Bases=[]\r\n    Levels=[\r\n      {Source=\"Cactus\";Lvl=1}\r\n      {Source=\"Enchanted Cactus Green\";Lvl=3}\r\n      {Source=\"Enchanted Cactus\";Lvl=5}\r\n    ]\r\n  }\r\n  { Name=\"Mana\"; IsVanilla= false; IsDebuff= false\r\n    Bases=[]\r\n    Levels=[\r\n      {Source=\"Raw Mutton\";Lvl=1}\r\n      {Source=\"Enchanted Mutton\"; Lvl=3}\r\n      {Source=\"Enchanted Cooked Mutton\";Lvl=5}\r\n    ]\r\n  }\r\n  BrewHelpers.PotPh(\"Stamina\", false,\"Foul Flesh\")\r\n  { Name=\"Blindness\"; IsVanilla= false; IsDebuff= true\r\n    Bases=[]\r\n    Levels=[\r\n      {Source=\"Ink Sack\";Lvl=1}\r\n      {Source=\"Enchanted Ink Sack\"; Lvl=3}\r\n    ]\r\n  }\r\n  BrewHelpers.PotPh(\"True Resistance\", false,\"True Essence\")\r\n]\r\ntype ModType =\r\n    | Duration\r\n    | Level\r\n    | Splash\r\n    | DurationAndLevel\r\n    with\r\n      static member All =\r\n        [\r\n          Duration\r\n          Level\r\n          Splash\r\n          DurationAndLevel\r\n        ]\r\n      static member Humanize =\r\n        function\r\n        | DurationAndLevel -> \"Duration and Level\"\r\n        | x -> string x\r\n// type SplashMod = {Mod:\"Splash\"; Value:string}\r\ntype ModValue =\r\n    | Duration of minutes:int\r\n    | Level of int\r\n    | Splash of penaltyPercent:float\r\n    | DurationAndLevel of minutes:int*level:int\r\n    with\r\n      static member GetType =\r\n        function\r\n        | Duration _ -> ModType.Duration\r\n        | Level _ -> ModType.Level\r\n        | Splash _ -> ModType.Splash\r\n        | DurationAndLevel _ -> ModType.DurationAndLevel\r\n\r\ntype PotModifier = {Mat:string;Mod:ModValue} with\r\n    member x.ModType = \r\n        match x.Mod with\r\n        | Duration _ -> ModType.Duration\r\n        | Level _ -> ModType.Level\r\n        | Splash _ -> ModType.Splash\r\n        | DurationAndLevel _ -> ModType.DurationAndLevel\r\n\r\nlet modifiers:PotModifier list = [\r\n  {Mod=Duration 8; Mat=\"Redstone\"} // duration in minutes\r\n  {Mod=Duration 16; Mat=\"Enchanted Redstone\"}\r\n  {Mod=Duration 40; Mat=\"Enchanted Redstone Block\"}\r\n//   {Mod=Duration 16; Mat=\"Enchanted Redstone Lamp\"}\r\n  {Mod=Level 1; Mat=\"Glowstone Dust\"}\r\n  {Mod=Level 2; Mat=\"Enchanted Glowstone Dust\"}\r\n  {Mod=Level 3; Mat=\"Enchanted Glowstone\"}\r\n  {Mod=DurationAndLevel(16,3); Mat=\"Enchanted Redstone Lamp\"}\r\n  {Mod=Splash 0.5; Mat=\"Gunpowder\"}\r\n  {Mod=Splash 0.0; Mat=\"Enchanted Gunpowder\"}\r\n]\r\n\r\n// let getBases = (selected:string) : string[] => \r\n//   selected != \"\" ? potions.find(p => p.name == selected).bases : distinct(potions.map(p => p.bases).flat());\r\n\r\nlet getBases = \r\n    function\r\n    | ValueString x ->\r\n        potions |> List.find(fun pot -> pot.Name = x) |> fun x -> x.Bases\r\n    | _ ->\r\n        potions\r\n        |> Seq.collect(fun x -> x.Bases)\r\n        |> Seq.distinct\r\n        |> Seq.sort\r\n        |> List.ofSeq\r\n","module Components.Brewing\r\n\r\nopen AppDomain.BrewingReference\r\nopen CodeHelpers.FableHelpers\r\nopen Components.SharedComponents\r\nopen Fable.React\r\nopen Fable.React.Props\r\nopen Fable.Core.JS\r\nopen Shared\r\nopen Shared.Helpers\r\n\r\nmodule Internal =\r\n    type TargetPotion = {\r\n        Name: string option\r\n        TBase: string option\r\n        TLvl: int option\r\n        DMod: float option\r\n        LMod: int option\r\n        Splash: string option\r\n    } with\r\n        static member Empty = {Name=None;TBase=None;TLvl=None;DMod=None;LMod=None;Splash=None}\r\n    let allBases = \r\n        ul[] (\r\n            getBases null\r\n            |> List.map(fun b ->\r\n                li [Key b][unbox b])\r\n        )\r\n    let BrewBases tpot onChange =\r\n        select [Value (tpot |> Option.map (fun t -> t.TBase)); OnChange (getTargetValue(\"BrewBases.select\") >> onChange)][\r\n            yield option[Value \"\"][unbox \"Bases...\"]\r\n            yield!\r\n                getBases (tpot |> Option.bind(fun tpot -> tpot.Name)|> Option.defaultValue null)\r\n                |> List.map(fun b ->\r\n                    option [Key b;Value b][unbox b]\r\n                )\r\n        ]\r\n\r\n    type Subtab =\r\n        |Brew\r\n        |Reference\r\n        |Modifications with\r\n            static member FromString (x:string) =\r\n                match x with\r\n                | EqualsI \"brew\" -> Some Brew\r\n                | EqualsI \"reference\" -> Some Reference\r\n                | EqualsI \"modifications\" -> Some Modifications\r\n                | _ -> None\r\n            static member All =\r\n                [\r\n                    Brew\r\n                    Reference\r\n                    Modifications\r\n                ]\r\n\r\n\r\n    let showSource tpotname =\r\n      let pot = potions |> List.find(fun x -> x.Name = tpotname)\r\n      span [](\r\n          pot.Levels\r\n          |> List.map(fun lvl ->\r\n            sprintf \"%A-%s\" lvl.Lvl lvl.Source\r\n          )\r\n          |> List.reduce(fun x y ->\r\n            x + \",\" + y\r\n          )\r\n          |> unbox\r\n      )\r\n\r\n    let reference =\r\n      div [][\r\n          pre [][\r\n            unbox <| Resolver.Serialize potions\r\n          ]\r\n      ]\r\n\r\n    type BrewProps = {\r\n      TPot:TargetPotion\r\n      ShowDebuffs:bool\r\n    }\r\n\r\n    let sorted : Potion list =\r\n        potions\r\n        |> List.sortBy(fun x -> x.Name)\r\n\r\n    let TargetSelector tpot showDebuffs f = // (props:{tpot:TargetPotion,showDebuffs:boolean, onTPotStateChange:BrewProps[\"onTPotStateChange\"]}) => (\r\n          try\r\n            console.log(\"targetselector.props.tpot\", tpot, sorted)\r\n            select [Class \"select\";Value (tpot.Name |> Option.defaultValue \"\")\r\n                    OnChange (getTargetValue(\"Brew.TargetSelector\") >> f)\r\n            ][\r\n                yield option [Value \"\"][unbox \"Potions...\"]\r\n                yield! (\r\n                    if showDebuffs then sorted else sorted |> List.filter(fun x -> x.IsDebuff |> not)\r\n                    |> List.map (fun pot ->\r\n                        option [Key pot.Name;Value pot.Name][unbox pot.Name]\r\n                    )\r\n                )\r\n            ]\r\n          with e ->\r\n            div [][\r\n                unbox <| Resolver.Serialize e\r\n            ]\r\n\r\n    [<RequireQualifiedAccess>]\r\n    type BrewChange =\r\n        | Name of string option\r\n        | Base of string option\r\n        | Lvl of string option\r\n        | DMod of string option\r\n        | LMod of string option\r\n        | SplashMod of string option\r\n\r\n    // if we are changing to or from \"Enchanted Redstone Lamp\" then the values must agree\r\n    let brew tpot showDebuffs dispatch =\r\n        let ss =\r\n                tpot.Name\r\n                |> Option.map showSource\r\n        let bselect name (unselectedTitle:string) fProp msg options =\r\n            select [Value (tpot |> fProp |> Option.defaultValue \"\")\r\n                    OnChange (getTargetValue name >> msg >> dispatch)\r\n            ][\r\n                yield option [Value \"\"][unbox unselectedTitle]\r\n                yield! options\r\n            ]\r\n        div [][\r\n            h1 [Class \"is-large\"][unbox \"Target\"]\r\n            TargetSelector tpot showDebuffs (BrewChange.Name >> dispatch)\r\n            pre [][\r\n                match ss with\r\n                | None -> ()\r\n                | Some ss ->\r\n                    yield ss\r\n            ]\r\n            h2 [Class \"h2\"][\r\n                unbox \"Base - \"\r\n                a [Class \"a\"; Href \"https://hypixel-skyblock.fandom.com/wiki/Brews\"][unbox \"wiki\"]\r\n                unbox \" - \"\r\n                a [Href \"http://www.minecraft101.net/t/potion-brewer.html\"][unbox \"automation\"]\r\n            ]\r\n            (\r\n                match tpot.Name with\r\n                | Some (ValueString _) ->\r\n                    BrewBases (Some tpot) (BrewChange.Base >> dispatch)\r\n                | _ ->\r\n                    allBases\r\n            )\r\n            bselect \"Brew.lmod\" \"LevelMods...\" (fun x -> x.LMod |> Option.map string) BrewChange.LMod (\r\n                        modifiers\r\n                        |> List.choose(\r\n                            function | {Mat=m;Mod = Level _}\r\n                                     | {Mat=m; Mod=DurationAndLevel(_)} -> Some m\r\n                                     | _ -> None\r\n                        )\r\n                        |> List.map(fun m -> option [Key m; Value m][unbox m])\r\n\r\n            )\r\n            bselect \"Brew.dmod\" \"Duration Mods...\" (fun x -> x.DMod |> Option.map (sprintf \"%.1f\")) BrewChange.DMod (\r\n                modifiers\r\n                |> List.choose(function\r\n                    | {Mat=m;Mod=Duration _}\r\n                    | {Mat=m;Mod=DurationAndLevel(_)} -> Some m \r\n                    | _ -> None)\r\n                |> List.map(fun m -> option [Key m;Value m][unbox m]\r\n                )\r\n            )\r\n            bselect \"Brew.splash\" \"Splash Mods...\" (fun x -> x.Splash) BrewChange.SplashMod (\r\n                modifiers\r\n                |> List.choose(\r\n                    function\r\n                    | {Mat=m; Mod=Splash _} -> Some m\r\n                    | _ -> None\r\n                )\r\n                |> List.map(fun m -> option [Key m;Value m][unbox m])\r\n            )\r\n        ]\r\n\r\n    let ModDisplay modifier = //(props: { mod: PotModifier[\"mod\"]; }) => {\r\n      let mods = modifiers |> List.filter(fun x -> ModValue.GetType x.Mod = modifier)\r\n      console.log(\"ModDisplay\", modifier, mods)\r\n      div [][\r\n          h3[Class\"is-size-3\"][unbox <| ModType.Humanize modifier]\r\n          Table {| headers= [\"Material\";\"Value\"]\r\n                   children=\r\n                   (\r\n                      mods\r\n                      |> List.map(fun m ->\r\n                        tr [][\r\n                            td[][unbox m.Mat]\r\n                            td[][\r\n                                match m.Mod with\r\n                                | DurationAndLevel(i,l) -> sprintf \"%i minutes - %i levels\" i l\r\n                                | Duration i -> sprintf \"%i minutes\" i\r\n                                | Level i -> sprintf \"%i levels\" i\r\n                                | Splash penalty -> sprintf \"-%0.0f%% minutes\" penalty\r\n                                |> unbox\r\n                            ]\r\n                        ]\r\n                      )\r\n                    )\r\n          |}\r\n      ]\r\n\r\n    let modifications =\r\n        let modTypes = ModType.All\r\n        div [Class \"bd-outline\"](\r\n            modTypes\r\n            |> List.map ModDisplay\r\n        )\r\n    let specialMod = \"Enchanted Redstone Lamp\"\r\n\r\nopen Internal\r\nopen Elmish\r\n\r\ntype Model = {\r\n  Subtab: Subtab\r\n  // target potion\r\n  TPot: TargetPotion\r\n  ShowDebuffs: bool\r\n}\r\n\r\ntype Msg =\r\n    | TabChange of Subtab\r\n    | BrewChangeMsg of BrewChange\r\n\r\nlet init overrideOpt : Model * Cmd<Msg> = (\r\n    overrideOpt\r\n    |> Option.defaultValue {\r\n      ShowDebuffs= false\r\n      TPot= TargetPotion.Empty\r\n      Subtab= Brew\r\n}, Cmd.none)\r\n\r\nlet update msg (model:Model) =\r\n    let lensTPot fSet =\r\n        {model with TPot = fSet model.TPot}\r\n    match msg with\r\n    | TabChange st ->\r\n        {model with Subtab = st}, Cmd.none\r\n    | BrewChangeMsg msg ->\r\n        match msg with\r\n        | BrewChange.Name x ->\r\n            lensTPot (fun prev -> {prev with Name= x}), Cmd.none\r\n        | BrewChange.Base x ->\r\n            lensTPot (fun prev -> {prev with TBase= x}), Cmd.none\r\n        | BrewChange.Lvl x ->\r\n            lensTPot (fun prev -> {prev with TLvl= x |> Option.bind tryParseInt}), Cmd.none\r\n        | BrewChange.DMod x ->\r\n            lensTPot (fun prev -> {prev with DMod= x |> Option.bind tryParseDec}), Cmd.none\r\n        | BrewChange.LMod x ->\r\n            lensTPot (fun prev -> {prev with LMod= x |> Option.bind tryParseInt}), Cmd.none\r\n        | BrewChange.SplashMod x ->\r\n            lensTPot (fun prev -> {prev with Splash= x}), Cmd.none\r\n\r\nlet view (props:ThemeProps) state (dispatch:Msg -> unit) =\r\n    let stdTabs = {|    names= Subtab.All\r\n                        active= Some state.Subtab\r\n                        map= string\r\n                        onClick= TabChange >> dispatch // props.onStateChange(copyUpdate(props.state,\"subtab\",x))\r\n    |}\r\n\r\n    let tab =\r\n        match state.Subtab with\r\n        | Brew ->\r\n            brew state.TPot state.ShowDebuffs (BrewChangeMsg >> dispatch)\r\n        | Reference -> reference\r\n        | Modifications -> modifications\r\n\r\n    div [Class props.Theme][\r\n        TabContainer (Option.ofValueString props.Theme) (Some stdTabs) Seq.empty\r\n        div [Class props.Theme][\r\n            tab\r\n        ]\r\n        Diagnostic Shown state\r\n    ]","namespace SkyblockHelper\r\n\r\nopen Shared.Helpers\r\n\r\ntype Slayer =\r\n    | Zombie\r\n    | Spider\r\n    | Wolf\r\nmodule Resources =\r\n    // assuming all that can compact have part/epart and block/eblock possibilities\r\n    type CompactableState =\r\n        | Part\r\n        | Compacted\r\n    type IronState =\r\n        | Ore\r\n        | Ingot\r\n        | Block\r\n        | Enchanted\r\n        | EnchantedBlock\r\n\r\n    type Resource =\r\n        | Wheat\r\n        | Seeds\r\n        | RawBeef\r\n        | Watermelon\r\n        | Pumpkin\r\n        | Cobblestone\r\n        | Coal\r\n        | Iron\r\n        | Gold\r\n        | Lapis\r\n        | Emerald\r\n        | Diamond\r\n        | Obsidian\r\n        | Glowstone\r\n        | Gravel\r\n        | Custom of string\r\n        with\r\n            member x.GetLabel () =\r\n                match x with\r\n                | Custom s -> s\r\n                | _ -> string x\r\n            static member IsMinionType x =\r\n                match x with \r\n                | Custom _ -> true\r\n                | Seeds -> false\r\n                | RawBeef -> true\r\n                | _ -> true\r\n\r\n            member x.GetMinion () =\r\n                match x with\r\n                | Custom s -> Some s\r\n                | Seeds -> None\r\n                | RawBeef -> Some \"Cow\"\r\n                | x -> x.GetLabel() |> Some\r\n    // let orderByCraftList customIndex =\r\n    //     List.sortBy(\r\n    //         function\r\n    //         | Custom _ -> customIndex\r\n    //         | Cobblestone -> 0\r\n    //         | Obsidian -> 1\r\n    //         | Glowstone -> 2\r\n    //         | Gravel -> 3\r\n    //     )\r\n\r\nopen Resources\r\n// open Fable.Core\r\ntype Rarity =\r\n    | Legendary\r\n    | Epic\r\n    | Rare\r\n    | Uncommon\r\n    | Common\r\n    with\r\n        static member All =\r\n            [\r\n                Legendary\r\n                Epic\r\n                Rare\r\n                Uncommon\r\n                Common\r\n            ]\r\n        static member Humanize (x:Rarity)= string x\r\n        static member Parse x =\r\n            match x with\r\n            | EqualsI (string Legendary) -> Some Legendary\r\n            | EqualsI (string Epic) -> Some Epic\r\n            | EqualsI (string Rare) -> Some Rare\r\n            | EqualsI (string Uncommon) -> Some Uncommon\r\n            | EqualsI (string Common) -> Some Common\r\n            | _ -> None\r\n\r\n\r\ntype Minion = {Resource: Resource; Level:int}\r\n\r\ntype DmgStat =\r\n    // | WeaponDmg\r\n    | CritChance\r\n    | CritDmg\r\n    | Strength\r\n    with\r\n        static member All =\r\n            [\r\n                // WeaponDmg\r\n                CritChance\r\n                CritDmg\r\n                Strength\r\n            ]\r\n\r\ntype GameStat =\r\n    | Dmg of DmgStat\r\n\r\n// module Minions =\r\n//     [<Erase>] // maybe this would work?\r\n//     type Minion =\r\n//         | Minion of Resource * level:int\r\n\r\n// open Minions\r\ntype Profile = {Minions:Minion [];CombatLevel:int;ForageLevel:int;AlchemyLevel:int} with\r\n    static member empty = {Minions=Array.empty;CombatLevel=0;ForageLevel=0;AlchemyLevel=0}\r\n    static member UpdateMinion r v model =\r\n        {model with Minions = model.Minions |> Array.map(function | {Resource=r'} as x when r' = r -> {x with Level=v} | x -> x )}\r\n\r\n","module AppDomain.Collections.Weapons\r\n\r\nopen SkyblockHelper\r\nopen Shared.Helpers\r\nopen AppDomain.Collections.Collection\r\n\r\ntype Weapon = {\r\n    Name: string\r\n    Rarity: Rarity \r\n    CraftType: CraftType option\r\n    UpgradesTo: string\r\n}\r\nmodule private Internal =\r\n\r\n    let fWeapon name rarity =\r\n        {   Name= name\r\n            Rarity= rarity\r\n            CraftType= None\r\n            UpgradesTo= null\r\n        }\r\n    let cWeapon name rarity collection =\r\n        {\r\n            Name= name\r\n            Rarity= rarity\r\n            CraftType= Some <| Collection collection\r\n            UpgradesTo= null\r\n        }\r\n\r\n    let sWeapon name rarity s slvl =\r\n        {\r\n            Name= name\r\n            Rarity= rarity\r\n            CraftType = Some (Slayer (s,slvl))\r\n            UpgradesTo= null\r\n        }\r\n\r\nopen Internal\r\n\r\nlet swords = [\r\n    fWeapon \"Yeti Sword\" Legendary\r\n    {   Name= \"Reaper Scythe\"\r\n        Rarity= Legendary\r\n        CraftType= Some <| Slayer (Zombie,7)\r\n        UpgradesTo= null\r\n    }\r\n    sWeapon \"Pooch Sword\" Legendary Wolf 6\r\n    cWeapon \"Pigman Sword\" Legendary \"Porkchop 9\"\r\n    fWeapon \"Midas Sword\" Legendary\r\n    fWeapon \"Aspect of the Dragon\" Legendary\r\n    fWeapon \"Silk-edge Sword\" Epic\r\n    {sWeapon \"Shaman Sword\" Epic Wolf 3 with UpgradesTo= \"Pooch Sword\"}\r\n    {sWeapon \"Scorpion Foil\" Epic Spider 6 with UpgradesTo= \"Thick Scorpion Foil\"}\r\n    sWeapon \"Reaper Falchion\" Epic Zombie 6\r\n    //crafted, but requires no collection\r\n    cWeapon \"Ornate Zombie Sword\" Epic null\r\n    {sWeapon \"Leaping Sword\" Epic Spider 9 with UpgradesTo= \"Silk-edge Sword\"}\r\n    cWeapon \"Ink Wand\" Epic \"Ink Sack 9\"\r\n    cWeapon \"End Stone Sword\" Epic \"End Stone 9\"\r\n    cWeapon \"Emerald Blade\" Epic \"Emerald 8\"\r\n    fWeapon \"Ember Rod\" Epic\r\n    {cWeapon \"Zombie Sword\" Rare \"Rotten Flesh 7\" with UpgradesTo= \"Ornate Zombie Sword\"}\r\n    {fWeapon \"Tactician's Sword\" Rare with UpgradesTo= \"Thick Tactician's Sword\"}\r\n    {sWeapon \"Revenant Falchion\" Rare Zombie 3 with UpgradesTo= \"Reaper Falchion\"}\r\n    sWeapon \"Recluse Fang\" Rare Spider 2\r\n    fWeapon \"Raider Axe\" Rare\r\n    cWeapon \"Golem Sword\" Rare \"Iron 8\"\r\n    cWeapon \"Frozen Scythe\" Rare \"Ice 8\"\r\n    sWeapon \"Edible Mace\" Rare Wolf 5\r\n    cWeapon \"Aspect of the End\" Rare \"Ender Pearl 8\"\r\n    cWeapon \"Silver Fang\" Uncommon \"Ghast Tear 6\"\r\n    cWeapon \"Prismarine Blade\" Uncommon \"Prismarine Shard 2\"\r\n    fWeapon \"Hunter Knife\" Uncommon\r\n    fWeapon \"Flaming Sword\" Uncommon\r\n    fWeapon \"End Sword\" Uncommon\r\n    cWeapon \"Cleaver\" Uncommon \"Gold 2\"\r\n    {cWeapon \"Undead Sword\" Common null with UpgradesTo=\"Revenant Falchion\"}\r\n    {cWeapon \"Spider Sword\" Common null with UpgradesTo=\"Recluse Fang\"}\r\n    fWeapon \"Rogue Sword\" Common\r\n    fWeapon \"Fancy Sword\" Common\r\n    {fWeapon \"Aspect of the Jerry\" Common with UpgradesTo=\"Thick Aspect of the Jerry\"}\r\n]\r\n\r\nlet bows =[\r\n    sWeapon \"Mosquito\" Legendary Spider 5\r\n    cWeapon \"Runaan's\" Legendary \"Bone 9\"\r\n    fWeapon \"End Stone\" Epic\r\n    cWeapon \"Hurricane\" Epic \"Bone 7\"\r\n    sWeapon \"Scorpion\" Epic Spider 3\r\n    cWeapon \"Slime\" Epic \"Slimeball 9\"\r\n    cWeapon \"Magma\" Epic \"Magma Cream 9\"\r\n    cWeapon \"Explosive\" Epic \"Gunpowder 9\"\r\n    cWeapon \"Ender\" Rare \"Ender Pearl 5\"\r\n    cWeapon \"Prismarine\" Uncommon \"Prismarine Shard 5 \"\r\n    cWeapon \"Savanna\" Uncommon \"Acacia 7\"\r\n    fWeapon \"Wither\" Uncommon\r\n    fWeapon \"Decent\" Uncommon\r\n]\r\n\r\ntype WeaponType = Sword | Bow with\r\n    static member All =\r\n        [\r\n            Sword\r\n            Bow\r\n        ]\r\n    static member Parse =\r\n        function\r\n        | EqualsI (string Sword) -> Some Sword\r\n        | EqualsI (string Bow) -> Some Bow\r\n        | _ -> None\r\n    static member Is x y =\r\n        match x, y with\r\n        | Sword, Sword -> true\r\n        | Bow, Bow -> true\r\n        | _ -> false\r\n\r\n","module Components.Collections.Shared\r\n\r\nopen Components.SharedComponents\r\nopen Fable.React\r\nopen Fable.React.Props\r\n\r\ntype FoldListItemProps = {\r\n    Name:string\r\n    Title:string\r\n    Folded:bool\r\n    OnToggle: bool -> unit\r\n}\r\n// let FoldTarget (props:{| isFolded:bool;children:ReactElement |}) =\r\n// let FoldMaster (props:{| title:string;isFolded:bool;onToggle:bool -> unit |}) =\r\nlet foldyListItem props children =\r\n    li [Key props.Name;  Class \"list-item\"][\r\n        div[Class \"columns\"][\r\n            div[Class \"column\"][\r\n                FoldMaster {| title=props.Title; isFolded= props.Folded; onToggle= props.OnToggle |}\r\n            ]\r\n            FoldTarget props.Folded (div [Class \"column is-a-fifth\"] children)\r\n        ]\r\n\r\n    ]\r\n","module Components.Collections.Weapons\r\n\r\nopen AppDomain.Collections.Collection\r\nopen AppDomain.Collections.Weapons\r\nopen CodeHelpers.FableHelpers\r\nopen Components.SharedComponents\r\nopen Components.Collections.Shared\r\nopen Fable.React\r\nopen Fable.React.Props\r\nopen Shared.Helpers\r\nopen SkyblockHelper\r\n\r\n// model msg init update view\r\n\r\ntype Model = {\r\n    Subtab: WeaponType\r\n    BowChecked: string list\r\n    SwordChecked: string list\r\n    BowFolded: Rarity list\r\n    SwordFolded: Rarity list\r\n}\r\n\r\ntype Msg =\r\n    | TabChange of WeaponType\r\n    | Fold of WeaponType * Rarity\r\n    | Check of WeaponType * string\r\n\r\nlet init overrideOpt =\r\n    overrideOpt\r\n    |> Option.defaultValue {\r\n            Subtab= Sword\r\n            BowChecked= List.empty\r\n            SwordChecked= List.empty\r\n            BowFolded= Rarity.All\r\n            SwordFolded= Rarity.All\r\n    }\r\n\r\nmodule private Internal =\r\n    let displayWeapon (item:Weapon) isChecked dispatch =\r\n        li [Key item.Name; Class \"list-item\"; Title item.Name ] [\r\n            div [Class \"columns\"] [\r\n                div [Class \"column\"] [\r\n                    input [Class \"checkbox\"; Type \"checkbox\"; Checked isChecked; OnChange (fun _ -> dispatch item.Name)]\r\n                    unbox item.Name\r\n                ]\r\n                div [Class \"column\"; Title \"Collection\"] [\r\n                    match item.CraftType with\r\n                    | Some(Collection null) ->\r\n                        yield span [Class \"star\";Title \"unlocked at start\"] [unbox \"craftable\"]\r\n                    | Some(Collection x) ->\r\n                        yield unbox x\r\n                    | _ -> ()\r\n                ]\r\n                div [Class \"column\"; Title \"Slayer\"] [\r\n                    match item.CraftType with\r\n                    | Some(Slayer(s,i)) ->\r\n                        yield unbox <| sprintf \"%A Slayer %i\" s i\r\n                    | _ -> ()\r\n                ]\r\n                div [Class \"column\"; Title \"Upgrades\"] [\r\n                    match item.UpgradesTo with\r\n                    | ValueString x ->\r\n                        yield unbox <| sprintf \"upgrades to %s\" x\r\n                    | _ -> ()\r\n                ]\r\n            ]\r\n\r\n        ]\r\n    let displayChecks items isChecked dispatch =\r\n        ul [Class \"is-horizontal list\"](\r\n            items |> List.map(fun x ->\r\n                displayWeapon x (isChecked |> List.contains x.Name) dispatch\r\n            )\r\n        )\r\n\r\nopen Internal\r\nopen Elmish\r\nlet update msg state =\r\n    match msg with\r\n    | Msg.Check(Sword,x) ->\r\n        {state with SwordChecked= toggleListValue state.SwordChecked x}, Cmd.none\r\n    | Msg.Check(Bow,x) ->\r\n        {state with BowChecked= toggleListValue state.BowChecked x}, Cmd.none\r\n    | Msg.Fold (Sword,r) ->\r\n        {state with SwordFolded= toggleListValue state.SwordFolded r}, Cmd.none\r\n    | Msg.Fold (Bow,r) ->\r\n        {state with BowFolded= toggleListValue state.BowFolded r}, Cmd.none\r\n    | Msg.TabChange wt ->\r\n        {state with Subtab= wt}, Cmd.none\r\n\r\nlet view props state dispatch =\r\n    let makeTab wt (items:Weapon list) folded checkedItems =\r\n        div [] [\r\n            ul [](\r\n                Rarity.All\r\n                |> List.filter(fun r -> items |> List.map (fun x -> x.Rarity) |> List.contains r)\r\n                |> List.map(fun r ->\r\n                    foldyListItem {Name= string r; Title= string r; Folded= folded |> List.contains r; OnToggle= fun _ -> Msg.Fold (wt,r) |> dispatch }(\r\n                        [displayChecks items checkedItems (fun name -> Msg.Check (wt,name) |> dispatch)]\r\n                    )\r\n                )\r\n            )\r\n        ]\r\n    let tab =\r\n        match state.Subtab with\r\n        | Sword ->\r\n            makeTab Sword swords state.SwordFolded state.SwordChecked\r\n        | Bow ->\r\n            makeTab Bow bows state.BowFolded state.BowChecked\r\n    div [] [\r\n        TabContainer None (Some {|\r\n                                names= [Sword;Bow]\r\n                                map= string\r\n                                active= Some state.Subtab\r\n                                onClick= (Msg.TabChange>>dispatch)\r\n        |}) []\r\n        tab\r\n    ]","module AppDomain.Collections.Armor\r\n\r\nopen SkyblockHelper\r\nopen Shared.Helpers\r\n\r\ntype ArmorPartType =\r\n    |Helm\r\n    |Chest\r\n    |Leg\r\n    |Boot\r\n    with\r\n        static member All =\r\n            [\r\n                Helm\r\n                Chest\r\n                Leg\r\n                Boot\r\n            ]\r\n\r\ntype ArmorPart =\r\n    | Named of name:string * ArmorPartType \r\n    | Unnamed of ArmorPartType \r\n\r\ntype ArmorSetType =\r\n    | Standard of special:string\r\n    | Special of special:string * ArmorPart list\r\n\r\ntype ArmorSet = string * Rarity option * ArmorSetType\r\n\r\nlet private stdNo name rarity: ArmorSet = name, Some rarity, Standard null\r\nlet private makeHeadless name rarity special : ArmorSet  =\r\n    name, Some rarity, Special(special,[Unnamed Chest; Unnamed Leg; Unnamed Boot])\r\n\r\n// https://hypixel-skyblock.fandom.com/wiki/Armor\r\nlet armorSets : ArmorSet list = [\r\n    stdNo \"Superior Dragon\" Legendary\r\n    stdNo \"Strong Dragon\" Legendary\r\n    stdNo \"Young Dragon\" Legendary\r\n    stdNo \"Wise Dragon\" Legendary\r\n    stdNo \"Unstable Dragon\" Legendary\r\n    stdNo \"Old Dragon\" Legendary\r\n    stdNo \"Protector Dragon\" Legendary\r\n    \"Perfect VIII-XII\",Some Legendary, Standard null\r\n    stdNo \"Diver's\" Legendary\r\n    stdNo \"Bat Person\" Legendary\r\n    makeHeadless \"Elegant Tuxedo\" Legendary \"Max Health set to 250, Deal 150% more damage\"\r\n    makeHeadless \"Fancy Tuxedo\" Legendary \"Max Health set to 150, Deal 100% more damage\"\r\n\r\n    \"Revenant\", Some Epic, Special(\"Zombie Set\",[Unnamed Chest])\r\n    \"Mastiff\", Some Epic, Standard \"Wolf Set\"\r\n    \"Tarantula\", Some Epic, Standard \"Spider Set\"\r\n    \"Perfect IV-VII\", Some Epic, Standard null\r\n    stdNo \"Ender\" Epic\r\n    stdNo \"Snow Suit\" Epic\r\n    stdNo \"Spooky\" Epic\r\n    stdNo \"Crystal\" Epic\r\n    makeHeadless \"Cheap Tuxedo\" Epic \"Max Health set to 75, Deal 50% more damage\"\r\n    stdNo \"Blaze\" Epic\r\n    stdNo \"Frozen Blaze\" Epic\r\n    stdNo \"Magma\" Epic\r\n    stdNo \"Emerald\" Epic\r\n    stdNo \"Speedster\" Epic\r\n    stdNo \"Sponge\" Epic\r\n    stdNo \"Zombie\" Epic\r\n\r\n    stdNo \"Pack\" Epic\r\n    \"Monster Raider\",None,Special(\"-35% dmg taken, +35% dmg to monsters\", [\r\n        Named(\"Skeleton's Helmet\",Helm)\r\n        Named(\"Guardian Chestplate\", Chest)\r\n        Named(\"Creeper Pants\", Leg)\r\n        Named(\"Spider's Boots\", Boot)\r\n    ])\r\n    \"Monster Hunter\",Some Rare, Special(\"-30% dmg taken, +30% dmg to monsters\", [\r\n        Named(\"Skeleton's Helmet\",Helm)\r\n        Named(\"Guardian Chestplate\", Chest)\r\n        Named(\"Creeper Pants\", Leg)\r\n        Named(\"Tarantula's Boots\", Boot)\r\n    ])\r\n    \"Perfect I-III\", Some Rare, Standard null\r\n    stdNo \"Golem\" Rare\r\n    stdNo \"Hardened Diamond\" Rare\r\n    stdNo \"Growth\" Rare\r\n    stdNo \"Miner Armor\" Rare\r\n    stdNo \"Fairy\" Rare\r\n    stdNo \"Farm\" Rare\r\n\r\n    stdNo \"Lapis\" Uncommon\r\n    stdNo \"Miner's Outfit\" Uncommon\r\n    stdNo \"Angler\" Common\r\n    stdNo \"Leaflet\" Common\r\n    stdNo \"Cactus\" Common\r\n    stdNo \"Pumpkin\" Common\r\n    stdNo \"Mushroom\" Common\r\n    stdNo \"Farm Suit\" Common\r\n\r\n]","module Components.Collections.Armor\r\n\r\nopen AppDomain.Collections.Armor\r\nopen CodeHelpers.FableHelpers\r\nopen Components.SharedComponents\r\nopen Elmish\r\nopen Fable.React\r\nopen Fable.React.Props\r\nopen SkyblockHelper\r\n\r\ntype Model = {\r\n    Checked: Map<string,ArmorPartType list>\r\n    FoldedArmor: string list\r\n    FoldedRarity: Rarity option list\r\n}\r\n\r\ntype Msg =\r\n    | FoldAll\r\n    | FoldRarity of Rarity option\r\n    | FoldArmor of setname:string\r\n    | Check of setname:string * part: ArmorPartType\r\n\r\nlet allRarities = None :: (Rarity.All |> List.map Some)\r\n\r\nlet init initOverride =\r\n    initOverride\r\n    |> Option.defaultValue {\r\n        Checked= Map.empty\r\n        FoldedRarity= allRarities\r\n        FoldedArmor= List.empty\r\n    }\r\n\r\n\r\nlet update (msg:Msg) (model:Model): Model*Cmd<Msg> =\r\n    match msg with\r\n    | FoldAll ->\r\n        {model with FoldedRarity= allRarities}, Cmd.none  //armorSets |> List.map(fun (n,_,_) -> n)}, Cmd.none\r\n    | FoldArmor n ->\r\n        {model with FoldedArmor = toggleListValue model.FoldedArmor n}, Cmd.none\r\n    | FoldRarity r ->\r\n        {model with FoldedRarity= toggleListValue model.FoldedRarity r}, Cmd.none\r\n    | Check (n,p) ->\r\n        {model with Checked= toggleMapListValue model.Checked n p }, Cmd.none\r\n\r\nmodule Internals =\r\n    let getATitle = fst\r\n    let getPartTitle =\r\n        function\r\n        | Unnamed x -> string x\r\n        | Named(name,_) -> name\r\n    let getPartType =\r\n        function\r\n        | Unnamed x -> x\r\n        | Named(_,x) -> x\r\n    let getParts =\r\n        function\r\n        | _, Standard _ -> ArmorPartType.All |> List.map Unnamed\r\n        | _, Special(_,parts) -> parts\r\n    let getRarityTitle =\r\n        function\r\n        | None -> \"Mixed\"\r\n        | Some (r:Rarity) -> string r\r\n\r\n    let displayChecks armorSet checkedParts onChange =\r\n        ul [Class \"is-horizontal list\"] (\r\n            getParts armorSet\r\n            |> List.map(fun p ->\r\n                let tit,typ = getPartTitle p, getPartType p\r\n                li [Key tit; Class \"list-item\"; Title tit][\r\n                    input [ Class \"checkbox\"; Type \"checkbox\"\r\n                            Checked (checkedParts |> List.contains typ)\r\n                            OnChange (fun _ -> onChange typ)\r\n                    ]\r\n                    unbox (string typ)\r\n                ]\r\n            )\r\n        )\r\n\r\n    let armorDisplay armor checkedParts folded onToggle onChange =\r\n        let title = getATitle armor\r\n\r\n        // li [Key title; Class \"list-item\"][\r\n        div [] [\r\n            Fulma.Columns.columns [][\r\n                Fulma.Column.column [][\r\n                    FoldMaster {| title=title; isFolded= folded; onToggle= onToggle |}\r\n                ]\r\n                FoldTarget folded (div [Class \"column is-a-fifth\"] [\r\n                    displayChecks armor checkedParts onChange\r\n                ])\r\n            ]\r\n        ]\r\n\r\nopen Internals\r\nopen Components.Collections.Shared\r\n\r\n\r\n\r\nlet view (model:Model) dispatch =\r\n    div[][\r\n        button [Class \"button\"; OnClick (fun _ -> Msg.FoldAll |> dispatch)][unbox \"Fold All\"]\r\n        ul [Class \"list\"] (\r\n            let onCheck name x = Msg.Check(name,x) |> dispatch\r\n            armorSets\r\n            |> List.groupBy(fun (_,r,_) -> r)\r\n            |> List.map(fun (r,sets) ->\r\n                let folded = model.FoldedRarity |> List.contains r\r\n                let setView =\r\n                    sets\r\n                    |> List.sortBy(fun (a,_,_) -> a)\r\n                    |> List.map(fun (a,_,t) ->\r\n                        let checkedParts = model.Checked |> Map.tryFind a |> Option.defaultValue List.empty\r\n                            // [displayChecks items checkedItems (fun name -> Msg.Check (wt,name) |> dispatch)]\r\n                        (\r\n                            let isSetFolded = model.FoldedArmor |> List.contains a\r\n                            let ad = armorDisplay (a,t) checkedParts isSetFolded (fun _ -> Msg.FoldArmor a |> dispatch) (onCheck a)\r\n                            ad\r\n                        )\r\n                    )\r\n                foldyListItem {Name= string r; Title= getRarityTitle r; Folded= folded; OnToggle= fun _ -> Msg.FoldRarity r |> dispatch }(\r\n                    setView\r\n                )\r\n            )\r\n        )\r\n    ]","module AppDomain.Damage\r\n\r\nopen AppDomain.Collections.Weapons\r\nopen Shared.Helpers\r\n\r\ntype EnemyEnchantClassification =\r\n    | Arthropod\r\n    | Cubish\r\n    | Dragon\r\n    | Ender\r\n    | Impale\r\n    | Smiteish\r\n    with\r\n        static member Parse x =\r\n            match x with\r\n            | EqualsI (string Arthropod) -> Some Arthropod\r\n            | EqualsI (string Cubish) -> Some Cubish\r\n            | EqualsI (string Dragon) -> Some Dragon\r\n            | EqualsI (string Ender) -> Some Ender\r\n            | EqualsI (string Impale) -> Some Impale\r\n            | EqualsI (string Smiteish) -> Some Smiteish\r\n            | _ -> None\r\n\r\n\r\n        static member All = [\r\n            Arthropod\r\n            Cubish\r\n            Dragon\r\n            Ender\r\n            Impale\r\n            Smiteish\r\n        ]\r\n\r\n\r\ntype Enchant =\r\n    | Aiming\r\n    | BaneOfArthropods\r\n    | Cubism\r\n    | DragonHunter\r\n    | EnderSlayer\r\n    | Execute\r\n    | Flame\r\n    | FirstStrike\r\n    | GiantKiller\r\n    | Impaling\r\n    | InfiniteQuiver\r\n    | Piercing\r\n    | Power\r\n    | Punch\r\n    | Sharpness\r\n    | Smite\r\n    | Snipe\r\n    with\r\n        static member All = [\r\n            Aiming\r\n            BaneOfArthropods\r\n            Cubism\r\n            DragonHunter\r\n            EnderSlayer\r\n            Execute\r\n            Flame\r\n            FirstStrike\r\n            GiantKiller\r\n            Impaling\r\n            InfiniteQuiver\r\n            Piercing\r\n            Power\r\n            Punch\r\n            Sharpness\r\n            Smite\r\n            Snipe\r\n        ]\r\n        static member Humanize =\r\n            function\r\n            | BaneOfArthropods -> \"Bane of Arthropods\"\r\n            | GiantKiller -> \"Giant Killer\"\r\n            | EnderSlayer -> \"Ender Slayer\"\r\n            | DragonHunter -> \"Dragon Hunter\"\r\n            | FirstStrike -> \"First Strike\"\r\n            | InfiniteQuiver -> \"Infinite Quiver\"\r\n            | x -> string x\r\n\r\nmodule Enchant =\r\n    let (|Both|SwordOnly|BowOnly|) =\r\n        function\r\n        | Aiming\r\n        | Flame\r\n        | InfiniteQuiver\r\n        | Piercing\r\n        | Power\r\n        | Punch\r\n        | Snipe\r\n             -> BowOnly\r\n        | Cubism\r\n        | DragonHunter\r\n        | Impaling\r\n            -> Both\r\n        | BaneOfArthropods\r\n        | EnderSlayer\r\n        | Execute\r\n        | FirstStrike\r\n        | GiantKiller\r\n        | Sharpness\r\n        | Smite\r\n            -> SwordOnly\r\n    let CanApplyTo wt e =\r\n        match e,wt with\r\n        | Both,_ -> true\r\n        | SwordOnly, Sword -> true\r\n        | BowOnly, Bow -> true\r\n        | _ -> false\r\n\r\n// all percent values should be converted to a decimal fraction 62.5% -> 0.625\r\n\r\nlet getCombatLevelValue = float >> (*) 0.04\r\nlet getGiantKillerRaw maxHealth mobMaxHealth gkLevel =\r\n    let hpercent:float = (mobMaxHealth - maxHealth) / maxHealth\r\n    hpercent * 0.1 * float gkLevel\r\n\r\nlet getGiantKillerBonus maxHealth mobMaxHealth gkLevel =\r\n    getGiantKillerRaw maxHealth mobMaxHealth gkLevel\r\n    |> min 0.25\r\n\r\nlet getExecuteBonus mobMaxHealth mobCurrentHealth eLevel =\r\n    let hpercent:float = (mobMaxHealth - mobCurrentHealth) / mobCurrentHealth\r\n    float eLevel * 0.02 * hpercent\r\n\r\nlet getEValue weaponType maxHealth (mobMaxHealth,mobCurrentHealth,mobtype) (enchants:Map<Enchant,int>) =\r\n    (0.0, enchants)\r\n    ||> Map.fold(fun e k v ->\r\n        match weaponType,k,mobtype with\r\n        | _, Aiming, _ -> 0.0\r\n        | _, Flame, _ -> 0.0\r\n        | _, InfiniteQuiver, _ -> 0.0\r\n        | _, Piercing, _ -> 0.0\r\n        | _, Punch, _ -> 0.0\r\n        | _, Snipe, _ -> 0.0\r\n        | Bow, Power, _ -> float v * 0.08\r\n        | _, Power, _ -> 0.0\r\n        | Sword,BaneOfArthropods,Some Arthropod -> float v * 0.08\r\n        | _, BaneOfArthropods, _ -> 0.0\r\n        | _, Cubism, Some Cubish -> float v * 0.1\r\n        | _,Cubism, _ -> 0.0\r\n        | _,DragonHunter, Some Dragon -> float v * 0.08\r\n        | _,DragonHunter, _ -> 0.0\r\n        | Sword,EnderSlayer, Some Ender -> float v * 0.12\r\n        | _,EnderSlayer, _ -> 0.0\r\n        | Sword,FirstStrike,_ -> float v * 0.25\r\n        | Bow,FirstStrike,_ -> 0.0\r\n        | Sword,Execute,_ ->\r\n            getExecuteBonus mobMaxHealth mobCurrentHealth v\r\n        | _,Execute,_ -> 0.0\r\n        | Sword,GiantKiller,_ ->\r\n            getGiantKillerBonus maxHealth mobMaxHealth v\r\n        | Bow,GiantKiller,_ -> 0.0\r\n        | _,Impaling, Some Impale -> float v * 0.125\r\n        | _,Impaling, _ -> 0.0\r\n        | Bow, Sharpness,_ -> 0.0\r\n        | Sword,Sharpness,_ -> float v * 0.05\r\n        | Sword,Smite, Some Smiteish -> float v * 0.08\r\n        | _,Smite, _ -> 0.0\r\n\r\n        |> fun v -> e + v\r\n    )\r\n\r\nlet getBasedmg (wd:float) strength = \r\n    let b = 5.0 + wd + strength / 5.0\r\n    b * (1.0 + strength / 100.0)\r\n\r\n// ring of love is weapon bonus\r\nlet getMult cl enchants wb =\r\n    1.0 + getCombatLevelValue cl + enchants + wb\r\n\r\nlet getNormalDamage (bd:float) mult armorbonus =\r\n    bd * mult * armorbonus \r\nlet getTotalCritDamage bd mult armorbonus critdmg = \r\n    bd * mult * armorbonus * (1.0 + critdmg * 0.01)\r\n\r\nlet finalweighted cc bd mult armorbonus critdmg =\r\n    let crit = getTotalCritDamage bd mult armorbonus critdmg\r\n    let noncrit = getNormalDamage bd mult armorbonus\r\n    crit * cc + (noncrit - (1.0 - cc))\r\n\r\ntype WeaponBonus = // TODO: figure out if this covers weapon bonuses\r\n    | Tarantula4thShot\r\n    | RingOfLoveProc\r\n    | MoreDmg\r\n    with\r\n        static member All =\r\n            [\r\n                Tarantula4thShot\r\n                RingOfLoveProc\r\n                MoreDmg\r\n            ]\r\n\r\n\r\n","namespace Fulma\r\n\r\nopen Fulma\r\nopen Fable.React\r\nopen Fable.React.Props\r\n\r\n[<RequireQualifiedAccess>]\r\nmodule Heading =\r\n\r\n    type Option =\r\n        /// Add `is-1` class\r\n        | [<CompiledName(\"is-1\")>]Is1\r\n        /// Add `is-2` class\r\n        | [<CompiledName(\"is-2\")>]Is2\r\n        /// Add `is-3` class\r\n        | [<CompiledName(\"is-3\")>]Is3\r\n        /// Add `is-4` class\r\n        | [<CompiledName(\"is-4\")>]Is4\r\n        /// Add `is-5` class\r\n        | [<CompiledName(\"is-5\")>]Is5\r\n        /// Add `is-6` class\r\n        | [<CompiledName(\"is-6\")>]Is6\r\n        /// Add `subtitle` class\r\n        | [<CompiledName(\"subtitle\")>]IsSubtitle\r\n        /// Add `is-spaced` class\r\n        | [<CompiledName(\"is-spaced\")>]IsSpaced\r\n        // Extra\r\n        | CustomClass of string\r\n        | Props of IHTMLProp list\r\n        | Modifiers of Modifier.IModifier list\r\n\r\n    let internal title (element : IHTMLProp list -> ReactElement list -> ReactElement) (options : Option list)\r\n        (children) =\r\n        let parseOptions (result : GenericOptions) option =\r\n            match option with\r\n            // Sizes\r\n            | Is1\r\n            | Is2\r\n            | Is3\r\n            | Is4\r\n            | Is5\r\n            | Is6\r\n            | IsSpaced -> result.AddCaseName option\r\n            // Styles\r\n            | IsSubtitle ->\r\n                result.RemoveClass(\"title\").AddClass(\"subtitle\")\r\n            // Extra\r\n            | Props props -> result.AddProps props\r\n            | CustomClass customClass -> result.AddClass customClass\r\n            | Modifiers modifiers -> result.AddModifiers modifiers\r\n\r\n        GenericOptions.Parse(options, parseOptions, baseClass=\"title\").ToReactElement(element, children)\r\n\r\n    // Alias\r\n    /// Generate <h1 class=\"title is-1\"></h1>\r\n    /// Class can be `subtitle` if you pass `Heading.IsSubtitle`\r\n    let h1 (options : Option list) = title h1 (Is1 :: options)\r\n    /// Generate <h2 class=\"title is-2\"></h2>\r\n    /// Class can be `subtitle` if you pass `Heading.IsSubtitle`\r\n    let h2 (options : Option list) = title h2 (Is2 :: options)\r\n    /// Generate <h3 class=\"title is-3\"></h3>\r\n    /// Class can be `subtitle` if you pass `Heading.IsSubtitle`\r\n    let h3 (options : Option list) = title h3 (Is3 :: options)\r\n    /// Generate <h4 class=\"title is-4\"></h4>\r\n    /// Class can be `subtitle` if you pass `Heading.IsSubtitle`\r\n    let h4 (options : Option list) = title h4 (Is4 :: options)\r\n    /// Generate <h5 class=\"title is-5\"></h5>\r\n    /// Class can be `subtitle` if you pass `Heading.IsSubtitle`\r\n    let h5 (options : Option list) = title h5 (Is5 :: options)\r\n    /// Generate <h6 class=\"title is-6\"></h6>\r\n    /// Class can be `subtitle` if you pass `Heading.IsSubtitle`\r\n    let h6 (options : Option list) = title h6 (Is6 :: options)\r\n    /// Generate <p class=\"title\"></p>\r\n    /// Class can be `subtitle` if you pass `Heading.IsSubtitle`\r\n    let p opts children = title p opts children\r\n","module AppDomain.Accessories\r\n\r\nopen SkyblockHelper\r\n\r\ntype Accessory = {\r\n    Name:string\r\n    Rarity: Rarity\r\n    Obtained: string\r\n    // StatChanges: DmgStat list\r\n\r\n    // Effect: string\r\n    // not all upgrades use the lower version for creating another in the line\r\n    UpgradedForm: Accessory option\r\n} with\r\n    static member TryFindBase name (x:Accessory list) =\r\n        let rec findBase (acc:Accessory) =\r\n            if acc.Name = name then\r\n                Some acc\r\n            else\r\n                match acc.UpgradedForm |> Option.bind findBase with\r\n                | Some _ -> Some acc\r\n                | None -> None\r\n        x\r\n        |> List.tryPick findBase\r\n\r\n    static member Unfold (x:Accessory) =\r\n        let rec getForms (x:Accessory) =\r\n            [\r\n                yield x\r\n                yield! x.UpgradedForm |> Option.map getForms |> Option.defaultValue List.empty\r\n            ]\r\n        getForms x\r\n\r\n    static member TryFindForm name (x:Accessory) =\r\n        Accessory.Unfold x\r\n        |> List.tryFind(fun acc -> acc.Name = name)\r\n\r\n    static member GetUpgradeNames (x:Accessory) =\r\n        let rec getUpgradeNames (x:Accessory) =\r\n            [\r\n                yield x.Name, x.Rarity\r\n                yield! x.UpgradedForm |> Option.map getUpgradeNames |> Option.defaultValue List.empty\r\n            ]\r\n        getUpgradeNames x\r\n\r\n\r\ntype Reforge =\r\n    | Demonic\r\n    | Forceful\r\n    | Gentle\r\n    | Godly\r\n    | Hurtful\r\n    | Keen\r\n    | Strong\r\n    | Superior\r\n    | Unpleasant\r\n    | Zealous\r\n    with \r\n        static member All =\r\n            [\r\n                Demonic\r\n                Forceful\r\n                Gentle\r\n                Godly\r\n                Hurtful\r\n                Keen\r\n                Strong\r\n                Superior\r\n                Unpleasant\r\n                Zealous\r\n            ]\r\n\r\nlet private noUpgrade name r obt =\r\n    {\r\n        Name= name\r\n        Rarity= r\r\n        Obtained= obt\r\n        UpgradedForm= None\r\n        // StatChanges= List.empty\r\n    }\r\n\r\nlet private threeChain nameBase (r1,o1) (r2,o2) (r3,o3) =\r\n    let tali,ring,arti =\r\n        sprintf \"%s Talisman\" nameBase, sprintf \"%s Ring\" nameBase, sprintf \"%s Artifact\" nameBase\r\n    let o2 = sprintf \"%s + %s\" o2 tali\r\n    let o3 = sprintf \"%s + %s\" o3 ring\r\n    {\r\n        Name= tali\r\n        Rarity= r1\r\n        Obtained= o1\r\n        UpgradedForm= Some {\r\n            Name= ring\r\n            Rarity= r2\r\n            Obtained= o2\r\n            UpgradedForm= Some <| noUpgrade arti r3 o3\r\n        }\r\n    }\r\nlet accessories = [\r\n    threeChain \"Zombie\"\r\n        (Common, \"Adventurer Merchant - 500 coins\")\r\n        (Uncommon, \"Zombie Slayer 2 - 64 Rev Flesh\")\r\n        (Rare, \"Zombie Slayer 7 - 32 E-Iron + 16 E-Diamond + 48 Rev Viscera\")\r\n    noUpgrade \"Skeleton Talisman\" Common \"Adventurer Merchant - 500 coins\"\r\n    threeChain \"Intimidation\"\r\n        (Common,  \"Adventurer Merchant - 10,000 coins\")\r\n        (Uncommon,  \"Spooky Festival - 100 Green Candy + Intimidation Talisman\")\r\n        (Rare,  \"Spooky Festival - 100 Purple Candy + Intimidation Ring\")\r\n    noUpgrade \"Scavenger Talisman\" Common \"Adventurer Merchant 10,000 coins\"\r\n    noUpgrade \"Talisman of Coins\" Common \"Emerald 2 - 20 Emerald + 5 Gold Ingot\"\r\n    noUpgrade \"Village Affinity Talisman\" Common \"Adventurer Merchant 2,500 coins\"\r\n    noUpgrade \"Mine Affinity Talisman\" Common \"Adventurer Merchant 2,500 coins\"\r\n    noUpgrade \"Farming Talisman\" Common \"Wheat 4 - 5 Hay Bale + 4 Seed\"\r\n    threeChain \"Speed\"\r\n        (Common,  \"Sugar Cane 2 - 108 Sugar Cane\")\r\n        (Uncommon, \"Sugar Cane 5 - 96 E-Sugar + Speed Talisman\")\r\n        (Rare, \"48 E-Sugar Cane + Speed Ring\")\r\n    noUpgrade \"Fire Talisman\" Common \"Blaze Rod 5 - 9 E-Blaze Powder\"\r\n    noUpgrade \"Vaccine Talisman\" Common \"Potato 3 - 9 Poisonous Potato\"\r\n    {\r\n        Name= \"Wolf Talisman\"\r\n        Rarity = Common\r\n        Obtained= \"1/200 (0.5%) drop from Old Wolves\"\r\n        UpgradedForm= Some <| noUpgrade \"Wolf Ring\" Rare \"14 E-Bone + 1 Weak Wolf Catalyst + Wolf Talisman\"\r\n    }\r\n    noUpgrade \"Night Vision Charm\" Common \"Mushroom 7 - 4 E-Brown Mushroom + 4 E-Red Mushroom\"\r\n    threeChain \"Feather\"\r\n        (Common, \"Feather 4 - 108 Feather\")\r\n        (Uncommon, \"Feather 7 - 7 E-Feather + Feather Talisman\")\r\n        (Rare, \"Feather 9 - 128 E-Feather + Feather Ring\")\r\n    threeChain \"Potion Affinity\"\r\n        (Common, \"Nether Wart 3 - 144 Nether Wart\")\r\n        (Uncommon, \"Nether Wart 7 - 8 E-Nether Wart + Potion Affinity Talisman\")\r\n        (Rare, \"Nether Wart 9 - 256 E-Nether Wart + Potion Afinity Ring\")\r\n    threeChain \"Sea Creature\"\r\n        (Common, \"Sponge 4 - 18 Sponge\")\r\n        (Uncommon, \"Sponge 6 - 2 E-Sponge + 6 Sponge\")\r\n        (Rare, \"Sponge 8 - 64 E-Sponge\")\r\n    {\r\n        Name= \"Campfire Initiate Badge\"\r\n        Rarity= Common\r\n        Obtained= \"Trial of Fire 1-4\"\r\n        UpgradedForm= Some {\r\n            Name= \"Campfire Adept Badge\"\r\n            Rarity= Uncommon\r\n            Obtained= \"Trial of Fire 5-8 + 160 Dark Oak\"\r\n            UpgradedForm= Some {\r\n                Name= \"Campfire Cultist Badge\"\r\n                Rarity= Rare\r\n                Obtained= \"Trial of Fire 9-13 + 1000 Spruce\"\r\n                UpgradedForm= Some {\r\n                    Name= \"Campfire Scion Badge\"\r\n                    Rarity= Epic\r\n                    Obtained= \"Trial of Fire 14-21 + 100 E-Acacia\"\r\n                    UpgradedForm= Some <| noUpgrade \"Campfire God Badge\" Legendary \"Trial of Fire 22-30 + 1500 E-Jungle\"\r\n                } \r\n            }\r\n        }\r\n    }\r\n    {\r\n        Name= \"Shiny Yellow Rock\"\r\n        Rarity= Common\r\n        Obtained= \"Romeo Quest - 2 Yellow Rock\"\r\n        UpgradedForm= Some {\r\n            Name= \"YellowRock of Love\"\r\n            Rarity= Common\r\n            Obtained= \"Romeo Quest - 15 Poppy\"\r\n            UpgradedForm= Some{\r\n                Name= \"Mediocre Ring of Love\"\r\n                Rarity= Uncommon\r\n                Obtained= \"Romeo Quest - 64 Emerald\"\r\n                UpgradedForm= Some {\r\n                    Name= \"Rubbish Ring of Love\"\r\n                    Rarity= Uncommon\r\n                    Obtained= \"Romeo Quest - 1 E-Red Mushroom Block\"\r\n                    UpgradedForm= Some {\r\n                        Name= \"Modes Ring of Love\"\r\n                        Rarity= Rare\r\n                        Obtained= \"Romeo Quest - 1 Rabbit VI Potion with Coffee base\"\r\n                        UpgradedForm= Some {\r\n                            Name= \"Refined Ring of Love\"\r\n                            Rarity= Rare\r\n                            Obtained= \"Romeo Quest - 1 E-Lava Bucket\"\r\n                            UpgradedForm= Some {\r\n                                Name= \"Class Ring of Love\"\r\n                                Rarity= Rare\r\n                                Obtained= \"Romeo Quest - 1292 Base Mana\"\r\n                                UpgradedForm= Some {\r\n                                    Name= \"Exquisite Ring of Love\"\r\n                                    Rarity= Epic\r\n                                    Obtained= \"Romeo Quest - Emerald Blade\"\r\n                                    UpgradedForm= Some {\r\n                                        Name=\"Invaluable Ring of Love\"\r\n                                        Rarity= Epic\r\n                                        Obtained= \"Romeo Quest - Flower Minion\"\r\n                                        UpgradedForm= Some <|noUpgrade \"Legendary Ring of Love\" Legendary \"Romeo Quest - any Tuxedo from Tailor\"\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    {\r\n        Name= \"Healing Talisman\"\r\n        Rarity= Common\r\n        Obtained= \"Lily Pad 3 - 144 Lily Pad\"\r\n        UpgradedForm= Some <| noUpgrade \"Healing Ring\" Uncommon \"Lily Pad 8 - 4 E-Lily Pad + Healing Talisman\"\r\n    }\r\n    noUpgrade \"Wood Affinity Talisman\" Uncommon \"Oak Wood 8 - 1 E-Oak + 8 Oak Leaves\"\r\n    noUpgrade \"Lava Talisman\" Uncommon \"Magma Cream 7 - 9 E-Magma Cream\"\r\n    threeChain \"Spider\"\r\n        (Uncommon, \"Spider's Den - Brood Mother\")\r\n        (Rare, \"Spider Slayer 1 - 64 Tarantula Web\")\r\n        (Epic, \"Spider Slayer 7 - 32 Tarantula Silk + 32 E-Emerald\")\r\n    noUpgrade \"Magnetic Talisman\" Uncommon \"Emerald 3 - 128 Emerald + 32 Redstone\"\r\n    noUpgrade \"Gravity Talisman\" Uncommon \"Obsidian 3 - 144 Obsidian\"\r\n    noUpgrade \"Farmer Orb\" Uncommon \"Pumpkin 6 - 8 E-Pumpkin + 1 E-Glowstone\"\r\n    {\r\n        Name=\"Broken Piggy Bank\"\r\n        Rarity=Uncommon\r\n        Obtained=\"Die with a cracked piggy bank in your inventory\"\r\n        UpgradedForm=Some {\r\n            Name=\"Cracked Piggy Bank\"\r\n            Rarity= Uncommon\r\n            Obtained=\"Die with a piggy bank in your inventory\"\r\n            UpgradedForm= Some <| noUpgrade \"Piggy Bank\" Uncommon \"Porkchop 5 - 40 E-Pork + 1 Chest\"\r\n        }\r\n    }\r\n    threeChain \"Red Claw\"\r\n        (Uncommon, \"Wolf Slayer 1 - 8 Wolf Tooth + 1 E-Bone\")\r\n        (Rare, \"Wolf Slayer 5 - 8 Golden Tooth + 32 E-Leather\")\r\n        (Epic, \"Wolf Slayer 5 - 1 Red Claw Egg + 54 Golden Tooth + 128 E-Leather\")\r\n    threeChain \"Candy\"\r\n        (Uncommon, \"Spooky Festival - 16 Green Candy\")\r\n        (Rare, \"Spooky Festival - 64 Green Candy\")\r\n        (Epic, \"Spooky Festival - 64 Purple Candy\")\r\n    {\r\n        Name=\"Hunter Talisman\"\r\n        Rarity= Uncommon\r\n        Obtained= \"Wolf Slayer 7 - 64 Golden Tooth + 32 E-Rotten Flesh\"\r\n        UpgradedForm= Some <| noUpgrade \"Hunter Ring\" Rare \"Wolf Slayer 7 - 256 Golden Tooth + 1 Grizzly Bait\"\r\n    }\r\n    noUpgrade \"New Year Cake Bag\" Uncommon \"New Year Celebration - 250,000 coins\"\r\n    noUpgrade \"Wolf Paw\" Uncommon \"Woods Race - 32 Seconds or less\"\r\n    {\r\n        Name=\"Shady Ring\"\r\n        Rarity= Uncommon\r\n        Obtained= \"Lucius Tier 1 - Buy 5 things from Dark Auction + 500,000 coins\"\r\n        UpgradedForm= Some {\r\n            Name=\"Crooked Artifact\"\r\n            Rarity= Rare\r\n            Obtained= \"Lucius Tier 2 - Buy 10 things from Dark Auction + 2,000,000 coins + Shady Ring\"\r\n            UpgradedForm= Some <| noUpgrade \"Seal of the Family\" Epic \"Lucius Tier 3 - Buy 15 things from Dark Auction + 10,000,000 coins + Crooked Artifact\"\r\n        }\r\n    }\r\n    noUpgrade \"Frozen Chicken\" Rare \"Season of Jerry - Chicken Race Stage 3\"\r\n    noUpgrade \"Haste Ring\" Rare \"Cobblestone 8 - 256 E-Cobble\"\r\n    noUpgrade \"Night Crystal\" Rare \"Quartz 7 - 4 E-Quartz + 1 E-Quartz Block\"\r\n    noUpgrade \"Day Crystal\" Rare \"Quartz 8 - 4 E-Quartz + 1 E-Quartz Block\"\r\n    noUpgrade \"Fish Affinity Talisman\" Rare \"Fishing 19 - Water Hydra\"\r\n    noUpgrade \"Bait Ring\" Rare \"Ink Sac 8 - 288 E-Ink Sac\"\r\n    threeChain \"Bat\"\r\n        (Rare, \"Bats\")\r\n        (Epic, \"Spooky Festival - 64 Green Candy\")\r\n        (Legendary, \"Spooky Festival - Purple Candy\")\r\n    noUpgrade \"Pig's Foot\" Rare \"End Race - 48 seconds or less\"\r\n    noUpgrade \"Devour Ring\" Rare \"Zombie Slayer 5 - 2 E-Raw Chicken + 4 E-Raw Salmon + 39 Rev Viscera\"\r\n    noUpgrade \"Survivor Cube\" Rare \"Reward for Spider Slayer 7\"\r\n    noUpgrade \"Tarantula Talisman\" Epic \"Spider Slayer Drop Broodfather Tier 3\"\r\n    noUpgrade \"Ender Artifact\" Epic \"Dark Auction\"\r\n    noUpgrade \"Melody's Hair\" Epic \"Melody\"\r\n    noUpgrade \"Wither Artifact\" Epic \"Dark Auction\"\r\n    noUpgrade \"Experience Artifact\" Epic \"Lapis 9 - 9 E-Lapis Block\"\r\n]","namespace Fulma\r\n\r\nopen Fulma\r\nopen Fable.React\r\nopen Fable.React.Props\r\n\r\n[<RequireQualifiedAccess>]\r\nmodule Select =\r\n\r\n    type Option =\r\n        | Size of ISize\r\n        /// Add `is-fullwidth` class\r\n        | [<CompiledName(\"is-fullwidth\")>] IsFullWidth\r\n        /// Add `is-inline` class\r\n        | [<CompiledName(\"is-inline\")>] IsInline\r\n        /// Add `is-loading` class if true\r\n        | [<CompiledName(\"is-loading\")>] IsLoading of bool\r\n        /// Add `is-focused` class if true\r\n        | [<CompiledName(\"is-focused\")>] IsFocused of bool\r\n        /// Add `is-active` class if true\r\n        | [<CompiledName(\"is-active\")>] IsActive of bool\r\n        /// Add `disabled` HTMLAttr if true\r\n        | Disabled of bool\r\n        | Color of IColor\r\n        /// Add `is-rounded` class\r\n        | [<CompiledName(\"is-rounded\")>] IsRounded\r\n        ///Add `is-multiple` class\r\n        | [<CompiledName(\"is-multiple\")>] IsMultiple\r\n        | Props of IHTMLProp list\r\n        | CustomClass of string\r\n        | Modifiers of Modifier.IModifier list\r\n\r\n    /// Generate <div class=\"select\"></div>\r\n    let select (options : Option list) children =\r\n        let parseOptions (result : GenericOptions) option =\r\n            match option with\r\n            | Size size -> ofSize size |> result.AddClass\r\n            | Color color -> ofColor color |> result.AddClass\r\n            | IsFullWidth\r\n            | IsInline\r\n            | IsMultiple\r\n            | IsRounded -> result.AddCaseName option\r\n            | IsLoading state\r\n            | IsFocused state\r\n            | IsActive state\r\n            | Disabled state -> if state then result.AddCaseName option else result\r\n            | Props props -> result.AddProps props\r\n            | CustomClass customClass -> result.AddClass customClass\r\n            | Modifiers modifiers -> result.AddModifiers modifiers\r\n\r\n        GenericOptions.Parse(options, parseOptions, \"select\").ToReactElement(div, children)\r\n","namespace Fulma\r\n\r\nopen Fulma\r\nopen Fable.React\r\nopen Fable.React.Props\r\n\r\n[<RequireQualifiedAccess>]\r\nmodule Section =\r\n\r\n    type Option =\r\n        | Props of IHTMLProp list\r\n        | CustomClass of string\r\n        /// Add `is-medium` class\r\n        | [<CompiledName(\"is-medium\")>] IsMedium\r\n        /// Add `is-large` class\r\n        | [<CompiledName(\"is-large\")>] IsLarge\r\n        | Modifiers of Modifier.IModifier list\r\n\r\n    /// Generate <section class=\"section\"></section>\r\n    let section (options: Option list) children =\r\n        let parseOptions (result : GenericOptions) option =\r\n            match option with\r\n            | IsMedium\r\n            | IsLarge -> result.AddCaseName option\r\n            | Props props -> result.AddProps props\r\n            | CustomClass customClass -> result.AddClass customClass\r\n            | Modifiers modifiers -> result.AddModifiers modifiers\r\n\r\n        GenericOptions.Parse(options, parseOptions, \"section\").ToReactElement(section, children)\r\n","module Components.Damage\r\n\r\nopen AppDomain.Damage\r\nopen Components.SharedComponents\r\nopen Elmish\r\nopen Fable.React\r\nopen Fable.React.Props\r\nopen Fulma\r\nopen AppDomain.Collections.Weapons\r\nopen Shared\r\nopen SharedComponents.TabLink\r\nopen SkyblockHelper\r\nopen CodeHelpers.FableHelpers\r\n\r\ntype DictType<'k,'v when 'k : comparison> = Map<'k,'v>\r\n\r\n[<RequireQualifiedAccess>]\r\ntype Submenu = | Custom | Accessorize\r\n\r\nlet addValues ds (maps:DictType<DmgStat,float> seq) =\r\n    maps\r\n    |> Seq.choose (Map.tryFind ds)\r\n    |> Seq.sum\r\n\r\ntype Weapon = {\r\n    Name: string\r\n    WeaponType: WeaponType\r\n    Damage: int\r\n    Stats: DictType<DmgStat,float>\r\n    Enchants: DictType<Enchant, int>\r\n}\r\n\r\nlet numberRow name value dispatch: IHTMLProp seq * _= (seq [Class \"columns\"],[\r\n                        div [Class \"column\"] [unbox name]\r\n                        Column.column [Column.Width(Screen.All, Fulma.Column.IsFourFifths)] [\r\n                            NumberInput {\r\n                                Name=name\r\n                                OnChange= (fun nv -> dispatch nv.Name nv.Value)\r\n                                Placeholder= Some name\r\n                                Value= value\r\n                            }\r\n                        ]])\r\n\r\nmodule DmgStatComponent =\r\n    type Model = DictType<DmgStat,float>\r\n    type Msg = Update of DmgStat * float\r\n\r\n    // skipping init, not really necessary to have private state here\r\n\r\n    let update msg (model:Model) =\r\n        match msg with\r\n        | Update (ds,v) ->\r\n            if v > 0.0 then\r\n                model |> Map.add ds v, Cmd.none\r\n            else\r\n                model |> Map.remove ds, Cmd.none\r\n    let view (model:Model) dispatch =\r\n        div[][\r\n            ul[](\r\n                DmgStat.All\r\n                |> Seq.map(fun ds ->\r\n                    let n = string ds\r\n                    let dsv =\r\n                        if model.ContainsKey ds then\r\n                            Some model.[ds]\r\n                        else\r\n                            None\r\n                    li <|| numberRow n dsv (fun _ v -> Update (ds,v |> Option.defaultValue 0.0) |> dispatch)\r\n                )\r\n            )\r\n        ]\r\n\r\nmodule CharacterComponent =\r\n    type Model = {\r\n        CombatLevel:int\r\n        MaxHealth: int\r\n        Stats: DictType<DmgStat,float>\r\n    }\r\n\r\n    type Msg =\r\n        | HealthChange of int\r\n        | StatChange of DmgStatComponent.Msg\r\n        | CLvlChange of int\r\n\r\n    let init = {\r\n            MaxHealth= 1000\r\n            Stats= Map[ Strength, 100.0 ]\r\n            CombatLevel= 10 }\r\n\r\n    let update msg (model:Model) =\r\n        match msg with\r\n        | HealthChange i ->\r\n            {model with MaxHealth= i}, Cmd.none\r\n        | StatChange msg ->\r\n            let next,cmd = DmgStatComponent.update msg model.Stats\r\n            {model with Stats=next}, cmd |> Cmd.map StatChange\r\n        | CLvlChange i ->\r\n            let next = {model with CombatLevel= i}\r\n            next, Cmd.none\r\n    let view (title:string) (model:Model) dispatch = \r\n        div [Class \"bd-outline\"][\r\n            Heading.h2 [] [unbox \"Character\"]\r\n            Heading.h3[Heading.IsSubtitle][\r\n                // unbox \"Your stats without a weapon, pet, or pot\"\r\n                unbox title \r\n            ]\r\n            ul [][\r\n                li <|| numberRow \"Combat Level\" (Some <| float model.CombatLevel) (\r\n                    fun _ v -> v |> Option.map int |> Option.defaultValue 0 |> CLvlChange |> dispatch)\r\n                li <|| numberRow \"Max Health\" (Some <| float model.MaxHealth) (\r\n                    fun _ v -> v |> Option.map int |> Option.defaultValue 0 |> HealthChange |> dispatch)\r\n                li [][\r\n                    DmgStatComponent.view model.Stats (StatChange>>dispatch)\r\n                ]\r\n            ]\r\n        ]\r\n\r\nmodule EnchantComponent =\r\n    type Model = DictType<Enchant, int>\r\n    type Msg =\r\n        | ChangeEnchant of Enchant * int\r\n\r\n    let update msg (model:Model) =\r\n        match msg with\r\n        | ChangeEnchant (e,v) ->\r\n            if v > 0 then\r\n                let enchants = model |> Map.add e v\r\n                enchants, Cmd.none\r\n            else\r\n                model |> Map.remove e, Cmd.none\r\n    let view wt (model:Model) dispatch =\r\n        ul[](\r\n            Enchant.All\r\n            |> Seq.filter(Enchant.CanApplyTo wt)\r\n            |> Seq.map(fun e ->\r\n                li <|| numberRow (Enchant.Humanize e) (model|> Map.tryFind e |> Option.map float) (fun _ v ->\r\n                    ChangeEnchant(e,v |> Option.map int |> Option.defaultValue 0) |> dispatch\r\n                )\r\n            )\r\n        )\r\n\r\nmodule WeaponComponent =\r\n    type Model = Weapon\r\n    type Msg =\r\n        | UpdateName of string\r\n        | UpdateStat of DmgStatComponent.Msg\r\n        | ChangeDmg of int\r\n        | ChangeEnchant of EnchantComponent.Msg\r\n        | ChangeWeaponType of WeaponType\r\n\r\n    let init initOverride =\r\n        initOverride\r\n        |> Option.defaultValue {\r\n            Name= \"Diamond Sword\"\r\n            WeaponType= Sword\r\n            Damage= 20\r\n            Stats= Map.empty\r\n            Enchants= Map.empty\r\n        }\r\n\r\n    let update msg model =\r\n        match msg with\r\n        | UpdateName n ->\r\n            {model with Model.Name= n}, Cmd.none\r\n        | ChangeDmg v ->\r\n            {model with Damage= v}, Cmd.none\r\n        | UpdateStat msg ->\r\n            let next,cmd = DmgStatComponent.update msg model.Stats\r\n            {model with Stats= next}, cmd |> Cmd.map UpdateStat\r\n        | ChangeEnchant msg ->\r\n            let next,cmd = EnchantComponent.update msg model.Enchants\r\n            {model with Enchants= next}, cmd |> Cmd.map ChangeEnchant\r\n        | ChangeWeaponType t ->\r\n            {model with WeaponType = t}, Cmd.none\r\n\r\n    let view (model:Model) dispatch = \r\n        div [Class \"bd-outline\"][\r\n            Heading.h2 [] [unbox \"Weapon\"]\r\n            Heading.h3[Heading.IsSubtitle][\r\n                // unbox \"Your stats without a weapon, pet, or pot\"\r\n                unbox \"Your weapon's stats\"\r\n            ]\r\n            Select {|\r\n                    active= model.WeaponType\r\n                    addedClasses= List.empty\r\n                    items= WeaponType.All\r\n                    map= string\r\n                    parse= WeaponType.Parse\r\n                    onChange= (fun x -> Msg.ChangeWeaponType x |> dispatch)\r\n                    |}\r\n            ul [][\r\n                li <|| numberRow \"Damage\" (Some <| float model.Damage) (\r\n                    fun _ v -> v |> Option.map int |> Option.defaultValue 0 |> ChangeDmg |> dispatch)\r\n                li [] [\r\n                    DmgStatComponent.view model.Stats (UpdateStat>>dispatch)\r\n                ]\r\n                li [] [\r\n                        EnchantComponent.view model.WeaponType model.Enchants (ChangeEnchant>>dispatch)\r\n                ]\r\n            ]\r\n        ]\r\n\r\nmodule EnemyComponent =\r\n    type Model = {\r\n        MaxHealth:int\r\n        CurrentHealth:int\r\n        Type:EnemyEnchantClassification option\r\n    }\r\n\r\n    type Msg =\r\n        | ChangeMax of int\r\n        | ChangeCurrent of int\r\n        | ChangeType of EnemyEnchantClassification option\r\n\r\n    let update msg model =\r\n        match msg with\r\n        |ChangeMax i ->\r\n            {model with MaxHealth = i}, Cmd.none\r\n        | ChangeCurrent i ->\r\n            {model with CurrentHealth= i}, Cmd.none\r\n        | ChangeType (tOpt) ->\r\n            {model with Type= tOpt}, Cmd.none\r\n    let view model (dispatch:Msg -> unit) =\r\n        let dispatchInt f _ (v:float option) : unit =\r\n            v\r\n            |> Option.map int\r\n            |> Option.defaultValue 0\r\n            |> f\r\n            |> dispatch\r\n        div [Class \"bd-outline\"][\r\n            SelectOpt{|\r\n                        emptyLabel= \"EnemyType...\"\r\n                        active= model.Type\r\n                        addedClasses= List.empty\r\n                        items= EnemyEnchantClassification.All\r\n                        map= string\r\n                        parse= EnemyEnchantClassification.Parse \r\n                        onChange= (ChangeType >> dispatch)\r\n            |}\r\n            ul[][\r\n                li <|| numberRow \"Max Health\" (Some <| float model.MaxHealth) (dispatchInt Msg.ChangeMax)\r\n                li <|| numberRow \"Current Health\" (Some <| float model.CurrentHealth) (dispatchInt Msg.ChangeCurrent)\r\n            ]\r\n        ]\r\n\r\nmodule AccessoryComponent =\r\n    open AppDomain.Accessories\r\n    type OwnedAccessory =\r\n        {   FormName:string\r\n            Rarity:Rarity\r\n            Reforge: Reforge option\r\n        }\r\n\r\n    type Model = {\r\n        Character: CharacterComponent.Model\r\n        // use BaseName\r\n        OwnedAccessories: Map<string,OwnedAccessory>\r\n    }\r\n\r\n    type UpdateFormValue = string*Rarity\r\n\r\n    type UpdateFormArgs = {\r\n        BaseName:string \r\n        // selectedFormName\r\n        FormOpt: UpdateFormValue option\r\n    }\r\n\r\n    type Msg =\r\n        | UpdateCharacter of CharacterComponent.Msg\r\n        | UpdateForm of UpdateFormArgs\r\n        | UpdateReforge of baseName:string * Reforge option\r\n\r\n    let init = {\r\n        Character= CharacterComponent.init\r\n        OwnedAccessories= Map.empty\r\n    }\r\n\r\n    let update msg (model:Model) =\r\n        let tryFindOwned name = model.OwnedAccessories |> Map.tryFind name\r\n\r\n        let inline lensOwned f =\r\n            {model with OwnedAccessories= f model.OwnedAccessories}\r\n        match msg with\r\n        | UpdateCharacter msg ->\r\n            let next, cmd = CharacterComponent.update msg model.Character\r\n            {model with Character= next}, cmd |> Cmd.map UpdateCharacter\r\n        | UpdateForm {BaseName=baseName;FormOpt=None} ->\r\n            lensOwned (fun oa -> oa |> Map.remove baseName), Cmd.none\r\n        | UpdateForm{BaseName=baseName;FormOpt=Some (selectedFormName,selectedRarity)} ->\r\n            let baseAcc = Accessory.TryFindBase baseName accessories\r\n            let actualAcc = baseAcc |> Option.bind (Accessory.TryFindForm selectedFormName)\r\n            let nextOwned = {\r\n                FormName= actualAcc |> Option.map(fun aa -> aa.Name) |> Option.defaultValue selectedFormName\r\n                Rarity= actualAcc |> Option.map(fun aa -> aa.Rarity) |> Option.defaultValue selectedRarity\r\n                Reforge= tryFindOwned baseName |> Option.bind(fun x -> x.Reforge)\r\n            }\r\n            lensOwned (fun oa -> oa |> Map.add baseName nextOwned ), Cmd.none\r\n\r\n        | UpdateReforge (baseName,r) ->\r\n            let baseAcc = Accessory.TryFindBase baseName accessories\r\n            // let actualAcc = baseAcc |> Option.bind (Accessory.TryFindForm selectedFormName)\r\n            match model.OwnedAccessories |> Map.tryFind baseName with\r\n            | Some oi ->\r\n                let next = model.OwnedAccessories |> Map.add baseName {oi with Reforge=r}\r\n                {model with OwnedAccessories= next}, Cmd.none\r\n            | None ->\r\n                eprintfn \"This shouldn't happen, can't find %s\" baseName\r\n                model, Cmd.none\r\n\r\n    let displayAccessory (ownedInfo:OwnedAccessory option) (baseAcc:Accessory) dispatch =\r\n        let forms = Accessory.Unfold baseAcc\r\n        let name = ownedInfo |> Option.map(fun oi -> oi.FormName) |> Option.defaultValue baseAcc.Name\r\n        let onChange =\r\n            getEvValue\r\n            >> Option.ofValueString\r\n            >> Option.bind Resolver.Deserialize<UpdateFormValue>\r\n            >> (fun x ->\r\n                Msg.UpdateForm{BaseName=baseAcc.Name; FormOpt= x}\r\n            )\r\n\r\n        Fulma.Columns.columns [][\r\n            Fulma.Column.column [][\r\n                Fulma.Select.select [][\r\n                    select [\r\n                        match ownedInfo with\r\n                        | Some oi ->\r\n                            let x = (oi.FormName,oi.Rarity)\r\n                            yield DefaultValue (Resolver.Serialize x)\r\n                        | None -> ()\r\n                        yield OnChange (onChange>> dispatch)\r\n                    ][\r\n                        yield option [Value \"\"][ str <| sprintf \"No %s or higher owned\" baseAcc.Name]\r\n                        yield!\r\n                            forms\r\n                            |> List.map(fun f ->\r\n                                let v = (f.Name,f.Rarity)\r\n                                option [Resolver.Serialize v |> box<string> |> Value ][\r\n                                    str <| sprintf \"%s - %A\" f.Name f.Rarity\r\n                                ]\r\n                            )\r\n                    ]\r\n                ]\r\n            ]\r\n            Fulma.Column.column [Column.Option.Props [Title baseAcc.Name]][\r\n                Fulma.Select.select [][\r\n                    select [\r\n                        match ownedInfo with\r\n                        | Some {FormName= fn;Reforge= Some rfg} ->\r\n                            let x = (fn,rfg)\r\n                            yield DefaultValue (Resolver.Serialize x)\r\n                        | _ -> ()\r\n                        yield OnChange (onChange>> dispatch)\r\n                    ] [\r\n                        yield option [Value \"\"][str \"No Reforge...\"]\r\n                        yield!\r\n                            Reforge.All\r\n                            |> List.map(fun rfg ->\r\n                                option [string rfg|> box<string> |> Value][\r\n                                    str <| string rfg\r\n                                ]\r\n                            )\r\n                    ]\r\n                ]\r\n            ]\r\n        ]\r\n\r\n\r\n    let accview (props:ThemeProps) (model:Model) dispatch =\r\n        div [][\r\n            Section.section [Section.Option.CustomClass props.Theme][\r\n                (\r\n                    try\r\n                        CharacterComponent.view\r\n                            \"Character stats without accessories or weapon equipped (armor included for now)\"\r\n                            model.Character (Msg.UpdateCharacter >> dispatch)\r\n                    with ex ->\r\n                        pre [][\r\n                            unbox ex.Message\r\n                        ]\r\n                )\r\n            ]\r\n            Section.section [] [\r\n                let rarityCounts =\r\n                    model.OwnedAccessories\r\n                    |> Map.toSeq\r\n                    |> Seq.map(fun (_,oa) ->\r\n                        oa.Rarity\r\n                    )\r\n                    |> Seq.groupBy id\r\n                    |> Seq.map(fun (g,items) -> g, items |> Seq.length)\r\n                    |> List.ofSeq\r\n                let countRarity r = \r\n                    rarityCounts |> List.tryFind (fst >> (=) r) |> Option.map snd |> Option.defaultValue 0\r\n                let l,e,r,u,c = countRarity Legendary, countRarity Epic, countRarity Rare, countRarity Uncommon, countRarity Common\r\n                yield Fulma.Heading.h2 [][\r\n                    str <| sprintf \"Owned - %i Legendary, %i Epic, %i Rare, %i Uncommon, %i Common\" l e r u c\r\n\r\n                ]\r\n                yield! \r\n                    accessories\r\n                    |> List.map (fun acc ->\r\n                        let forms = Accessory.Unfold acc\r\n                        let ownedInfo =\r\n                            forms\r\n                            |> Seq.tryPick(fun accForm ->\r\n                                model.OwnedAccessories\r\n                                |> Map.tryFind acc.Name\r\n                            )\r\n                        displayAccessory ownedInfo acc dispatch\r\n                )\r\n            ]\r\n        ]\r\n\r\ntype Model = {\r\n    Submenu: Submenu\r\n    CustomCharacter: CharacterComponent.Model\r\n    AccessoryModel: AccessoryComponent.Model\r\n    Enemy: EnemyComponent.Model\r\n    WeaponComponent:WeaponComponent.Model\r\n    // no pet, no weapon, no pots\r\n    Pet: DictType<DmgStat,float>\r\n    Potion: DictType<DmgStat,float>\r\n}\r\n\r\ntype CustomMsg =\r\n    | CharacterChange of CharacterComponent.Msg\r\n    | WeaponChange of WeaponComponent.Msg\r\n    | EnemyChange of EnemyComponent.Msg\r\n\r\ntype SubMsg =\r\n    | CustomChange of CustomMsg\r\n    | AccChange of AccessoryComponent.Msg\r\n\r\ntype Msg =\r\n    | ComponentChange of SubMsg\r\n    | SubmenuChange of Submenu\r\n\r\nlet init initOverride : Model * Cmd<Msg> =\r\n    initOverride\r\n    |> Option.defaultValue {\r\n        Submenu= Submenu.Custom\r\n        AccessoryModel= AccessoryComponent.init\r\n        CustomCharacter= CharacterComponent.init\r\n        Enemy= {\r\n            MaxHealth= 13000\r\n            CurrentHealth= 13000\r\n            Type= Some EnemyEnchantClassification.Ender\r\n        }\r\n        WeaponComponent= WeaponComponent.init None\r\n        Pet= Map.empty\r\n        Potion= Map.empty\r\n    }, Cmd.none\r\n\r\nlet update (msg:Msg) model:Model * Cmd<Msg> =\r\n    match msg with\r\n    | Msg.ComponentChange (AccChange msg) ->\r\n        let next, cmd = AccessoryComponent.update msg model.AccessoryModel\r\n        {model with AccessoryModel= next}, cmd |> Cmd.map (AccChange >> ComponentChange)\r\n    | Msg.ComponentChange (CustomChange msg) ->\r\n        match msg with\r\n        |WeaponChange msg ->\r\n            let next,cmd = WeaponComponent.update msg model.WeaponComponent\r\n            {model with WeaponComponent= next}, cmd |> Cmd.map WeaponChange\r\n        | CharacterChange msg ->\r\n            let next,cmd = CharacterComponent.update msg model.CustomCharacter\r\n            {model with CustomCharacter= next}, cmd |> Cmd.map CharacterChange\r\n        | EnemyChange msg ->\r\n            let next,cmd = EnemyComponent.update msg model.Enemy\r\n            {model with Enemy= next}, cmd |> Cmd.map EnemyChange\r\n        |> function\r\n            | m,c ->\r\n                m, c |> Cmd.map (CustomChange >> ComponentChange)\r\n    | SubmenuChange sm ->\r\n        {model with Submenu= sm}, Cmd.none\r\n\r\nmodule Internal =\r\n    let dmgView (model:Model) =\r\n        let cl = model.CustomCharacter.CombatLevel\r\n        let stats = [model.CustomCharacter.Stats;model.WeaponComponent.Stats]\r\n        let clv = getCombatLevelValue cl\r\n        let e =\r\n            getEValue \r\n                AppDomain.Collections.Weapons.WeaponType.Sword\r\n                (float model.CustomCharacter.MaxHealth)\r\n                (float model.Enemy.MaxHealth, float model.Enemy.CurrentHealth, model.Enemy.Type)\r\n                model.WeaponComponent.Enchants\r\n        let wb = 0.0 // getWbValue\r\n        let str = addValues Strength stats\r\n        let x = getBasedmg (float model.WeaponComponent.Damage) str\r\n        let m = getMult cl e wb\r\n        let ab = 1.0\r\n        let cd = addValues CritDmg stats\r\n        let normal = getNormalDamage x m ab\r\n        let crit = getTotalCritDamage x m ab cd\r\n        let cc = addValues CritChance stats\r\n\r\n        div[][\r\n            Content.content [Content.Size IsLarge][\r\n                pre [] [unbox <| sprintf \"Str:%.1f,CC:%.1f, CD: %.0f%%\" str cc cd]\r\n                pre [] [unbox \"Base= (5 + WeaponDMG + Strength / 5) * (1 + Strength / 100)\"]\r\n                // would be nice if details were foldable, or toggled\r\n                pre [] [unbox <| sprintf \"Base = (5 + %i + %.2f / 5) * %.2f\" model.WeaponComponent.Damage str (1.0 + str / 100.0)]\r\n                pre [] [unbox <| sprintf \"Base = %.2f * %.2f\" (5.0 + float model.WeaponComponent.Damage + str / 5.0) (1.0 + str / 100.0)]\r\n                pre [] [unbox <| sprintf \"Base = %.2f\" x]\r\n                hr []\r\n                pre [][unbox \"1 + CombatLevel * 0.04 + Enchants + WeaponBonus\"]\r\n                pre [][unbox <| sprintf \"5 + %.2f + %.2f + %.2f\" clv e wb]\r\n                pre [][unbox <| sprintf \"Multiplier = %.2f\" m]\r\n                hr []\r\n                pre [][unbox \"Base Damage * Multiplier * ArmorBonus * (1 + CritDamage)\"]\r\n                pre [][unbox <| sprintf \"%.2f * %.2f * %.2f * (1 + %.2f%%)\" x m ab cd]\r\n                pre [][unbox <| sprintf \"Crit=%.2f, Normal=%.2f\" crit normal]\r\n            ]\r\n        ]\r\n\r\nlet customview props model (dispatch:CustomMsg -> unit) =\r\n    div [] [\r\n        Section.section [][\r\n            (\r\n                try\r\n                    CharacterComponent.view \"Your stats without a weapon equipped\" model.CustomCharacter (CharacterChange >> dispatch)\r\n                with ex ->\r\n                    pre [][\r\n                        unbox ex.Message\r\n                    ]\r\n            )\r\n        ]\r\n        Section.section [][\r\n            (\r\n                try\r\n                    WeaponComponent.view model.WeaponComponent (WeaponChange >> dispatch)\r\n                with ex ->\r\n                    pre [][\r\n                        unbox ex.Message\r\n                    ]\r\n            )\r\n        ]\r\n        Section.section [][\r\n            (\r\n                try\r\n                    EnemyComponent.view model.Enemy (EnemyChange >> dispatch)\r\n                with ex ->\r\n                    pre [][\r\n                        unbox ex.Message\r\n                    ]\r\n            )\r\n        ]\r\n        Section.section [][ Internal.dmgView model ]\r\n    ]\r\n\r\nlet view (props:ThemeProps) (model:Model) (dispatch: Msg -> unit) =\r\n    let tab = \r\n        match model.Submenu with\r\n        | Submenu.Custom ->\r\n            customview props model (SubMsg.CustomChange >> Msg.ComponentChange >> dispatch)\r\n        | Submenu.Accessorize ->\r\n            AccessoryComponent.accview props model.AccessoryModel (SubMsg.AccChange >> Msg.ComponentChange >> dispatch)\r\n    div [] [\r\n        TabContainer (Option.ofValueString props.Theme) None (\r\n            [Submenu.Accessorize;Submenu.Custom] |> List.map(fun sm ->\r\n                TabTextLink (string sm) (string model.Submenu |> Some) (fun _ -> Msg.SubmenuChange sm |> dispatch)\r\n            )\r\n        )\r\n        div [Class props.Theme][ tab ]\r\n    ]","namespace Fulma\r\n\r\nopen Fulma\r\nopen Fable.React\r\nopen Fable.React.Props\r\n\r\n[<RequireQualifiedAccess>]\r\nmodule Content =\r\n\r\n    type Option =\r\n        | Size of ISize\r\n        | CustomClass of string\r\n        | Props of IHTMLProp list\r\n        | Modifiers of Modifier.IModifier list\r\n\r\n    /// Generate <div class=\"content\"></div>\r\n    let content (options : Option list) children =\r\n        let parseOptions (result : GenericOptions) option =\r\n            match option with\r\n            | Size size -> ofSize size |> result.AddClass\r\n            | Props props -> result.AddProps props\r\n            | CustomClass customClass -> result.AddClass customClass\r\n            | Modifiers modifiers -> result.AddModifiers modifiers\r\n\r\n        GenericOptions.Parse(options, parseOptions, \"content\").ToReactElement(div, children)\r\n\r\n    module Ol =\r\n\r\n        type Option =\r\n            | [<CompiledName(\"is-lower-roman\")>] IsLowerRoman\r\n            | [<CompiledName(\"is-upper-roman\")>] IsUpperRoman\r\n            | [<CompiledName(\"is-lower-alpha\")>] IsLowerAlpha\r\n            | [<CompiledName(\"is-upper-alpha\")>] IsUpperAlpha\r\n            | CustomClass of string\r\n            | Modifiers of Modifier.IModifier list\r\n            | Props of IHTMLProp list\r\n\r\n        /// Generate <ol></ol>\r\n        let ol (options : Option list) children =\r\n            let parseOptions (result : GenericOptions) option =\r\n                match option with\r\n                | IsLowerRoman\r\n                | IsUpperRoman\r\n                | IsLowerAlpha\r\n                | IsUpperAlpha -> result.AddCaseName option\r\n                | Props props -> result.AddProps props\r\n                | CustomClass customClass -> result.AddClass customClass\r\n                | Modifiers modifiers -> result.AddModifiers modifiers\r\n\r\n            GenericOptions.Parse(options, parseOptions).ToReactElement(ol, children)\r\n","module AppDomain.EnchantingReference\r\n\r\nopen Shared.Helpers\r\n\r\n\r\ntype EnchantType =\r\n    | Armor\r\n    | Bow\r\n    | Sword\r\n    | Tool\r\n    with \r\n     static member All =\r\n        [\r\n            Armor\r\n            Bow\r\n            Sword\r\n            Tool\r\n        ]\r\n\r\ntype Roman =\r\n    | I\r\n    | II\r\n    | III\r\n    | IV\r\n    | V\r\n    with\r\n        static member toNumber =\r\n            function\r\n            | I -> 1\r\n            | II -> 2\r\n            | III -> 3\r\n            | IV -> 4\r\n            | V -> 5\r\n\r\ntype EnchantBase = {\r\n    Name:string\r\n    TargetLvl: Roman\r\n    VendorTitle: string\r\n    IsRecommended: bool\r\n    MinEnchantTbl: int option\r\n}\r\n\r\ntype Craftable = {\r\n    Base: EnchantBase\r\n    Collection: string\r\n    CraftLvlCreated: Roman\r\n    Components: string\r\n}\r\n\r\ntype Enchant =\r\n    | Uncraftable of EnchantBase\r\n    | Craftable of Craftable\r\n    with\r\n        member x.Base =\r\n            match x with\r\n            | Uncraftable eb -> eb\r\n            | Craftable c -> c.Base\r\n\r\nlet cBase name tlvl vt isRec minTblLvl = {\r\n        Name= name\r\n        TargetLvl= tlvl\r\n        VendorTitle= vt\r\n        IsRecommended= isRec\r\n        MinEnchantTbl= minTblLvl\r\n}\r\ntype private EnchantingHelpers =\r\n\r\n    static member CEnchant name tlvl meTbl c clc comp vt isRecommended =\r\n        Craftable {\r\n            Base= cBase name tlvl vt isRecommended (Some meTbl)\r\n            Collection = c\r\n            CraftLvlCreated = clc\r\n            Components = comp\r\n        }\r\nlet private cEnchant = EnchantingHelpers.CEnchant\r\n\r\n// cEnchant\\((\"[^\"]+\")\\s?,\\s?\"([^\"]+)\"\\s?,\\s?(\\d+)\\s?,\\s?(\"[^\"]+\")\\s?,\\s?\"([^\"]+)\"\\s?,\\s?(\"[^\"]+\")\r\n// cBase $1 $2 vt \r\n\r\nlet sEnchants = Sword,[\r\n    Craftable {\r\n        Base = cBase \"Critical\" V \r\n            \"VI - Sven Packmaster - Wolf Slayer IV required\" true <| Some 44\r\n        Collection= \"Diamond 5\"\r\n        CraftLvlCreated= IV\r\n        Components= \"8 Enchanted Diamond\"\r\n    }\r\n    Craftable {\r\n        Base= cBase \"Sharpness\" V \"VI - Dark Auction\" true <| Some 44\r\n        Collection= \"Gravel 4\"\r\n        CraftLvlCreated= IV\r\n        Components= \"Iron Sword + 8 Flint\"\r\n    }\r\n\r\n    EnchantingHelpers.CEnchant \"Execute\" V 40 \"Diamond 2\" IV \"40 Flint + 40 Diamond\" null true\r\n    EnchantingHelpers.CEnchant \"Giant Killer\" V 40 \"Ghast 3\" IV \"8 Ghast Tears\" \"VI - Dark Auction\" true\r\n    EnchantingHelpers.CEnchant \"First Strike\" IV 24 \"Gravel 6\" III \"4 Enchanted Flint\" null true\r\n    EnchantingHelpers.CEnchant \"Lethality\" V 40 \"Obsidian 2\" IV \"24 Obsidian\" null true\r\n    EnchantingHelpers.CEnchant \"Cubism\" V 44 \"Pumpkin 4\" IV \"32 Pumpkin\" null true\r\n    EnchantingHelpers.CEnchant \"Ender Slayer\" V 48 \"Ender Pearl 3\" IV \"8 Enchanted Ender Pearls\" \"VI - Pearl Dealer - $1.5m\" true\r\n    EnchantingHelpers.CEnchant \"Impaling\" III 32 \"Prismarine Shard 1\" II \"20 Prismarine Shards\" null false\r\n    EnchantingHelpers.CEnchant \"Life Steal\" III 36 \"None needed\" II \"2 Enchanted Golden Apple\" null false\r\n    EnchantingHelpers.CEnchant \"Vampirism\" V 40 \"Ghast 5\" IV \"8 Enchanted Ghast\" \"VI - Spooky Festival\" false\r\n    EnchantingHelpers.CEnchant \"Luck\" V 40 \"Rabbit 5\" IV \"8 Rabbit Hide\" \"IV from gifts\" false\r\n    EnchantingHelpers.CEnchant \"Looting\" III 28 \"Gold 3\" II \"4 Gold Block\" \"IV from gifts\" false\r\n    EnchantingHelpers.CEnchant \"Scavenger\" III 18 \"Gold 6\" II \"Golden Sword\" \"IV from gifts\" false\r\n    EnchantingHelpers.CEnchant \"Experience\" III 24 \"Lapis 3\" II \"2 Lapis\" null false\r\n    EnchantingHelpers.CEnchant \"Venomous\" V 46 \"Spider Eye 6\" IV \"8 Enchanted Spider Eye\" null false\r\n    EnchantingHelpers.CEnchant \"Thunderlord\" V 15 \"Gunpowder 5\" IV \"8 Enchanted Gunpowder\" null false\r\n    EnchantingHelpers.CEnchant \"Cleave\" V 40 \"Pufferfish 3\" IV \"40 Pufferfish\" null false\r\n]\r\n\r\nlet aEnchants = Armor, [\r\n    EnchantingHelpers.CEnchant \"Protection\" V 40 \"Iron 3\" IV \"8 Iron\" \"VI - Dark Auction\" true\r\n    EnchantingHelpers.CEnchant \"Growth\" V 40 \"Dark Oak 7\" IV \"8 Enchanted Dark Oak\" \"VI - Dark Auction\" true\r\n    EnchantingHelpers.CEnchant \"Depth Strider(boots)\" III 30 \"Pufferfish 4\" II \"2 Salmon 2 Lily Pad\" null false\r\n    EnchantingHelpers.CEnchant \"Feather Fall(boots)\" V 42 \"Feather 2\" IV \"40 feathers\" null true\r\n    Uncraftable { \r\n                    Name= \"True Protection(chest)\"; TargetLvl= I\r\n                    IsRecommended= false\r\n                    VendorTitle= \"Birch Park - Howling Cave - $900k\"\r\n                    MinEnchantTbl= None\r\n            }\r\n]\r\n\r\nlet bEnchants = Bow, [\r\n    EnchantingHelpers.CEnchant \"Power\" V 38 \"Bone 3\" IV \"40 bone\" \"VI - Dark Auction\" true\r\n    EnchantingHelpers.CEnchant \"Aiming\" V 48 \"Feather 6\" IV \"1 Compass and 8 Arrows\" null true\r\n    EnchantingHelpers.CEnchant \"Infinite Quiver\" V 44 \"String 6\" IV \"1 Bow\" null true\r\n    EnchantingHelpers.CEnchant \"Piercing\" I 23 \"Cactus 6\" I \"10 Cacti and 1 arrow\" null true\r\n    EnchantingHelpers.CEnchant \"Cubism\" V 44 \"Pumpkin 4\" IV \"32 Pumpkin\" null true\r\n    EnchantingHelpers.CEnchant \"Snipe\" III 27 \"Feather 8\" II \"2 Feather and 2 arrow\" null true\r\n    EnchantingHelpers.CEnchant \"Impaling\" III 32 \"Prismarine Shard 1\" II \"20 Prismarine Shards\" null false\r\n]\r\n\r\nlet tEnchants = Tool, [\r\n    // Replenish\r\n    cEnchant \"Efficiency (Axe, Pickaxe,Shovel,Shears)\" V 36 \"Redstone 3\" IV \"8 redstone\" \"VI - Stonk only\" true\r\n    cEnchant \"Experience (Pickaxe)\" III 28 \"Lapis 3\" II \"2 Lapis Lazuli\" \"IV - Viking\" true\r\n    cEnchant \"Fortune (Pickaxe)\" III 28 \"Gold 8\" III \"2 Enchanted Gold\" null true\r\n    cEnchant \"Harvesting(Hoe)\" V 44 \"Wheat 2\" IV \"16 Wheat\" null true\r\n    cEnchant \"Rainbow(Shears)\" I 1 \"Mutton 6\" I \"5 White Wool\" null false\r\n    Craftable {\r\n            Base= cBase \"Replenish (Axe,Hoe)\" I null false None\r\n            Collection = \"Cocoa 8\"\r\n            CraftLvlCreated = I\r\n            Components = \"16 Enchanted Cookie\"\r\n        }\r\n    cEnchant \"Silk Touch(Pickaxe)\" I 4 \"String 5\" I \"1 Enchanted String\" \"Not Compatible with Smelting Touch\" false\r\n    cEnchant \"Smelting Touch(Pickaxe)\" I 15 \"Coal 2\" I \"5 Coal Blocks\" \"Not Compatible with Silk Touch\" false\r\n    Uncraftable {\r\n                    Name=\"Telekinesis\"; TargetLvl= I\r\n                    IsRecommended= true\r\n                    VendorTitle=\"Rusty - Gold Mine - 100 coins\"\r\n                    MinEnchantTbl= Some 1\r\n    } \r\n]\r\n\r\n","module Components.Enchanting\r\n\r\nopen Components.SharedComponents\r\nopen Fable.React\r\nopen Fable.React.Props\r\nopen CodeHelpers.FableHelpers\r\nopen AppDomain.SalesReference\r\nopen Shared\r\nopen Shared.Helpers\r\nopen Elmish\r\nopen SharedComponents.TabLink\r\nopen AppDomain.EnchantingReference\r\n\r\n// model msg init update view\r\n\r\n// type ToolType =\r\n//     |\r\n\r\n// type EnchantState = {\r\n//     OnBook:bool\r\n//     Exclude:bool\r\n//     Filter:bool\r\n//     HaveRecipe:bool\r\n// }\r\n\r\ntype StruckTracker = Map<EnchantType,string list>\r\n\r\ntype Model = {\r\n    Submenu: EnchantType\r\n    Struck: StruckTracker\r\n    ColorRecommendations: bool\r\n}\r\n\r\ntype Msg =\r\n    | EnchantClick of EnchantType * string\r\n    | ClearClick of EnchantType\r\n    | ChangeSubmenu of EnchantType\r\n    | ToggleColors\r\n\r\nlet init overrideOpt =\r\n    let m =\r\n        overrideOpt\r\n        |> Option.defaultValue {\r\n            Submenu = EnchantType.Sword\r\n            Struck= Map.empty\r\n            ColorRecommendations= true\r\n        }\r\n    m, Cmd.none\r\n\r\nlet update msg model =\r\n    match msg with\r\n    | ToggleColors ->\r\n        {model with\r\n            ColorRecommendations = not model.ColorRecommendations}\r\n        , Cmd.none\r\n    | Msg.ChangeSubmenu et ->\r\n        {model with Submenu = et}, Cmd.none\r\n    | ClearClick et ->\r\n        let next =\r\n            { model\r\n                with Struck =\r\n                        model.Struck\r\n                        |> Map.remove et\r\n        }\r\n        next,Cmd.none\r\n    | EnchantClick (et,name) ->\r\n        let next =\r\n            model.Struck\r\n            |> Map.tryFind et\r\n            |> function \r\n                | Some l ->\r\n                    if l |> List.contains name then\r\n                        let l = l |> List.except [name]\r\n                        model.Struck\r\n                        |> Map.add et l\r\n                        |> Some\r\n                    else\r\n                        None\r\n                | None -> None\r\n            |> function\r\n                | Some x -> x\r\n                | None ->\r\n                        model.Struck\r\n                        |> Map.add et [name]\r\n        {model with Struck = next}, Cmd.none\r\n\r\nmodule Internal =\r\n    let trStrike struck =\r\n        tr[Class (if struck then \"strikethrough\" else \"\")]\r\n\r\n    type ERProps = {\r\n        Key:string\r\n        Struck:string list\r\n        ColorRec:bool\r\n        E: EnchantType*Enchant\r\n    }\r\n\r\n    let enchantRow (props: ERProps) dispatch =\r\n        let et,e = props.E\r\n        let sucMods = Fulma.Modifier.parseModifiers [Fulma.Modifier.TextColor Fulma.Color.IsSuccess]\r\n        let suc =\r\n            if props.ColorRec && e.Base.IsRecommended then\r\n                sucMods |> String.concat \" \"\r\n            else \"\"\r\n        let isStruck = props.Struck |> List.contains e.Base.Name\r\n        let bcls = BFulma.addClasses [\r\n            yield \"button\"\r\n            yield suc\r\n            if isStruck then\r\n                yield \"strikethrough\"\r\n        ]\r\n        trStrike isStruck [\r\n            td [\r\n                Class suc\r\n                OnClick (fun _ -> Msg.EnchantClick(et,e.Base.Name) |> dispatch)\r\n            ][\r\n                button [\r\n                    Class bcls\r\n                    Name e.Base.Name\r\n                ][\r\n                    unbox e.Base.Name\r\n                ]\r\n            ]\r\n            td [][ unbox <| string e.Base.TargetLvl ]\r\n            td [](\r\n                match e.Base.MinEnchantTbl with\r\n                | Some l -> [unbox <| string l]\r\n                | _ -> []\r\n            )\r\n            td[][\r\n                div[if String.isValueString e.Base.VendorTitle then yield Class \"star\"][\r\n                    match e with\r\n                    |Craftable c -> yield unbox c.Collection\r\n                    | _ -> ()\r\n                ]\r\n            ]\r\n            td[][\r\n                div[][\r\n                    match e with\r\n                    |Craftable c -> yield unbox <| string c.CraftLvlCreated\r\n                    | _ -> ()\r\n                ]\r\n            ]\r\n            td [](\r\n                match e with\r\n                |Craftable c -> [unbox c.Components]\r\n                |Uncraftable _ -> []\r\n            )\r\n\r\n        ]\r\n    let eBody colorRec struck (et,enchants:Enchant list) dispatch =\r\n                tbody [](\r\n                    enchants\r\n                    |> List.map( fun x ->\r\n                        enchantRow {\r\n                            Key=\r\n                                match x with\r\n                                | Craftable c ->\r\n                                    c.Base.Name\r\n                                | Uncraftable u ->\r\n                                    u.Name\r\n                            Struck= struck\r\n                            ColorRec= colorRec\r\n                            E= et, x\r\n                        } dispatch\r\n                    )\r\n                    \r\n                )\r\n    let enchantTable (props:{|\r\n                            colorRec: bool\r\n                            struck: string list\r\n                            enchants: EnchantType*(Enchant list) |}) dispatch =\r\n        div[] [\r\n            table [Class \"table\"][\r\n                thead [][\r\n                    tr[][\r\n                        td [] [unbox \"Enchant Name\"]\r\n                        td [Title \"Does not include special books\"][\r\n                            unbox \"Max Craft Level\"\r\n                        ]\r\n                        td [Title \"Minimum enchant level for the max craft level to appear on the table\"][\r\n                            unbox \"Min Enchant Tbl\"\r\n                        ]\r\n                        td [Title \"Craft collection for unlock\"][\r\n                            unbox \"Collection\"\r\n                        ]\r\n                        td [Title \"If crafted from components, what level book is created\"][\r\n                            unbox \"Craft Level Created\"\r\n                        ]\r\n                        td [Title \"If craftings,  what level book is created\"][\r\n                            unbox \"Special Components\"\r\n                        ]\r\n                    ]\r\n                ]\r\n                eBody props.colorRec props.struck props.enchants dispatch\r\n                // tbody [](\r\n                //     snd props.enchants\r\n                //     |> List.map( fun e ->\r\n                //         enchantRow {\r\n                //             Key= e.Base.Name\r\n                //             Struck= props.struck\r\n                //             ColorRec= props.colorRec\r\n                //             E= fst props.enchants ,e\r\n                //         } dispatch\r\n                //     )\r\n                    \r\n                // )\r\n            ]\r\n        ]\r\n    let armorEnchant useColor strikes enchants dispatch =\r\n        div [][\r\n            div[][\r\n                input [\r\n                    Type \"Checkbox\"\r\n                    Checked useColor\r\n                    OnChange (fun _ -> Msg.ToggleColors |> dispatch)\r\n                ]\r\n                unbox \"Color Recommendation Levels\"\r\n            ]\r\n            enchantTable {| colorRec= useColor\r\n                            enchants= enchants\r\n                            struck= strikes\r\n\r\n            |} dispatch\r\n        ]\r\n    let bowEnchant useColor strikes enchants dispatch =\r\n        div [][\r\n            div[][\r\n                input [\r\n                    Type \"Checkbox\"\r\n                    Checked useColor\r\n                    OnChange (fun _ -> Msg.ToggleColors |> dispatch)\r\n                ]\r\n                unbox \"Color Recommendation Levels\"\r\n            ]\r\n            enchantTable {| colorRec= useColor\r\n                            enchants= enchants\r\n                            struck= strikes\r\n\r\n            |} dispatch\r\n        ]\r\n    let swordEnchant useColor strikes (enchants: _*(Enchant list)) dispatch =\r\n        div[][\r\n            div[][\r\n                input [\r\n                    Type \"Checkbox\"\r\n                    Checked useColor\r\n                    OnChange (fun _ -> Msg.ToggleColors |> dispatch)\r\n                ]\r\n                unbox \"Color Recommendation Levels\"\r\n            ]\r\n            div[][\r\n                unbox <| sprintf \"9 recommended damage enchants, found %i\" (snd enchants |> List.length)\r\n            ]\r\n            enchantTable {| colorRec= useColor\r\n                            enchants= enchants\r\n                            struck= strikes\r\n\r\n            |} dispatch\r\n        ]\r\n    let toolEnchant useColor strikes enchants dispatch =\r\n        div [][\r\n            div[][\r\n                input [\r\n                    Type \"Checkbox\"\r\n                    Checked useColor\r\n                    OnChange (fun _ -> Msg.ToggleColors |> dispatch)\r\n                ]\r\n                unbox \"Color Recommendation Levels\"\r\n            ]\r\n            enchantTable {| colorRec= useColor\r\n                            enchants= enchants\r\n                            struck= strikes\r\n\r\n            |} dispatch\r\n        ]\r\n\r\nopen Internal\r\nopen AppDomain.EnchantingReference\r\nlet view props model dispatch =\r\n    let stdTabs = {|\r\n        names= EnchantType.All\r\n        active= Some model.Submenu\r\n        map= string\r\n        onClick= (Msg.ChangeSubmenu >> dispatch)\r\n    |}\r\n    div[][\r\n        TabContainer None (Some stdTabs) []\r\n        div [Class props.Theme](\r\n            let strikes =\r\n                model.Struck\r\n                |> Map.tryFind model.Submenu\r\n                |> Option.defaultValue List.empty\r\n            match model.Submenu with\r\n            | Sword ->\r\n                swordEnchant model.ColorRecommendations strikes sEnchants dispatch\r\n            | Armor ->\r\n                armorEnchant model.ColorRecommendations strikes aEnchants dispatch\r\n            | Bow ->\r\n                bowEnchant model.ColorRecommendations strikes bEnchants dispatch\r\n            | Tool ->\r\n                toolEnchant model.ColorRecommendations strikes tEnchants dispatch\r\n            |> List.singleton\r\n        )\r\n    ]","module BFulma\r\n\r\nopen Fulma\r\nopen Fable.React\r\nopen Fable.React.Props\r\nopen Fable.FontAwesome\r\n\r\nopen Shared\r\n\r\nlet horizontalInput labelTxt input =\r\n    div [Class \"field is-horizontal\"] [\r\n        div [Class \"field-label is-normal\"] [label [Class \"label\"] [str labelTxt]]\r\n        div [Class \"field-body\"] [\r\n            div [Class \"field\"] [\r\n                p [Class \"control\"] [\r\n                    input\r\n                ]\r\n            ]\r\n        ]\r\n    ]\r\n\r\ntype ButtonState =\r\n    | BtnEnabled of (Browser.Types.MouseEvent -> unit)\r\n    | BtnDisabled\r\n\r\nlet button txt isPrimary buttonState =\r\n    Button.button\r\n        [ yield Button.IsFullWidth\r\n          if isPrimary then yield Button.Color IsPrimary\r\n          match buttonState with\r\n          | BtnEnabled onClick -> yield Button.OnClick onClick\r\n          | BtnDisabled -> ()\r\n        ]\r\n        [ str txt ]\r\n\r\n// https://github.com/Fulma/Fulma/blob/master/docs/src/Fulma/Components/Dropdown.fs\r\nlet dropdown labelText (selectedItem:string) items onClick =\r\n    let count = Seq.length items\r\n    printfn \"Item count for dropdown is %i\" count\r\n    let itemElements =\r\n        items\r\n        |> Seq.map(fun n ->\r\n            Dropdown.Item.div [\r\n                if n=selectedItem then yield Dropdown.Item.IsActive true\r\n                else yield Dropdown.Item.Option.Props [OnClick (fun _ -> printfn \"she clicked me!\";onClick n)]] [str n])\r\n        |> List.ofSeq\r\n    Dropdown.dropdown [\r\n            if count > 0 then\r\n                yield Dropdown.IsHoverable\r\n                // yield Dropdown.Props [ OnChange (fun e -> printfn \"onchange dropdown\"; onChange e)\r\n        ]\r\n        [\r\n            Dropdown.trigger []\r\n                [ Button.button [ ]\r\n                    [ span [ ]\r\n                        [ str labelText ]\r\n                      Icon.icon [ Icon.Size IsSmall ]\r\n                        [ Fa.i [ Fa.Solid.AngleDown ]\r\n                            [ ] ] ] ]\r\n            Dropdown.menu [] itemElements\r\n        ]\r\nlet addClasses items =\r\n    items\r\n    |> List.choose Option.ofValueString\r\n    |> List.map String.trim\r\n    |> String.concat \" \"","module Components.EventCalc\r\n\r\nopen CodeHelpers.FableHelpers\r\nopen Elmish\r\nopen Fable.React\r\nopen Fable.React.Props\r\nopen Shared.Helpers\r\n\r\ntype Model = {\r\n    Days:int\r\n    Hours: int\r\n    Minutes: int\r\n}\r\n\r\ntype Msg =\r\n    | DayChange of int\r\n    | HourChange of int\r\n    | MinuteChange of int\r\n\r\nlet init initOverride =\r\n    initOverride\r\n    |> Option.defaultValue {\r\n        Days = 1\r\n        Hours = 3\r\n        Minutes = 30\r\n    }, Cmd.none\r\n\r\nlet update (msg:Msg) (model:Model) : Model * Cmd<Msg> =\r\n    match msg with\r\n    |DayChange x ->\r\n        {model with Days = x}, Cmd.none\r\n    | HourChange x ->\r\n        {model with Hours = x}, Cmd.none\r\n    | MinuteChange x ->\r\n        {model with Minutes = x}, Cmd.none\r\n\r\nlet view theme (model:Model) (dispatch:Msg -> unit) =\r\n    let dt = System.DateTime.Now\r\n    let onChange name f = getTargetValue (\"EventCalc-\" + name) >> Option.bind tryParseInt >> Option.iter(f >> dispatch)\r\n    let numberInput name dv fMsg = input [Type \"number\"; DefaultValue dv; Class \"input\"; OnChange <| onChange name fMsg]\r\n    let bdSpan = span [Class \"bd-outline\"]\r\n    let fDt (dt:System.DateTime) =\r\n        dt.ToLocalTime().ToString()\r\n    let pluralize =\r\n        function\r\n        | 1 -> \"\"\r\n        | _ -> \"s\"\r\n    let spanTimeDisplay name value =\r\n        bdSpan [ unbox (sprintf \"%i %s%s\" value name <| pluralize value)]\r\n\r\n    let columns items =\r\n        Fulma.Columns.columns [](\r\n            items\r\n            |> List.map (Fulma.Column.column [])\r\n        )\r\n\r\n    div [Class theme][\r\n        columns [\r\n            [   unbox \"Days: \"\r\n                numberInput \"Days\" model.Days Msg.DayChange ]\r\n            [   unbox \"Hours: \"\r\n                numberInput \"Hours\" model.Hours Msg.HourChange ]\r\n            [   unbox \"Minutes\"\r\n                numberInput \"Minutes\" model.Minutes Msg.MinuteChange ]\r\n        ]\r\n        columns [\r\n            [   bdSpan [ unbox <| fDt dt]\r\n                unbox \" + \"\r\n                spanTimeDisplay \"day\" model.Days\r\n                unbox \" + \"\r\n                spanTimeDisplay \"hour\" model.Hours\r\n                unbox \" + \"\r\n                spanTimeDisplay \"minute\" model.Minutes\r\n                span [] [unbox \" = \"]\r\n                bdSpan (\r\n                    let evtDt = dt.AddDays(float model.Days).AddHours(float model.Hours).AddMinutes(float model.Minutes)\r\n                    [\r\n                        unbox <| fDt evtDt\r\n                    ]\r\n                )\r\n            ]\r\n        ]\r\n    ]\r\n","module Components.Minions\r\n\r\nopen Components.SharedComponents\r\nopen Elmish\r\nopen Fable.React\r\nopen Fable.React.Props\r\nopen Shared\r\nopen Shared.Helpers\r\nopen SharedComponents.TabLink\r\nopen SkyblockHelper\r\nopen CodeHelpers.FableHelpers\r\n\r\nmodule MinionProduction =\r\n\r\n    type TargetItem = {\r\n        Name:string\r\n        Resource:string\r\n        ResourceAmount: int\r\n    }\r\n\r\n    type Model = {\r\n        Delay:int\r\n        Count:int\r\n        Production:int\r\n        BazaarPlain:float // estimated value to sell in the bazaar\r\n        // ItemCost:int // for later when we allow custom inputs instead of only selecting items\r\n        SelectedItem:TargetItem option\r\n    }\r\n\r\n    type Msg =\r\n        | DelayChange of int\r\n        | CountChange of int\r\n        | ProductionChange of int\r\n        | BazaarChange of float\r\n        | TargetItemChange of TargetItem option\r\n        | ItemNameChange of string\r\n        | ItemResourceNameChange of string\r\n        | ItemResourceAmountChange of int\r\n\r\n    let init : Model = {\r\n            Delay= 26\r\n            Count= 1\r\n            Production= 1\r\n            BazaarPlain= 10.0\r\n            SelectedItem= None\r\n    }\r\n\r\n    let update (msg:Msg) (model:Model): Model * Cmd<Msg> =\r\n        let changeItem f =\r\n            let ti =\r\n                model.SelectedItem\r\n                |> function\r\n                    | None -> {Name=\"\";Resource=\"\";ResourceAmount=0}\r\n                    | Some ti -> ti\r\n                |> f\r\n            {model with SelectedItem = Some ti}\r\n        match msg with\r\n        |DelayChange x ->\r\n            {model with Delay=x}, Cmd.none\r\n        | CountChange x ->\r\n            {model with Count=x}, Cmd.none\r\n        | ProductionChange x ->\r\n            {model with Production=x}, Cmd.none\r\n        | BazaarChange x ->\r\n            {model with BazaarPlain=x}, Cmd.none\r\n        | TargetItemChange ti ->\r\n            {model with SelectedItem=ti}, Cmd.none\r\n        | ItemNameChange x ->\r\n            changeItem (fun ti -> {ti with Name=x}), Cmd.none\r\n        | ItemResourceNameChange x ->\r\n            changeItem (fun ti -> {ti with Resource=x}), Cmd.none\r\n        | ItemResourceAmountChange x ->\r\n            changeItem (fun ti -> {ti with ResourceAmount=x}), Cmd.none\r\n\r\n    module Internals =\r\n        let itemSelector items selectedItemOpt onSelected =\r\n            SelectOpt {|\r\n                        active= selectedItemOpt\r\n                        addedClasses= []\r\n                        emptyLabel= \"Items...\"\r\n                        items= items\r\n                        map= (fun item -> sprintf \"%s(%s)\" item.Name item.Resource)\r\n                        parse= (function\r\n                            | ValueString x ->\r\n                                let name = x.[0..x.IndexOf \"(\" - 1]\r\n                                let resource = x.[x.IndexOf \"(\" + 1 .. x.IndexOf(\")\") - 1]\r\n                                printfn \"Selecting via text %s - %s\" name resource\r\n                                items\r\n                                |> List.tryFind(fun x -> x.Name= name && x.Resource = resource)\r\n                            | _ -> None\r\n                        )\r\n                        onChange= onSelected |}\r\n\r\n        let item name resource amount =\r\n            {\r\n                Name= name\r\n                Resource= resource\r\n                ResourceAmount= amount\r\n            }\r\n\r\n        let targetItems = [\r\n            item \"Leaping Sword\" \"Spider Eye\" 245_760\r\n            item \"Runaan's Bow\" \"Bone\" 30_720\r\n            item \"Runaan's Bow\" \"String\" 36_864\r\n            item \"Treecapitator\" \"Obsidian\" 81_920\r\n        ]\r\n\r\n        let fuelColumn (name:string) unfueledCoins (multiplier:float) durationHr asterisk =\r\n            // per hour\r\n            let fuelproduces = unfueledCoins * multiplier\r\n            let fuelCoinOverage = fuelproduces - unfueledCoins\r\n            let breakeven = fuelCoinOverage * durationHr\r\n            let fuelPercentDisplay = (multiplier - 1.0) * 100.0\r\n\r\n            Fulma.Column.column [][\r\n                span [\r\n                    Class (if String.isValueString asterisk then \"star\" else \"\")\r\n                    Title (sprintf \"break-even point %s\" asterisk)][unbox name]\r\n                span [][\r\n                    unbox (sprintf \"< %.2f then buy.\" breakeven)\r\n                ]\r\n                span [][\r\n                    unbox (sprintf \"%.0f%% fuel makes \" fuelPercentDisplay)\r\n                ]\r\n                unbox <| sprintf \"%.2f coins per hour with %.0f%% fuel. Fuel earns %.1f in 1 hour.\" fuelproduces fuelPercentDisplay fuelCoinOverage\r\n            ]\r\n\r\n        let fuelAnalysis (productionPerHr:float) bazaarPlain =\r\n            let unfueledCoins = productionPerHr * bazaarPlain\r\n            let fuels = [\r\n                \"Coal\", 1.05, 0.5\r\n                \"Block of Coal\", 1.05, 5.0\r\n                \"Enchanted Bread\", 1.05, 12.0\r\n                \"Enchanted Coal\", 1.1, 24.0\r\n                \"Enchanted Charcoal\", 1.2, 36.\r\n                \"Hamster Wheel\", 1.5, 24.\r\n                \"Foul Flesh\", 1.9, 5.\r\n                \"Catalyst\", 2., 3.\r\n            ]\r\n            div[] [\r\n                yield Fulma.Column.column [][\r\n                    unbox <| sprintf \"%.2f items per hour\" productionPerHr\r\n                ]\r\n                yield Fulma.Column.column [][\r\n                    unbox <| sprintf \"%.2f coins per hour\" unfueledCoins\r\n                ]\r\n                yield! (\r\n                    fuels\r\n                    |> List.map(fun (n,m,duration) ->\r\n                        fuelColumn n unfueledCoins m duration \"\"\r\n                    )\r\n                )\r\n            ]\r\n\r\n        [<RequireQualifiedAccess>]\r\n        type ModelPropType =\r\n            | Delay\r\n            | Production\r\n            | BazaarPlain\r\n            | Count\r\n            with\r\n                static member All =\r\n                    [\r\n                        Delay\r\n                        Production\r\n                        BazaarPlain\r\n                        Count\r\n                    ]\r\n\r\n    open Internals\r\n\r\n    let view (model:Model) (dispatch:Msg -> unit) =\r\n        let productionPerHrPerMinion = if model.Delay > 0 then float model.Production * 3600.0 / 2.0 / float model.Delay |> Some else None\r\n        let reqHours =\r\n            match productionPerHrPerMinion,model.SelectedItem with\r\n            | Some prod, Some si when model.Count > 0  ->\r\n                float si.ResourceAmount / (float model.Count * prod)\r\n                |> Some\r\n            | _ -> None\r\n            // model.SelectedItem |> Option.bind(fun si -> if model.Count > 0 then float si.ResourceAmount / float model.Count |> Some else None)\r\n        let reqDays = reqHours |> Option.map(fun hr -> if hr > 24.0 then hr / 24.0 else 0.0)\r\n        div[][\r\n            div [Class \"bd-callout\"](\r\n                let hfield label title value onChange =\r\n                    HField {|\r\n                            label= label\r\n                            title= title\r\n                            input=(fun _cls -> NumberInput {\r\n                                                        Name= \"\"\r\n                                                        Value= Some value\r\n                                                        Placeholder= None\r\n                                                        OnChange= fun nv -> nv.Value |> Option.iter onChange\r\n                                        }\r\n                            )\r\n                    |}\r\n                [\r\n                    hfield \"Delay\" \"How much is the delay between actions for this minion?\" (float model.Delay) (int >> DelayChange >> dispatch)\r\n                    hfield \"Production\"\"How much is produced for each action? (Glowstone, lapis, and others produce more than 1 per action)\"\r\n                        (float model.Production) (int >> ProductionChange >> dispatch)\r\n                    hfield \"Est. Value\" \"How much do you think 1 unit would sell for?\" model.BazaarPlain (BazaarChange >> dispatch)\r\n                    hfield \"Count\" \"How many minions of this tier will you be using?\" (float model.Count) (int >> Msg.CountChange >> dispatch)\r\n                ]\r\n            )\r\n            fuelAnalysis (productionPerHrPerMinion |> Option.defaultValue 0.0) model.BazaarPlain\r\n            hr []\r\n            Fulma.Column.column [][\r\n                itemSelector targetItems model.SelectedItem (Msg.TargetItemChange >> dispatch)\r\n                span[Class \"Span\"][\r\n                    match model.SelectedItem with\r\n                    | None -> ()\r\n                    | Some si -> yield unbox <| sprintf \"%i - %s\" si.ResourceAmount si.Resource\r\n                ]\r\n            ]\r\n            Fulma.Columns.columns [](\r\n                [\r\n                    [\r\n                        match reqDays with\r\n                        | Some reqDays ->\r\n                            yield unbox <| sprintf \" %.1f days \" reqDays\r\n                        | None -> yield unbox \"0 days\"\r\n                        match reqHours with\r\n                        | Some reqHours ->\r\n                            yield unbox <| sprintf \"or %.2f hours\" reqHours\r\n                        | None -> yield unbox \"0 hours\"\r\n                    ]\r\n                ]\r\n                |> List.map (Fulma.Column.column [])\r\n            )\r\n        ]\r\n\r\ntype Submenu =\r\n    | Production\r\n\r\ntype CState = {\r\n    Prod: MinionProduction.Model\r\n}\r\n\r\ntype Model = {\r\n    Submenu: Submenu\r\n    CState: CState\r\n}\r\n\r\ntype ModelVersion =\r\n    | Version1 of MinionProduction.Model\r\n    | Version2\r\n\r\ntype CMsg =\r\n    | ProdMsg of MinionProduction.Msg\r\n\r\ntype Msg =\r\n    | SubmenuChange of Submenu\r\n    | CMsg of CMsg\r\n\r\nlet init initOverride =\r\n    initOverride\r\n    |> Option.defaultValue {\r\n        Submenu= Production\r\n        CState= {\r\n            Prod= MinionProduction.init\r\n        }\r\n    }, Cmd.none\r\n\r\nlet update (msg:Msg) (model:Model) =\r\n    let cLens f fMsg =\r\n        let next, cmd = f model.CState\r\n        {model with CState= next}, cmd |> Cmd.map (fMsg>>Msg.CMsg)\r\n\r\n    match msg with\r\n    | SubmenuChange s ->\r\n        {model with Submenu= s}, Cmd.none\r\n    | CMsg msg ->\r\n        match msg with\r\n        | CMsg.ProdMsg msg ->\r\n            // let next, cmd = MinionProduction.update msg model.CState.Prod\r\n            cLens (fun cs ->\r\n                     let next,cmd = MinionProduction.update msg cs.Prod\r\n                     {cs with Prod= next},cmd\r\n                     )\r\n                ProdMsg\r\n\r\nlet view (props:ThemeProps) (model:Model) (dispatch: Msg -> unit) =\r\n    let tab =\r\n        match model.Submenu with\r\n        | Submenu.Production ->\r\n            MinionProduction.view model.CState.Prod (CMsg.ProdMsg >> Msg.CMsg >> dispatch)\r\n        // | Submenu.Leveling ->\r\n        //     Leveling.view model.CState.Level (CMsg.LevelMsg >> Msg.CMsg >> dispatch)\r\n    div [] [\r\n        TabContainer (Option.ofValueString props.Theme) None (\r\n            [Submenu.Production] |> List.map(fun sm ->\r\n                TabTextLink (string sm) (string model.Submenu |> Some) (fun _ -> Msg.SubmenuChange sm |> dispatch)\r\n            )\r\n        )\r\n        div [Class props.Theme][ tab ]\r\n    ]","module AppDomain.Collections.Pets\r\n\r\nopen Shared.Helpers\r\nopen SkyblockHelper\r\n\r\n// let getXpTo100 =\r\n//     function\r\n//     | Common -> 5_624_785\r\n//     | Uncommon -> 8_644_220\r\n//     | Rare -> 12_626_665\r\n//     | Epic -> 18_608_500\r\n//     | Legendary -> 25_353_2300\r\n\r\ntype Candy =\r\n    | Simple\r\n    | Great\r\n    | Superb\r\n// no Enchanting pets\r\n\r\ntype PetType =\r\n    | Farming\r\n    | Mining\r\n    | Combat\r\n    | Foraging\r\n    | Fishing\r\n    | Alchemy\r\n    with\r\n        static member Humanize : PetType -> string = string\r\n        static member All = [\r\n            Farming\r\n            Mining\r\n            Combat\r\n            Foraging\r\n            Fishing\r\n            Alchemy\r\n        ]\r\n        static member Parse x =\r\n            PetType.All\r\n            |> List.tryPick(flip equalsIStr x)\r\n        // static member Parse =\r\n        //     function\r\n        //     | EqualsIStr Farming x -> x\r\n        //     | EqualsI (string Mining) -> Mining\r\n        //     | EqualsI (string Combat) -> Combat\r\n        //     | EqualsI (string Foraging) -> Foraging\r\n\r\n\r\nlet getLvlXp =\r\n    fun lvl -> lvl + 1\r\n    >> min 100\r\n    >> max 2\r\n    >> function\r\n    | 2 -> [100;175;275;440;660]\r\n    | 3 -> [ 110;190;300;490;730 ]\r\n    | 4 -> [ 120;210;330;540;800 ]\r\n    | 5 -> [ 130;230;360;600;880 ]\r\n    | 6 -> [ 145;250;400;660;960 ]\r\n    | 7 -> [ 160;275;440;730;1_050 ]\r\n    | 8 -> [ 175;300;490;800;1_150 ]\r\n    | 9 -> [ 190;330;540;880;1_260 ]\r\n    | 10 -> [ 210;360;600;960;1_380 ]\r\n    | 11 -> [ 230;400;660;1_050;1_510 ]\r\n    | 12 -> [ 250;440;730;1_150;1_650 ]\r\n    | 13 -> [ 275;490;800;1_260;1_800 ]\r\n    | 14 -> [ 300;540;880;1_380;1_960 ]\r\n    | 15 -> [ 330;600;960;1_510;2_130 ]\r\n    | 16 -> [ 360;660;1_050;1_650;2_310 ]\r\n    | 17 -> [ 400;730;1_150;1_800;2_500 ]\r\n    | 18 -> [ 440;800;1_260;1_960;2_700 ]\r\n    | 19 -> [ 490;880;1_380;2_130;2_920 ]\r\n    | 20 -> [ 540;960;1_510;2_310;3_160 ]\r\n    | 21 -> [ 600;1_050;1_650;2_500;3_420 ]\r\n    | 22 -> [ 660;1_150;1_800;2_700;3_700 ]\r\n    | 23 -> [ 730;1_260;1_960;2_920;4_000 ]\r\n    | 24 -> [ 800;1_380;2_130;3_160;4_350 ]\r\n    | 25 -> [ 880;1_510;2_310;3_420;4_750 ]\r\n    | 26 -> [ 960;1_650;2_500;3_700;5_200 ]\r\n    | 27 -> [ 1_050;1_800;2_700;4_000;5_700 ]\r\n    | 28 -> [ 1_150;1_960;2_920;4_350;6_300 ]\r\n    | 29 -> [ 1_260;2_130;3_160;4_750;7_000 ]\r\n    | 30 -> [ 1_380;2_310;3_420;5_200;7_800 ]\r\n    | 31 -> [ 1_510;2_500;3_700;5_700;8_700 ]\r\n    | 32 -> [ 1_650;2_700;4_000;6_300;9_700 ]\r\n    | 33 -> [ 1_800;2_920;4_350;7_000;10_800 ]\r\n    | 34 -> [ 1_960;3_160;4_750;7_800;12_000 ]\r\n    | 35 -> [ 2_130;3_420;5_200;8_700;13_300 ]\r\n    | 36 -> [ 2_310;3_700;5_700;9_700;14_700 ]\r\n    | 37 -> [ 2_500;4_000;6_300;10_800;16_200 ]\r\n    | 38 -> [ 2_700;4_350;7_000;12_000;17_800 ]\r\n    | 39 -> [ 2_920;4_750;7_800;13_300;19_500 ]\r\n    | 40 -> [ 3_160;5_200;8_700;14_700;21_300 ]\r\n    | 41 -> [ 3_420;5_700;9_700;16_200;23_200 ]\r\n    | 42 -> [ 3_700;6_300;10_800;17_800;25_200 ]\r\n    | 43 -> [ 4_000;7_000;12_000;19_500;27_400 ]\r\n    | 44 -> [ 4_350;7_800;13_300;21_300;29_800 ]\r\n    | 45 -> [ 4_750;8_700;14_700;23_200;32_400 ]\r\n    | 46 -> [ 5_200;9_700;16_200;25_200;35_200 ]\r\n    | 47 -> [ 5_700;10_800;17_800;27_400;38_200 ]\r\n    | 48 -> [ 6_300;12_000;19_500;29_800;41_400 ]\r\n    | 49 -> [ 7_000;13_300;21_300;32_400;44_800 ]\r\n    | 50 -> [ 7_800;14_700;23_200;35_200;48_400 ]\r\n    | 51 -> [ 8_700;16_200;25_200;38_200;52_200 ]\r\n    | 52 -> [ 9_700;17_800;27_400;41_400;56_200 ]\r\n    | 53 -> [ 10_800;19_500;29_800;44_800;60_400 ]\r\n    | 54 -> [ 12_000;21_300;32_400;48_400;64_800 ]\r\n    | 55 -> [ 13_300;23_200;35_200;52_200;69_400 ]\r\n    | 56 -> [ 14_700;25_200;38_200;56_200;74_200 ]\r\n    | 57 -> [ 16_200;27_400;41_400;60_400;79_200 ]\r\n    | 58 -> [ 17_800;29_800;44_800;64_800;84_700 ]\r\n    | 59 -> [ 19_500;32_400;48_400;69_400;90_700 ]\r\n    | 60 -> [ 21_300;35_200;52_200;74_200;97_200 ]\r\n    | 61 -> [ 23_200;38_200;56_200;79_200;104_200 ]\r\n    | 62 -> [ 25_200;41_400;60_400;84_700;111_700 ]\r\n    | 63 -> [ 27_400;44_800;64_800;90_700;119_700 ]\r\n    | 64 -> [ 29_800;48_400;69_400;97_200;128_200 ]\r\n    | 65 -> [ 32_400;52_200;74_200;104_200;137_200 ]\r\n    | 66 -> [ 35_200;56_200;79_200;111_700;146_700 ]\r\n    | 67 -> [ 38_200;60_400;84_700;119_700;156_700 ]\r\n    | 68 -> [ 41_400;64_800;90_700;128_200;167_700 ]\r\n    | 69 -> [ 44_800;69_400;97_200;137_200;179_700 ]\r\n    | 70 -> [ 48_400;74_200;104_200;146_700;192_700 ]\r\n    | 71 -> [ 52_200;79_200;111_700;156_700;206_700 ]\r\n    | 72 -> [ 56_200;84_700;119_700;167_700;221_700 ]\r\n    | 73 -> [ 60_400;90_700;128_200;179_700;237_700 ]\r\n    | 74 -> [ 64_800;97_200;137_200;192_700;254_700 ]\r\n    | 75 -> [ 69_400;104_200;146_700;206_700;272_700 ]\r\n    | 76 -> [ 74_200;111_700;156_700;221_700;291_700 ]\r\n    | 77 -> [ 79_200;119_700;167_700;237_700;311_700 ]\r\n    | 78 -> [ 84_700;128_200;179_700;254_700;333_700 ]\r\n    | 79 -> [ 90_700;137_200;192_700;272_700;357_700 ]\r\n    | 80 -> [ 97_200;146_700;206_700;291_700;383_700 ]\r\n    | 81 -> [ 104_200;156_700;221_700;311_700;411_700 ]\r\n    | 82 -> [ 111_700;167_700;237_700;333_700;441_700 ]\r\n    | 83 -> [ 119_700;179_700;254_700;357_700;476_700 ]\r\n    | 84 -> [ 128_200;192_700;272_700;383_700;516_700 ]\r\n    | 85 -> [ 137_200;206_700;291_700;411_700;561_700 ]\r\n    | 86 -> [ 146_700;221_700;311_700;441_700;611_700 ]\r\n    | 87 -> [ 156_700;237_700;333_700;476_700;666_700 ]\r\n    | 88 -> [ 167_700;254_700;357_700;516_700;726_700 ]\r\n    | 89 -> [ 179_700;272_700;383_700;561_700;791_700 ]\r\n    | 90 -> [ 192_700;291_700;411_700;611_700;861_700 ]\r\n    | 91 -> [ 206_700;311_700;441_700;666_700;936_700 ]\r\n    | 92 -> [ 221_700;333_700;476_700;726_700;1_016_700 ]\r\n    | 93 -> [ 237_700;357_700;516_700;791_700;1_101_700 ]\r\n    | 94 -> [ 254_700;383_700;561_700;861_700;1_191_700 ]\r\n    | 95 -> [ 272_700;411_700;611_700;936_700;1_286_700 ]\r\n    | 96 -> [ 291_700;441_700;666_700;1_016_700;1_386_700 ]\r\n    | 97 -> [ 311_700;476_700;726_700;1_101_700;1_496_700 ]\r\n    | 98 -> [ 333_700;516_700;791_700;1_191_700;1_616_700 ]\r\n    | 99 -> [ 357_700;561_700;861_700;1_286_700;1_746_700 ]\r\n    | 100 -> [ 383_700;611_700;936_700;1_386_700;1_886_700 ]\r\n    | x -> failwithf \"Invalid level target %i\" x\r\n    >> (fun lvls r ->\r\n        match r with\r\n        | Rarity.Common -> lvls.[0]\r\n        | Uncommon -> lvls.[1]\r\n        | Rare -> lvls.[2]\r\n        | Epic -> lvls.[3]\r\n        | Legendary -> lvls.[4]\r\n    )","namespace Fulma\r\n\r\nopen Fulma\r\nopen Fable.React\r\nopen Fable.React.Props\r\n\r\n[<RequireQualifiedAccess>]\r\nmodule Label =\r\n\r\n    type Option =\r\n        | Size of ISize\r\n        /// Set `For` HTMLAttr\r\n        | For of string\r\n        | CustomClass of string\r\n        | Props of IHTMLProp list\r\n        | Modifiers of Modifier.IModifier list\r\n\r\n    /// Generate <label class=\"label\"></label>\r\n    let label options children =\r\n        let parseOptions (result : GenericOptions) option =\r\n            match option with\r\n            | Size size -> ofSize size |> result.AddClass\r\n            | For htmlFor -> HtmlFor htmlFor |> result.AddProp\r\n            | Props props -> result.AddProps props\r\n            | CustomClass customClass -> result.AddClass customClass\r\n            | Modifiers modifiers -> result.AddModifiers modifiers\r\n\r\n        GenericOptions.Parse(options, parseOptions, \"label\").ToReactElement(label, children)\r\n","namespace Fulma\r\n\r\nopen Fulma\r\nopen Fable.React\r\nopen Fable.React.Props\r\n\r\n[<RequireQualifiedAccess>]\r\nmodule Container =\r\n\r\n    type Option =\r\n        /// Add `is-fluid` class\r\n        | [<CompiledName(\"is-fluid\")>] IsFluid\r\n        /// Add `is-widescreen` class\r\n        | [<CompiledName(\"is-widescreen\")>] IsWideScreen\r\n        /// Add `is-fullhd` class\r\n        | [<CompiledName(\"is-fullhd\")>] IsFullHD\r\n        | Props of IHTMLProp list\r\n        | CustomClass of string\r\n        | Modifiers of Modifier.IModifier list\r\n\r\n    /// Generate <div class=\"container\"></div>\r\n    let container (options: Option list) children =\r\n        let parseOptions (result : GenericOptions) option =\r\n            match option with\r\n            | IsFluid\r\n            | IsWideScreen\r\n            | IsFullHD -> result.AddCaseName option\r\n            | Props props -> result.AddProps props\r\n            | CustomClass customClass -> result.AddClass customClass\r\n            | Modifiers modifiers -> result.AddModifiers modifiers\r\n\r\n        GenericOptions.Parse(options, parseOptions, \"container\").ToReactElement(div, children)\r\n","module Components.Pets\r\nopen AppDomain.Collections.Pets\r\nopen Shared.Helpers\r\nopen SkyblockHelper\r\nopen Elmish\r\nopen Fulma\r\nopen Fable.React.Helpers\r\nopen Fable.React.Props\r\nopen Components.SharedComponents\r\nopen Fable.React.Standard\r\nopen CodeHelpers.FableHelpers\r\n\r\n\r\nmodule Leveling =\r\n\r\n    type CountMode =\r\n        | Individual\r\n        | Cumulative\r\n        with\r\n            static member All =\r\n                [\r\n                    Individual\r\n                    Cumulative\r\n                ]\r\n            static member Humanize:CountMode -> string = string\r\n            static member Parse =\r\n                function\r\n                | EqualsI (string Individual) -> Some Individual\r\n                | EqualsI (string Cumulative) -> Some Cumulative\r\n                | _ -> None\r\n    type LevelMode =\r\n        | Xp\r\n        // PerLevel\r\n        // | Cumulative\r\n        | Zealots // https://hypixel-skyblock.fandom.com/wiki/Combat\r\n        | Pumpkins\r\n        | Candies\r\n        with\r\n            static member All =\r\n                [\r\n                    // PerLevel\r\n                    // Cumulative\r\n                    Xp\r\n                    Zealots\r\n                    Pumpkins\r\n                    Candies\r\n                ]\r\n            static member Humanize : LevelMode -> string = string\r\n            static member Parse x =\r\n                LevelMode.All\r\n                |> List.tryPick(flip equalsIStr x)\r\n\r\n\r\n\r\n    type Model = {\r\n        LevelMode: LevelMode option\r\n        CountMode: CountMode option\r\n        PetType: PetType option\r\n        Lvl: int\r\n        Rarity: Rarity\r\n        Candies: Candy list\r\n    }\r\n\r\n    type Msg =\r\n        | LvlChange of int\r\n        | RarityChange of Rarity\r\n        | LevelModeChange of LevelMode\r\n        | CountModeChange of CountMode\r\n        | PetTypeChange of PetType\r\n    let private defaultLevelMode = LevelMode.Xp\r\n    let private defaultCountMode = CountMode.Individual\r\n\r\n    let init initOverride :Model*Cmd<Msg>=\r\n        initOverride\r\n        |> Option.defaultValue {\r\n            LevelMode= Some defaultLevelMode\r\n            CountMode= Some defaultCountMode\r\n            Lvl= 1\r\n            PetType= Some Combat\r\n            Rarity= Epic\r\n            Candies= List.empty\r\n        }, Cmd.none\r\n\r\n    let update msg model =\r\n        match msg with\r\n        | LvlChange i ->\r\n            {model with Lvl= i}, Cmd.none\r\n        | RarityChange r ->\r\n            {model with Rarity= r}, Cmd.none\r\n        | LevelModeChange lm ->\r\n            {model with LevelMode= Some lm}, Cmd.none\r\n        | CountModeChange cm ->\r\n            {model with CountMode= Some cm}, Cmd.none\r\n        | PetTypeChange pt ->\r\n            {model with PetType= Some pt}, Cmd.none\r\n\r\n    let view (model:Model) dispatch =\r\n        let inline cMine sz attr children =\r\n            Fulma.Column.column (\r\n                Fulma.Column.Option.Width(Fulma.Screen.All, sz)::attr)\r\n                    children\r\n\r\n        let inline c15 attr children = cMine Fulma.Column.Is1 attr children\r\n\r\n        Section.section [] [\r\n            Fulma.Columns.columns [][\r\n                cMine Fulma.Column.Is2 [] [\r\n                    Fulma.Label.label[][\r\n                        str \"Rarity\"\r\n                    ]\r\n                    Fulma.Select.select [] [\r\n                        Select {|\r\n                                active= model.Rarity\r\n                                addedClasses= List.empty\r\n                                items= Rarity.All\r\n                                map= Rarity.Humanize\r\n                                parse= Rarity.Parse\r\n                                onChange= Msg.RarityChange >> dispatch\r\n                        |}\r\n                    ]\r\n                ]\r\n                cMine Fulma.Column.Is2 [] [\r\n                    Fulma.Label.label[][\r\n                        str \"Type\"\r\n                    ]\r\n                    Fulma.Select.select [] [\r\n                        Select {|\r\n                                active= model.PetType |> Option.defaultValue Combat\r\n                                addedClasses= List.empty\r\n                                items= PetType.All\r\n                                map= PetType.Humanize\r\n                                parse= PetType.Parse\r\n                                onChange= Msg.PetTypeChange >> dispatch\r\n                        |}\r\n                    ]\r\n                ]\r\n                c15 [] [\r\n                    Fulma.Label.label[][\r\n                        str \"Level\"\r\n                    ]\r\n                    Fulma.Input.number [\r\n                        Fulma.Input.Option.Props [ Min 1;Max 100 ]\r\n                        Fulma.Input.DefaultValue <| string (min model.Lvl 100 |> max 1)\r\n                        Fulma.Input.OnChange (getEvValue >> tryParseInt >> Option.iter( Msg.LvlChange >> dispatch))]\r\n                ]\r\n                // c15 [Fulma.Column.Props [Title \"Candies already used\"]] [\r\n                //     Fulma.Label.label[][ str \"Candies\" ]\r\n                //     Fulma.Input.number [\r\n                //         Fulma.Input.Option.Props [ Min 1;Max 10 ]\r\n                //         Fulma.Input.DefaultValue <| string model.Candies\r\n                //         Fulma.Input.OnChange (getEvValue >> tryParseInt >> Option.iter( Msg.LvlChange >> dispatch))]\r\n                // ]\r\n            ]\r\n\r\n            Fulma.Container.container [][\r\n                Fulma.Notification.notification [][\r\n                    ul[][\r\n                        let currentXp =\r\n                            [2..model.Lvl ] |> List.sumBy(fun i -> getLvlXp (i-1) model.Rarity)\r\n                        let xpTo100 =\r\n                            if model.Lvl < 100 then\r\n                                [ model.Lvl .. 99 ]\r\n                                |> List.sumBy(fun i -> getLvlXp i model.Rarity)\r\n                            else 0\r\n                        printfn \"Lvl: %i - Current:%i -> to 100 current: %i\" model.Lvl currentXp xpTo100\r\n                        yield li [] [\r\n                            yield\r\n                                currentXp\r\n                                |> float\r\n                                |> formatNumber (Some 0)\r\n                                |> sprintf \"Current Cumulative Xp: %s\"\r\n                                |> str\r\n                        ]\r\n                        match model.Lvl with\r\n                        | x when x > 0 && x < 101 ->\r\n                            // xp to next level\r\n                            yield\r\n                                getLvlXp model.Lvl model.Rarity\r\n                                |> formatInt\r\n                                |> sprintf \"Xp to %i - %s\" (model.Lvl+1)\r\n                                |> str\r\n                                |> List.singleton\r\n                                |> li []\r\n                            if xpTo100 > 0 && model.Lvl < 99 then\r\n                                yield\r\n                                    xpTo100\r\n                                    |> formatInt\r\n                                    |> sprintf \"Xp to 100 : %s\" \r\n                                    |> str\r\n                                    |> List.singleton\r\n                                    |> li []\r\n                            // if x < 100 || model.Rarity <> Legendary then\r\n                            //     // needs work\r\n                            //     yield\r\n                            //         [ model.Lvl + 1 .. 100 ]\r\n                            //         |> List.sumBy(fun i -> getLvlXp i Legendary)\r\n                            //         |> formatInt\r\n                            //         |> sprintf \"Xp to Legendary 100: %s\"\r\n                            //         |> str\r\n                            //         |> List.singleton\r\n                            //         |> li []\r\n\r\n\r\n                                ()\r\n                        | _ -> ()\r\n\r\n                        // xp to level 100 as same rarity\r\n                        // xp to level 100 as legendary\r\n                    ]\r\n                ]\r\n            ]\r\n            Fulma.Container.container [][\r\n                yield Select {|\r\n                                active= model.LevelMode |> Option.defaultValue defaultLevelMode\r\n                                addedClasses= List.empty\r\n                                items= LevelMode.All\r\n                                map= LevelMode.Humanize\r\n                                parse= LevelMode.Parse\r\n                                onChange= (Msg.LevelModeChange >> dispatch)\r\n                |}\r\n                yield Select {|\r\n                                active= model.CountMode |> Option.defaultValue defaultCountMode\r\n                                addedClasses= List.empty\r\n                                items= CountMode.All\r\n                                map= CountMode.Humanize\r\n                                parse= CountMode.Parse\r\n                                onChange= (Msg.CountModeChange >> dispatch)\r\n                |}\r\n                let titleColumn x = Fulma.Column.column [][ str x ]\r\n                let createTable title f = [\r\n                    yield Fulma.Heading.h2 [] [ str title ] // \"Xp Per Level\"\r\n                    yield Fulma.Columns.columns[][\r\n                        titleColumn \"Level\"\r\n                        titleColumn \"Common\"\r\n                        titleColumn \"Uncommon\"\r\n                        titleColumn \"Rare\"\r\n                        titleColumn \"Epic\"\r\n                        titleColumn \"Legendary\"\r\n                    ]\r\n                    yield! [1..100]\r\n                    |> List.map(fun i ->\r\n                        Fulma.Columns.columns[][\r\n                                    yield Fulma.Column.column [][\r\n                                        str <| sprintf \"Level %i\" i\r\n                                    ]\r\n                                    yield!\r\n                                        Rarity.All\r\n                                        |> List.rev\r\n                                        |> List.map(fun r ->\r\n                                            f r i\r\n                                            // match i with\r\n                                            // | 1 -> 0\r\n                                            // | x -> getLvlXp (i-1) r\r\n                                            // |> formatInt\r\n                                            |> str\r\n                                            |> List.singleton\r\n                                            |> Fulma.Column.column []\r\n                                        )\r\n                        ]\r\n                    )\r\n                ]\r\n                let xpformatting divisor = formatNumber (Some <| if divisor > 1000.0 then 4 elif divisor > 100.0 then 3 elif divisor > 1.0 then 2 else 0)\r\n                let createIndiTable title divisor =\r\n                    createTable title (fun r i ->\r\n                        match i with\r\n                        | 1 -> 0.0\r\n                        | _ ->\r\n                            let x = getLvlXp (i-1) r\r\n                            float x / divisor\r\n                        // |> formatNumber (Some <| if divisor > 1.0 then 2 else 0)\r\n                        |> xpformatting divisor\r\n                    )\r\n                let createCumTable title divisor =\r\n                    createTable title (fun r i ->\r\n                        match i with\r\n                        | 1 -> 0.0\r\n                        | _ ->\r\n                            [2..i]\r\n                            |> List.sumBy (fun i -> getLvlXp (i-1) r)\r\n                            |> float\r\n                            |> fun x -> x / divisor\r\n                        |> xpformatting divisor\r\n                    )\r\n\r\n                let candyValue = 500_000\r\n                let getXp t fullValue fmt =\r\n                    let xp =\r\n                        match model.PetType with\r\n                        | Some t' when t' = t -> fullValue\r\n                        | _ -> fullValue * 0.25\r\n                    let txt =\r\n                        xp\r\n                        |> formatNumber (Some 0)\r\n                        |> sprintf fmt\r\n                    txt,xp\r\n                yield!\r\n                    match model.LevelMode, model.CountMode with\r\n                    | _, None\r\n                    | None, _ ->\r\n                        printfn \"modes: %A, %A\" model.LevelMode model.CountMode\r\n                        [div[][ str \"No level mode found\"]]\r\n                    | Some x, Some Cumulative ->\r\n                        match x with\r\n                        | Zealots ->\r\n                            getXp Combat 40.0 \"Levels by Zealot kills(@%s xp per)\"\r\n                        | Pumpkins ->\r\n                            getXp Farming 4.5 \"Levels by Pumpkin farming(@%s xp per)\"\r\n                        | Xp -> \"Levels by Accumulated Xp\", 1.0\r\n                        | Candies -> \"Levels by Accumulated Candy\", float candyValue\r\n                        |> fun (t,d) -> createCumTable t d\r\n                    | Some x, Some Individual ->\r\n                        match x with\r\n                        | Zealots -> getXp Combat 40.0 \"Levels by Zealot kills(@%s xp per)\"\r\n                        | Xp -> \"Xp Per Level\",1.0\r\n                        | Pumpkins -> getXp Farming 4.5 \"Levels by Pumpkin farming(@%s xp per)\"\r\n                        | Candies ->\r\n                            sprintf \"Superb Per Level(@%s per)\" (formatInt candyValue),float candyValue\r\n                        |> fun (t,d) -> createIndiTable t d\r\n\r\n                    // | Some l, Some c -> [ div [] [str <| sprintf \"not implemented %A,%A\" l c]]\r\n            ]\r\n        ]\r\n\r\n// | CMsg.LevelMsg msg ->\r\n//     cLens (fun cs ->\r\n//             let next,cmd = Leveling.update msg cs.Level\r\n//             {cs with Level= next}, cmd\r\n//             ) LevelMsg","module BrowserStorage\r\n\r\nopen Fable.Import\r\nopen CodeHelpers.FableHelpers\r\nopen Fable.Core\r\n\r\nmodule internal Impl =\r\n    let localStorage = Browser.Dom.self.localStorage\r\n\r\nopen Impl\r\ntype Internal =\r\n    // let private localStorage = Browser.Dom.self.localStorage\r\n    // let private json = Fable.Core.JS.JSON\r\n    static member inline TryGet<'t when 't : equality > (key) : 't option =\r\n        localStorage.getItem key\r\n        |> Option.ofObj\r\n        |> Option.bind (fun x ->\r\n                // printfn \"Found %s -> %s\" key s\r\n                let result:'t option =\r\n                    // Thoth.Json.Decode.Auto.fromString s\r\n                    Resolver.Deserialize(x)\r\n                    // json.parse(s)\r\n                    // |> unbox\r\n                result\r\n            )\r\n\r\n    static member inline TrySave (key:string, valueOpt: 't option) : Result<unit,string> =\r\n        printfn \"trying to save\"\r\n        try\r\n            // let pojo = Fable.Core.JsInterop.toPlainJsObj value\r\n            let serial =\r\n                match valueOpt with\r\n                | Some (value: 't) ->\r\n                    let stringy = Resolver.Serialize(value)\r\n                    stringy\r\n                | None -> null\r\n            // let serial = json.Resolver.serialize pojo\r\n            printfn \"Saving to key %s\" key\r\n\r\n            localStorage.setItem(key,serial)\r\n            // printfn \"Saved -> %s\" serial\r\n            Ok ()\r\n        with ex ->\r\n            toGlobal \"self\" Browser.Dom.self\r\n            Error(ex.Message)\r\n\r\n// assumes we never want to clear a key entirely\r\ntype StorageAccess<'t when 't : equality >(name) =\r\n    static member CreateStorage (name) = StorageAccess(name)\r\n    member inline _.Get() =  Internal.TryGet<'t>(name)\r\n    member inline _.Save(x:'t option) = Internal.TrySave (name,x)\r\n\r\n// perf? -> in the interest of not writing a singleton or enforcing one, we'll fetch from localstorage on each operation\r\ntype LookupStorage<'tvalue when 'tvalue : equality >(key) =\r\n    let storage : StorageAccess<(string*'tvalue)[]> = StorageAccess.CreateStorage key\r\n    do\r\n        toGlobal (sprintf \"storage_%s\" key) storage\r\n\r\n    member inline __.Get():Map<string,'tvalue>=\r\n        storage.Get()\r\n        |> Option.defaultValue Array.empty\r\n        |> Map.ofArray\r\n\r\n    member inline __.ToGlobal() =\r\n        storage.Get()\r\n        |> toGlobal (sprintf \"%sMap\" key)\r\n\r\n    member inline x.TryFind key: 'tvalue option =\r\n        x.Get()\r\n        |> Map.tryFind key\r\n\r\n    member inline x.Save(key,value) =\r\n        x.Get()\r\n        |> Map.add key value\r\n        |> Map.toArray\r\n        |> Some\r\n        |> storage.Save\r\n\r\n    member inline x.Remove key =\r\n        x.Get()\r\n        |> Map.remove key\r\n        |> Map.toArray\r\n        |> Some\r\n        |> storage.Save\r\n\r\ntype IStorageAccess =\r\n    abstract member Create<'t when 't : equality> : key:string -> StorageAccess<'t>\r\n","module Index\r\n\r\nopen Elmish\r\n\r\nopen Elmish.React\r\nopen Fable.Core.JsInterop\r\nopen Fable.Import\r\nopen Fable.FontAwesome\r\nopen Fable.React\r\nopen Fable.React.Props\r\nopen Fulma\r\n\r\nopen Shared\r\nopen Shared.Helpers\r\nopen CodeHelpers.FableHelpers\r\n\r\n\r\nopen SkyblockHelper\r\nopen Components.SharedComponents\r\nopen Components.SharedComponents.TabLink\r\n\r\nlet private debug = false\r\n\r\ntype Component =\r\n    | ApiExperiment\r\n    | Bazaar\r\n    | Brewing\r\n    | Collections\r\n    | Damage\r\n    | Enchanting\r\n    | EventCalc\r\n    | Minions\r\n    | Pets\r\n\r\n    with\r\n        static member All =\r\n            [\r\n                ApiExperiment\r\n                Bazaar\r\n                Brewing\r\n                Enchanting\r\n                EventCalc\r\n                Minions\r\n                Collections\r\n                Damage\r\n                Pets\r\n            ]\r\n\r\ntype ComponentStates = {\r\n    Api : Components.Api.Model\r\n    Bazaar: Components.Bazaar.Model\r\n    Brewing: Components.Brewing.Model\r\n    Collections: Components.Collections.Component.Model\r\n    Damage: Components.Damage.Model\r\n    Enchanting: Components.Enchanting.Model\r\n    EventCalc: Components.EventCalc.Model\r\n    Mins: Components.Minions.Model\r\n    Pets: Components.Pets.Leveling.Model\r\n}\r\n\r\ntype State = {\r\n    ActiveTab: Component\r\n    ShowTextMenus: bool\r\n    Theme: string\r\n}\r\n\r\ntype Model = {\r\n    ComponentStates: ComponentStates\r\n    AppState:State\r\n}\r\n\r\n// The Msg type defines what events/actions can occur while the application is running\r\n// the state of the application changes *only* in reaction to these events\r\n\r\ntype ComponentMsg =\r\n    | ApiMsg of Components.Api.Msg\r\n    | BazMsg of Components.Bazaar.Msg\r\n    | BrewMsg of Components.Brewing.Msg\r\n    | CollMsg of Components.Collections.Component.Msg\r\n    | DmgMsg of Components.Damage.Msg\r\n    | EnchMsg of Components.Enchanting.Msg\r\n    | EvtMsg of Components.EventCalc.Msg\r\n    | MinMsg of Components.Minions.Msg\r\n    | PetMsg of Components.Pets.Leveling.Msg\r\n\r\ntype Msg =\r\n    | TabChange of Component\r\n    | ThemeChange of string option\r\n    | TextMenuChange\r\n    | CMsg of ComponentMsg\r\n\r\n#if DEBUG\r\n// model, msg, init, update\r\n[<RequireQualifiedAccess>]\r\ntype InitType<'tState,'tInit,'tMsg> =\r\n    | Value of 'tState*Cmd<'tMsg>\r\n    | Method of ('tInit -> 'tState*Cmd<'tMsg>)\r\n\r\ntype SubComponent<'tProps,'tState,'tMsg, 'tInit> = {\r\n    Wrapper: 'tMsg -> Msg\r\n    Init: InitType<'tState,'tInit,'tMsg>\r\n    View: 'tProps -> 'tState -> ('tMsg -> unit) -> ReactElement\r\n    Update: 'tMsg -> 'tState -> 'tState * Cmd<'tMsg>\r\n}\r\n\r\nlet subcomponents x =\r\n    match x with\r\n    | ApiExperiment _ ->\r\n        {\r\n            Wrapper= ApiMsg >> CMsg\r\n            Init= InitType.Method Components.Api.init\r\n            View= fun _ -> Components.Api.view // ignore 'props\r\n            Update= Components.Api.update\r\n        }\r\n        |> ignore\r\n    | Bazaar ->\r\n        {\r\n            Wrapper= BazMsg >> CMsg\r\n            Init= InitType.Method Components.Bazaar.init\r\n            View= Components.Bazaar.view\r\n            Update= Components.Bazaar.update\r\n        }\r\n        |> ignore\r\n    | Brewing ->\r\n        {\r\n            Wrapper= BrewMsg >> CMsg\r\n            Init= InitType.Method Components.Brewing.init\r\n            View= Components.Brewing.view\r\n            Update= Components.Brewing.update\r\n        }\r\n        |> ignore\r\n    | Collections ->\r\n        {\r\n            Wrapper = CollMsg >> CMsg\r\n            Init= InitType.Method Components.Collections.Component.init\r\n            View= Components.Collections.Component.view\r\n            Update= Components.Collections.Component.update\r\n        }\r\n        |> ignore\r\n    | Damage ->\r\n        {\r\n            Wrapper= DmgMsg >> CMsg\r\n            Init= InitType.Method Components.Damage.init\r\n            View= Components.Damage.view\r\n            Update= Components.Damage.update\r\n        }\r\n        |> ignore\r\n    | Enchanting ->\r\n        {\r\n            Wrapper = EnchMsg >> CMsg\r\n            Init= InitType.Method Components.Enchanting.init\r\n            View= Components.Enchanting.view\r\n            Update= Components.Enchanting.update\r\n        }\r\n        |> ignore\r\n    | EventCalc ->\r\n        {\r\n            Wrapper= EvtMsg >> CMsg\r\n            Init= InitType.Method Components.EventCalc.init\r\n            View= Components.EventCalc.view\r\n            Update= Components.EventCalc.update\r\n        }\r\n        |> ignore\r\n    | Minions ->\r\n        {\r\n            Wrapper= MinMsg >> CMsg\r\n            Init= InitType.Method Components.Minions.init\r\n            View= Components.Minions.view\r\n            Update= Components.Minions.update\r\n        }\r\n        |> ignore\r\n    | Pets ->\r\n        {\r\n            Wrapper= PetMsg >> CMsg\r\n            Init= InitType.Method Components.Pets.Leveling.init\r\n            View= fun _ -> Components.Pets.Leveling.view\r\n            Update= Components.Pets.Leveling.update\r\n        }\r\n        |> ignore\r\n\r\n\r\n#endif\r\n\r\nmodule Storage =\r\n    open BrowserStorage\r\n    let app : StorageAccess<State> =  BrowserStorage.StorageAccess.CreateStorage \"AppState\"\r\n    let api = BrowserStorage.StorageAccess.CreateStorage \"AppState_Api\"\r\n    let baz = BrowserStorage.StorageAccess.CreateStorage \"AppState_Bazaar\"\r\n    let brew = BrowserStorage.StorageAccess.CreateStorage \"AppState_Brew\"\r\n    let coll = BrowserStorage.StorageAccess.CreateStorage \"AppState_Coll\"\r\n    let dmg = BrowserStorage.StorageAccess.CreateStorage \"AppState_Dmg\"\r\n    let ench = BrowserStorage.StorageAccess.CreateStorage \"AppState_Ench\"\r\n    let evt = StorageAccess.CreateStorage \"AppState_Evt\"\r\n    let minio = StorageAccess.CreateStorage \"AppState_Minions\"\r\n    let pet = StorageAccess.CreateStorage \"AppState_Pet\"\r\n\r\nlet init () =\r\n    let inline mapCmd title (wrapper: _ -> Msg) (cmd1:Cmd<Msg>) init fOverride : 't * Cmd<Msg> =\r\n        let m,cmd =\r\n            try\r\n                fOverride()\r\n            with ex ->\r\n                eprintfn \"Failed to deserialize for %s: %s\" title ex.Message\r\n                None\r\n            |> init\r\n\r\n        m, cmd |> Cmd.map wrapper |> List.append cmd1\r\n\r\n    let api, cmd = mapCmd \"ApiInit\" (ApiMsg>>CMsg) Cmd.none Components.Api.init Storage.api.Get\r\n    let baz,cmd = mapCmd \"BazaarInit\" (BazMsg>>CMsg) cmd Components.Bazaar.init Storage.baz.Get\r\n    let brew,cmd = mapCmd \"BrewInit\" (BrewMsg>>CMsg) cmd Components.Brewing.init Storage.brew.Get\r\n    let coll, cmd = mapCmd \"CollectionInit\" (CollMsg>>CMsg) cmd Components.Collections.Component.init Storage.coll.Get\r\n    let dmg, cmd = mapCmd \"DamageInit\" (DmgMsg>>CMsg) cmd Components.Damage.init Storage.dmg.Get\r\n    let ench,cmd = mapCmd \"EnchantingInit\" (EnchMsg>>CMsg) cmd Components.Enchanting.init Storage.ench.Get\r\n    let evt,cmd = mapCmd \"EventInit\" (EvtMsg>>CMsg) cmd Components.EventCalc.init Storage.evt.Get\r\n    let minio, cmd = mapCmd \"MinsInit\" (MinMsg>>CMsg) cmd Components.Minions.init Storage.minio.Get\r\n    let pet, cmd = mapCmd \"PetsInit\" (PetMsg>>CMsg) cmd Components.Pets.Leveling.init Storage.pet.Get\r\n    let app =\r\n        Storage.app.Get()\r\n        |> function\r\n            | Some x -> x\r\n            | None ->\r\n                eprintfn \"init: no stored site\"\r\n                { ActiveTab= Bazaar; ShowTextMenus= false; Theme= \"\"}\r\n    if debug then Fable.Core.JS.console.log(\"starting up app with state\", Resolver.Serialize app)\r\n\r\n    let model =\r\n        {   AppState = app\r\n            ComponentStates= {\r\n                            Api = api\r\n                            Bazaar= baz\r\n                            Brewing= brew\r\n                            Collections= coll\r\n                            Damage= dmg\r\n                            Enchanting= ench\r\n                            EventCalc= evt\r\n                            Mins= minio\r\n                            Pets= pet\r\n            }\r\n        }\r\n    // Fable.Core.JS.console.log(\"starting up app with comstate\", model.ComponentStates)\r\n    model,cmd\r\n\r\nlet updateC msg cs =\r\n    let inline fRegular fu msg model save fmsg fmodel =\r\n        let next,cmd = fu msg model\r\n        Some next\r\n        |> save\r\n        |> ignore\r\n        fmodel cs next, cmd |> Cmd.map fmsg\r\n\r\n    match msg with\r\n    | ApiMsg msg ->\r\n        fRegular Components.Api.update msg cs.Api Storage.api.Save\r\n            ApiMsg\r\n            <| fun model next -> {model with Api= next}\r\n    | BazMsg msg ->\r\n        fRegular Components.Bazaar.update msg cs.Bazaar Storage.baz.Save\r\n            BazMsg\r\n            <| fun model next -> {model with Bazaar= next}\r\n    | BrewMsg msg ->\r\n        fRegular Components.Brewing.update msg cs.Brewing Storage.brew.Save\r\n            BrewMsg\r\n            <| fun model next -> {model with Brewing= next}\r\n    | CollMsg msg ->\r\n        fRegular Components.Collections.Component.update msg cs.Collections Storage.coll.Save\r\n            CollMsg\r\n            <| fun model next -> {model with Collections= next}\r\n    | DmgMsg msg ->\r\n        fRegular Components.Damage.update msg cs.Damage Storage.dmg.Save\r\n            DmgMsg\r\n            <| fun model next -> {model with Damage= next}\r\n    | EnchMsg msg ->\r\n        fRegular Components.Enchanting.update msg cs.Enchanting Storage.ench.Save\r\n            EnchMsg\r\n            <| fun model next -> {model with Enchanting= next}\r\n    | EvtMsg msg ->\r\n        fRegular Components.EventCalc.update msg cs.EventCalc Storage.evt.Save\r\n            EvtMsg\r\n            <| fun model next -> {model with EventCalc= next}\r\n    | MinMsg msg ->\r\n        fRegular Components.Minions.update msg cs.Mins Storage.minio.Save\r\n            MinMsg\r\n            <| fun model next -> {model with Mins= next}\r\n    | PetMsg msg ->\r\n        fRegular Components.Pets.Leveling.update msg cs.Pets Storage.pet.Save\r\n            PetMsg\r\n            <| fun model next -> {model with Pets= next}\r\n\r\n\r\nlet update (msg:Msg) (model:Model) =\r\n    let lensState f =\r\n        let next = f model.AppState\r\n        Storage.app.Save (Some next)\r\n        |> function\r\n            | Ok () -> ()\r\n            | Error e ->\r\n                eprintfn \"Storage failed\"\r\n        {model with AppState= next}\r\n    match msg with\r\n    | TabChange c ->\r\n        lensState (fun s -> {s with ActiveTab= c}), Cmd.none\r\n    | ThemeChange t ->\r\n        lensState (fun s -> {s with Theme = t |> Option.defaultValue \"\"}), Cmd.none\r\n    | TextMenuChange ->\r\n        lensState (fun s -> {s with ShowTextMenus = not s.ShowTextMenus}), Cmd.none\r\n\r\n    | CMsg msg ->\r\n        let next,cmd = updateC msg model.ComponentStates\r\n        {model with ComponentStates = next},cmd |> Cmd.map CMsg\r\n\r\nimportAll \"./style.scss\"\r\n\r\nlet tabSelector ({AppState={Theme=theme;ActiveTab=at};ComponentStates=cs} as x) (dispatch:ComponentMsg -> unit) =\r\n    try\r\n        match at with\r\n        | ApiExperiment -> Components.Api.view cs.Api (ApiMsg >> dispatch)\r\n        | Bazaar ->\r\n            Components.Bazaar.view {Theme=theme} cs.Bazaar (BazMsg >> dispatch)\r\n        | Brewing ->\r\n            Components.Brewing.view {Theme=theme} cs.Brewing (BrewMsg >> dispatch)\r\n        | Collections ->\r\n            Components.Collections.Component.view () cs.Collections (CollMsg >> dispatch)\r\n        | Damage ->\r\n            Components.Damage.view {Theme=theme} cs.Damage (DmgMsg >> dispatch)\r\n        | Enchanting ->\r\n            Components.Enchanting.view {Theme=theme} cs.Enchanting (EnchMsg >> dispatch)\r\n        | EventCalc ->\r\n            Components.EventCalc.view theme cs.EventCalc (EvtMsg >> dispatch)\r\n        | Minions ->\r\n            Components.Minions.view {Theme=theme} cs.Mins (MinMsg >> dispatch)\r\n        | Pets ->\r\n            Components.Pets.Leveling.view cs.Pets (PetMsg >> dispatch)\r\n    with ex ->\r\n        div [] [\r\n            unbox ex.Message\r\n        ]\r\n\r\nlet view (model : Model) (dispatch : Msg -> unit) =\r\n    let tabs =\r\n        Component.All\r\n        |> List.map(fun x ->\r\n            let icon =\r\n                match x with\r\n                | ApiExperiment -> Fa.Solid.Brain\r\n                | Bazaar -> Fa.Solid.DollarSign\r\n                | Brewing -> Fa.Solid.Flask\r\n                | Collections -> Fa.Solid.Warehouse\r\n                | Damage -> Fa.Solid.Biohazard\r\n                | Enchanting -> Fa.Solid.HatWizard\r\n                | EventCalc -> Fa.Solid.CalendarAlt\r\n                | Minions -> Fa.Solid.HardHat\r\n                | Pets -> Fa.Solid.Bone\r\n\r\n\r\n            {| c= x; icon = icon |}\r\n        )\r\n\r\n    let tabIt (c:Component) (icon:Fa.IconOption) =\r\n        TabLink {Name= string c; Active=Some <| string model.AppState.ActiveTab\r\n                 Title= None; OnClick= fun _ -> TabChange c |> dispatch\r\n                 Children= [\r\n                    Fa.FaIcon List.empty icon\r\n                 ] }\r\n    div []\r\n        [\r\n\r\n            TabContainer None None (\r\n                [\r\n                    yield! tabs\r\n                    |> List.map(fun x ->\r\n                        if model.AppState.ShowTextMenus then\r\n                            TabTextLink (string x.c) (Some <| string model.AppState.ActiveTab) (fun _ -> TabChange x.c |> dispatch)\r\n                        else\r\n                            tabIt x.c (x.icon)\r\n                    )\r\n                    yield li [Class \"select is-pulled-right\"] [\r\n                        select [\r\n                            OnChange (getTargetValue(\"theme select\") >> Msg.ThemeChange >> dispatch)\r\n                            Value model.AppState.Theme\r\n                        ] [\r\n                            option [Value \"\"] [unbox \"Themes...\"]\r\n                            option [Value \"callout\"] [unbox \"Callout\"]\r\n                            option [Value \"text\"] [unbox \"Text\"]\r\n                        ]\r\n                    ]\r\n                    yield li [Class \"m-left\"] [\r\n                        label [Class \"checkbox\"] [\r\n                            input [ Type \"checkbox\"; Checked model.AppState.ShowTextMenus\r\n                                    OnChange (fun _ -> dispatch Msg.TextMenuChange)\r\n                            ]\r\n                            unbox \"Text menus\"\r\n                        ]\r\n                    ]\r\n                ]\r\n            )\r\n\r\n            Container.container [] []\r\n            h2 [Class \"is-size-2 has-text-centered\"] [\r\n                unbox (string model.AppState.ActiveTab)\r\n            ]\r\n            tabSelector model (CMsg >> dispatch)\r\n        ]","module Components.Collections.Component\r\n\r\nopen AppDomain.Collections.Collection\r\nopen BrowserStorage\r\nopen Fable.React\r\nopen Elmish\r\nopen CodeHelpers.FableHelpers\r\ntype ComponentState = {\r\n    WeaponsState: Weapons.Model\r\n    ArmorState: Armor.Model\r\n}\r\ntype Model = {\r\n    Subtab: CollectionType\r\n    ComponentStates: ComponentState\r\n}\r\n\r\ntype CMessages=\r\n    | WMsg of Weapons.Msg\r\n    | AMsg of Armor.Msg\r\ntype Msg =\r\n    | TabChange of CollectionType\r\n    | CMsg of CMessages\r\n\r\nlet init overrideOpt =\r\n    overrideOpt \r\n    |> Option.defaultValue {\r\n        Subtab= Weapons\r\n        ComponentStates={\r\n            WeaponsState= Weapons.init None\r\n            ArmorState= Armor.init None\r\n        }\r\n    }\r\n    |> fun x -> x, Cmd.none\r\n\r\nlet cUpdate msg (state:ComponentState):ComponentState * Cmd<CMessages> =\r\n    match msg with\r\n    | WMsg x ->\r\n        Weapons.update x state.WeaponsState\r\n        ||> mapUpdate (fun s -> {state with WeaponsState= s}) WMsg\r\n    | AMsg x ->\r\n        Armor.update x state.ArmorState\r\n        ||> mapUpdate (fun s -> {state with ArmorState= s}) AMsg\r\n\r\nlet update msg model :Model * Cmd<Msg> =\r\n    match msg with\r\n    | Msg.TabChange x ->\r\n        {model with Subtab = x}, Cmd.none\r\n    | CMsg x ->\r\n        cUpdate x model.ComponentStates\r\n        ||> mapUpdate (fun cs -> {model with ComponentStates= cs}) CMsg\r\n\r\nmodule private Internal =\r\n\r\n    let getTab model dispatch =\r\n        match model.Subtab with\r\n        | Weapons ->\r\n            Weapons.view () model.ComponentStates.WeaponsState (WMsg >> dispatch)\r\n        | Armor ->\r\n            Armor.view model.ComponentStates.ArmorState (AMsg >> dispatch)\r\n        | _ ->\r\n            div[][\r\n                unbox \"not implemented\"\r\n            ]\r\n\r\nopen Internal\r\nopen Components.SharedComponents\r\n\r\n    let view props state dispatch =\r\n        div [] [\r\n            unbox \"Collections\"\r\n            TabContainer None (\r\n                Some {|\r\n                        names= CollectionType.All\r\n                        map= string\r\n                        active= Some state.Subtab\r\n                        onClick= Msg.TabChange >> dispatch\r\n            |}) []\r\n            (\r\n                getTab state (Msg.CMsg >> dispatch)\r\n            )\r\n        ]\r\n","module AppDomain.Collections.Collection\r\n\r\nopen SkyblockHelper\r\n\r\ntype CraftType =\r\n    | Slayer of Slayer*int\r\n    | Collection of string\r\n\r\ntype CollectionType =\r\n    | Weapons\r\n    | Armor\r\n    | Minions\r\n    | Resources\r\n    | Pets\r\n    with\r\n        static member All =\r\n            [\r\n                Weapons\r\n                Armor\r\n                Minions\r\n                Resources\r\n                Pets\r\n            ]\r\n","namespace Fulma\r\n\r\nopen Fulma\r\nopen Fable.React\r\nopen Fable.React.Props\r\n\r\n[<RequireQualifiedAccess>]\r\nmodule Notification =\r\n\r\n    type Option =\r\n        | Color of IColor\r\n        /// Add `is-light` class\r\n        | [<CompiledName(\"is-light\")>] IsLight\r\n        | CustomClass of string\r\n        | Props of IHTMLProp list\r\n        | Modifiers of Modifier.IModifier list\r\n\r\n    /// Generate <div class=\"notification\"></div>\r\n    let notification (options : Option list) children =\r\n        let parseOptions (result : GenericOptions) option =\r\n            match option with\r\n            | Color color -> ofColor color |> result.AddClass\r\n            | IsLight -> result.AddCaseName option\r\n            | Props props -> result.AddProps props\r\n            | CustomClass customClass -> result.AddClass customClass\r\n            | Modifiers modifiers -> result.AddModifiers modifiers\r\n\r\n        GenericOptions.Parse(options, parseOptions, \"notification\").ToReactElement(div, children)\r\n\r\n    /// Generate <button class=\"delete\"></button>\r\n    let delete (options: GenericOption list) children =\r\n        GenericOptions.Parse(options, parseOptions, \"delete\").ToReactElement(button, children)\r\n","namespace Elmish.HMR\n\nopen Fable.Core.JsInterop\nopen Browser\nopen Elmish\n\n[<RequireQualifiedAccess>]\nmodule Program =\n\n    type Msg<'msg> =\n        | UserMsg of 'msg\n        | Stop\n\n    type Model<'model> =\n        | Inactive\n        | Active of 'model\n\n\n    module Internal =\n\n        type Platform =\n            | Browser\n            | ReactNative\n\n        let platform =\n            match window?navigator?product with\n            | \"ReactNative\" -> ReactNative\n            | _ -> Browser\n\n        let tryRestoreState (hmrState : Model<_> ref) (data : obj) =\n            match platform with\n            | ReactNative ->\n                let savedHmrState = window?react_native_elmish_hmr_state\n                if not (isNull (box savedHmrState)) then\n                    hmrState.Value <- savedHmrState\n\n            | Browser ->\n                if not (isNull data) && not (isNull data?hmrState) then\n                    hmrState.Value <- data?hmrState\n\n        let saveState (data : obj) (hmrState : Model<_>) =\n            match platform with\n            | ReactNative ->\n                window?react_native_elmish_hmr_state <- hmrState\n            | Browser ->\n                data?hmrState <- hmrState\n\n\n    let inline private updateElmish_HMR_Count () =\n        window?Elmish_HMR_Count <-\n            if isNull window?Elmish_HMR_Count then\n                0\n            else\n                window?Elmish_HMR_Count + 1\n\n    /// Start the dispatch loop with `'arg` for the init() function.\n    let inline runWith (arg: 'arg) (program: Program<'arg, 'model, 'msg, 'view>) =\n#if !DEBUG\n        Program.runWith arg program\n#else\n        let hmrState : Model<'model> ref = ref (unbox null)\n\n        match Bundler.current with\n        | Some current ->\n            updateElmish_HMR_Count ()\n\n            let hmrDataObject =\n                match current with\n                | Bundler.Vite ->\n                    HMR.Vite.hot.accept()\n                    HMR.Vite.hot.data\n\n                | Bundler.WebpackESM ->\n                    HMR.Webpack.hot.accept()\n                    HMR.Webpack.hot.data\n\n                | Bundler.WebpackCJS_and_Parcel ->\n                    HMR.Parcel.hot.accept()\n                    HMR.Parcel.hot.data\n\n            Internal.tryRestoreState hmrState hmrDataObject\n\n        | None ->\n            ()\n\n        let map (model, cmd) =\n            model, cmd |> Cmd.map UserMsg\n\n        let mapUpdate update (msg : Msg<'msg>) (model : Model<'model>) =\n            match msg with\n            | UserMsg msg ->\n                match model with\n                | Inactive -> map(model, Cmd.none)\n                | Active userModel ->\n                    let newModel, cmd = update msg userModel\n                    let newModel, cmd = map(Active newModel, cmd)\n                    hmrState.Value <- newModel\n                    newModel, cmd\n\n            | Stop ->\n                map(Inactive, Cmd.none)\n\n        let createModel (model, cmd) =\n            Active model, cmd\n\n        let mapInit init =\n            if isNull (box hmrState.Value) then\n                init >> map >> createModel\n            else\n                (fun _ -> hmrState.Value, Cmd.none)\n\n        let mapSetState setState (model : Model<'model>) dispatch =\n            match model with\n            | Inactive -> ()\n            | Active userModel ->\n                setState userModel (UserMsg >> dispatch)\n\n        let hmrSubscription =\n            let handler dispatch =\n                match Bundler.current with\n                | Some current ->\n                    match current with\n                    | Bundler.Vite ->\n                        HMR.Vite.hot.dispose(fun data ->\n                            Internal.saveState data hmrState.Value\n\n                            dispatch Stop\n                        )\n\n                    | Bundler.WebpackESM ->\n                        HMR.Webpack.hot.dispose(fun data ->\n                            Internal.saveState data hmrState.Value\n\n                            dispatch Stop\n                        )\n\n                    | Bundler.WebpackCJS_and_Parcel ->\n                        HMR.Parcel.hot.dispose(fun data ->\n                            Internal.saveState data hmrState.Value\n\n                            dispatch Stop\n                        )\n\n                | None ->\n                    ()\n\n            [ handler ]\n\n        let mapSubscribe subscribe model =\n            match model with\n            | Inactive -> Cmd.none\n            | Active userModel ->\n                Cmd.batch [ subscribe userModel |> Cmd.map UserMsg\n                            hmrSubscription ]\n\n        let mapView view =\n            // This function will never be executed because we are using a local reference to access `program.view`.\n            // For example,\n            // ```fs\n            // let withReactUnoptimized placeholderId (program: Program<_,_,_,_>) =\n            //     let setState model dispatch =\n            //         Fable.Import.ReactDom.render(\n            //             lazyView2With (fun x y -> obj.ReferenceEquals(x,y)) program.view model dispatch,\n            //                                                                  ^-- Here program is coming from the function parameters and not\n            //                                                                      from the last program composition used to run the applicaiton\n            //             document.getElementById(placeholderId)\n            //         )\n            //\n            //     { program with setState = setState }\n            // ```*)\n            fun model dispatch ->\n                match model with\n                | Inactive ->\n                    \"\"\"\nYour are using HMR and this Elmish application has been marked as inactive.\n\nYou should not see this message\n                    \"\"\"\n                    |> failwith\n                | Active userModel ->\n                    view userModel (UserMsg >> dispatch)\n\n        program\n        |> Program.map mapInit mapUpdate mapView mapSetState mapSubscribe\n        |> Program.runWith arg\n#endif\n\n    /// Start the dispatch loop with `unit` for the init() function.\n    let inline run (program: Program<unit, 'model, 'msg, 'view>) =\n#if !DEBUG\n        Program.run program\n#else\n        runWith () program\n#endif\n\n    (*\n        Shadow: Fable.Elmish.Navigation\n    *)\n\n    let inline toNavigable\n        (parser : Navigation.Parser<'a>)\n        (urlUpdate : 'a->'model->('model * Cmd<'msg>))\n        (program : Program<'a,'model,'msg,'view>) =\n#if !DEBUG\n        Navigation.Program.toNavigable parser urlUpdate program\n#else\n        let onLocationChange (dispatch : Dispatch<_ Navigation.Navigable>) =\n            match Bundler.current with\n            | Some current ->\n                match current with\n                | Bundler.Vite ->\n                    HMR.Vite.hot.dispose(fun _ ->\n                        Navigation.Program.Internal.unsubscribe ()\n                    )\n\n                | Bundler.WebpackESM ->\n                    HMR.Webpack.hot.dispose(fun _ ->\n                        Navigation.Program.Internal.unsubscribe ()\n                    )\n\n                | Bundler.WebpackCJS_and_Parcel ->\n                    HMR.Parcel.hot.dispose(fun _ ->\n                        Navigation.Program.Internal.unsubscribe ()\n                    )\n\n                Navigation.Program.Internal.subscribe dispatch\n\n            | None ->\n                Navigation.Program.Internal.subscribe dispatch\n\n        Navigation.Program.Internal.toNavigableWith parser urlUpdate program onLocationChange\n#endif\n\n    (*\n        Shadow: Fable.Elmish.React\n    *)\n\n    let inline withReactBatched placeholderId (program: Program<_,_,_,_>) =\n#if !DEBUG\n        Elmish.React.Program.withReactBatched placeholderId program\n#else\n        Elmish.React.Program.Internal.withReactBatchedUsing lazyView2With placeholderId program\n#endif\n\n    let inline withReactSynchronous placeholderId (program: Program<_,_,_,_>) =\n#if !DEBUG\n        Elmish.React.Program.withReactSynchronous placeholderId program\n#else\n        Elmish.React.Program.Internal.withReactSynchronousUsing lazyView2With placeholderId program\n#endif\n\n    let inline withReactHydrate placeholderId (program: Program<_,_,_,_>) =\n#if !DEBUG\n        Elmish.React.Program.withReactHydrate placeholderId program\n#else\n        Elmish.React.Program.Internal.withReactHydrateUsing lazyView2With placeholderId program\n#endif\n\n    [<System.Obsolete(\"Use withReactBatched\")>]\n    let inline withReact placeholderId (program: Program<_,_,_,_>) =\n#if !DEBUG\n        Elmish.React.Program.withReactBatched placeholderId program\n#else\n        Elmish.React.Program.Internal.withReactBatchedUsing lazyView2With placeholderId program\n#endif\n\n    [<System.Obsolete(\"Use withReactSynchronous\")>]\n    let inline withReactUnoptimized placeholderId (program: Program<_,_,_,_>) =\n#if !DEBUG\n        Elmish.React.Program.withReactSynchronous placeholderId program\n#else\n        Elmish.React.Program.Internal.withReactSynchronousUsing lazyView2With placeholderId program\n#endif\n","module Client\r\n\r\nopen Elmish\r\n\r\n#if DEBUG\r\nopen Elmish.Debug\r\nopen Elmish.HMR\r\n#endif\r\n\r\nProgram.mkProgram Index.init Index.update Index.view\r\n#if DEBUG\r\n// |> Program.withConsoleTrace\r\n|> Program.withReactSynchronous \"elmish-app\"\r\n// |> Program.withDebugger\r\n#endif\r\n|> Program.run\r\n","namespace Elmish.React\n\n[<AutoOpen>]\nmodule Helpers =\n    open Fable.React.Props\n    open Fable.Core.JsInterop\n\n    /// `Ref` callback that sets the value of an input textbox after DOM element is created.\n    /// Can be used instead of `DefaultValue` and `Value` props to override input box value.\n    let inline valueOrDefault value =\n        Ref <| (fun e -> if e |> isNull |> not && !!e?value <> !!value then e?value <- !!value)\n\n[<RequireQualifiedAccess>]\nmodule Program =\n\n    module Internal =\n\n        open Fable.React\n        open Browser\n        open Elmish\n\n        let withReactBatchedUsing lazyView2With placeholderId (program:Program<_,_,_,_>) =\n            let mutable lastRequest = None\n            let setState model dispatch =\n                match lastRequest with\n                | Some r -> window.cancelAnimationFrame r\n                | _ -> ()\n\n                lastRequest <- Some (window.requestAnimationFrame (fun _ ->\n                    ReactDom.render(\n                        lazyView2With (fun x y -> obj.ReferenceEquals(x,y)) (Program.view program) model dispatch,\n                        document.getElementById placeholderId\n                    )))\n\n            program\n            |> Program.withSetState setState\n\n        let withReactSynchronousUsing lazyView2With placeholderId (program:Elmish.Program<_,_,_,_>) =\n            let setState model dispatch =\n                ReactDom.render(\n                    lazyView2With (fun x y -> obj.ReferenceEquals(x,y)) (Program.view program) model dispatch,\n                    document.getElementById placeholderId\n                )\n\n            program\n            |> Program.withSetState setState\n\n        let withReactHydrateUsing lazyView2With placeholderId (program:Elmish.Program<_,_,_,_>) =\n            let setState model dispatch =\n                ReactDom.hydrate(\n                    lazyView2With (fun x y -> obj.ReferenceEquals(x,y)) (Program.view program) model dispatch,\n                    document.getElementById placeholderId\n                )\n\n            program\n            |> Program.withSetState setState\n\n\n    /// Renders React root component inside html element identified by placeholderId.\n    /// Uses `requestAnimationFrame` to batch updates to prevent drops in frame rate.\n    /// NOTE: This may have unexpected effects in React controlled inputs, see https://github.com/elmish/react/issues/12\n    let withReactBatched placeholderId (program:Elmish.Program<_,_,_,_>) =\n        Internal.withReactBatchedUsing lazyView2With placeholderId program\n\n    /// Renders React root component inside html element identified by placeholderId.\n    /// New renders are triggered immediately after an update.\n    let withReactSynchronous placeholderId (program:Elmish.Program<_,_,_,_>) =\n        Internal.withReactSynchronousUsing lazyView2With placeholderId program\n\n    [<System.Obsolete(\"Use withReactBatched\")>]\n    let withReact placeholderId (program:Elmish.Program<_,_,_,_>) =\n        Internal.withReactBatchedUsing lazyView2With placeholderId program\n\n    [<System.Obsolete(\"Use withReactSynchronous\")>]\n    let withReactUnoptimized placeholderId (program:Elmish.Program<_,_,_,_>) =\n        Internal.withReactSynchronousUsing lazyView2With placeholderId program\n\n    /// Renders React root component inside html element identified by placeholderId using `React.hydrate`.\n    let withReactHydrate placeholderId (program:Elmish.Program<_,_,_,_>) =\n        Internal.withReactHydrateUsing lazyView2With placeholderId program\n","namespace Elmish\n\n(**\nLog\n---------\nBasic cross-platform logging API.\n\n*)\nmodule internal Log =\n\n#if FABLE_COMPILER\n    open Fable.Core.JS\n\n    let onError (text: string, ex: exn) = console.error (text,ex)\n    let toConsole(text: string, o: #obj) = console.log(text,o)\n\n#else\n#if NETSTANDARD2_0\n    let onError (text: string, ex: exn) = System.Diagnostics.Trace.TraceError(\"{0}: {1}\", text, ex)\n    let toConsole(text: string, o: #obj) = printfn \"%s: %A\" text o\n#else\n    let onError (text: string, ex: exn) = System.Console.Error.WriteLine(\"{0}: {1}\", text, ex)\n    let toConsole(text: string, o: #obj) = printfn \"%s: %A\" text o\n#endif\n#endif\n\n#if FABLE_COMPILER\nmodule internal Timer =\n    open System.Timers\n    let delay interval callback =\n        let t = new Timer(float interval, AutoReset = false)\n        t.Elapsed.Add callback\n        t.Enabled <- true\n        t.Start()\n#endif\n"],"names":["x","Array","isArray","ArrayBuffer","isView","isHashable","GetHashCode","sameConstructor","y","Object","getPrototypeOf","constructor","Enumerator","iter","this","current","cur","next","value","done","Error","Dispose","o","GetEnumerator","Symbol","iterator","toIterator","en","hasNext","undefined","Lazy","factory","isValueCreated","Value","createdValue","IsValueCreated","i","length","str","toString","date","date1","offset","kind","getTimezoneOffset","radix","ObjectRef","static","idMap","has","set","count","get","stringHash","s","h","len","charCodeAt","numberHash","combineHashCodes","hashes","reduce","h1","h2","arrayHash","Date","getTime","dateHash","values","map","v","id","equalArraysWith","eq","Equals","isEquatable","xKeys","keys","yKeys","sort","equalObjects","xtime","ytime","compareArrays","comp","j","compareArraysWith","CompareTo","isComparable","key","compareObjects","comparer","max","WeakMap","CURRIED_KEY","arity","f","uncurriedFn","a1","a2","a3","a4","a5","a6","a7","a8","args","apply","concat","mapCurriedArgs","fn","mappings","mapArg","arg","idx","mapping","expectedArity","actualArity","res","callStack","self","seqToString","cons","entries","k","join","name","String","cases","tag","toJSON","fields","fieldStr","withParens","indexOf","unionToString","splice","other","recordToJSON","recordToString","recordGetHashCode","thisNames","recordEquals","result","recordCompareTo","contentsOrGetter","setter","getter","contents","CaseInfo","declaringType","TypeInfo","fullname","generics","construct","parent","enumCases","getHashCode","getGenerics","t","t1","t2","getRecordElements","k1","v1","k2","v2","caseNames","prototype","generic","info","lastIndexOf","substr","gen","endsWith","getElementType","_a","isGenericType","isEnum","getGenericTypeDefinition","getEnumUnderlyingType","getEnumValues","kv","parseEnum","parseInt","getEnumCase","isNaN","getUnionCases","getTupleElements","isTuple","isUnion","isRecord","startsWith","getUnionCaseFields","uci","makeUnion","expectedLength","assertUnion","NumberStyles","getRange","unsigned","bitsize","tryParse","style","defValue","exec","replace","prefix","digits","AllowHexSpecifier","getRadix","invalidDigits","getInvalidDigits","test","regexMatch","sign","validResponse","Number","umin","umax","min","symbol","isNumeric","multiply","toFixed","dp","toPrecision","sd","toExponential","toHex","wasm","WebAssembly","Instance","Module","Uint8Array","exports","e","Long","low","high","isLong","obj","bytes","le","fromBytesLE","fromBytesBE","fromBytes","$this","hi","lo","toBytesLE","toBytesBE","__isLong__","defineProperty","INT_CACHE","UINT_CACHE","cachedObj","cache","UZERO","ZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","MIN_VALUE","MAX_VALUE","negate","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","Math","pow","fromString","RangeError","p","substring","radixToPower","size","val","TWO_PWR_16_DBL","TWO_PWR_24","ONE","UONE","NEG_ONE","isZero","isNegative","radixLong","div","divide","rem1","subtract","rem","remDiv","isOdd","lessThan","greaterThan","greaterThanOrEqual","thisNeg","otherNeg","not","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtrahend","multiplier","mul","get_high","b00","divisor","approx","div_u","div_s","toUnsigned","numBits","shiftRightUnsigned","shiftLeft","shiftRight","floor","log2","ceil","log","LN2","delta","approxRes","approxRem","xh","offsetRegex","isMinus","minutes","abs","dateToHalfUTCString","half","toISOString","dateToStringWithCustomFormat","format","utc","match","rep","NaN","getUTCFullYear","getFullYear","getUTCMonth","getMonth","getUTCDate","getDate","getUTCHours","getHours","getUTCMinutes","getMinutes","getUTCSeconds","getSeconds","getUTCMilliseconds","getMilliseconds","_provider","_b","_c","d","dateWithOffset","dateToISOStringWithOffset","dateToStringWithOffset","toUTCString","toLocaleString","toLocaleDateString","toLocaleTimeString","printOffset","dateToISOString","dateToStringWithKind","DateTime","parseRaw","input","trim","m","baseDate","timeInSeconds","timeParts","split","parseFloat","toUpperCase","offsetParts","offsetInMinutes","detectUTC","_err","ts","newDate","oldTzOffset","newTzOffset","addHours","addMinutes","pattern","options","flags","RegExp","matches","reg","lastIndex","global","push","fsFormatRegExp","formatRegExp","isLessThan","cmp","ic","isIgnoreCase","toLowerCase","toLocaleLowerCase","localeCompare","cont","strParts","strIdx","matchIndex","index","createPrinter","continuePrint","console","error","toFail","formatReplacement","padLength","precision","zeroFlag","minusFlag","ch","padLeft","_strParts","_matches","_result","padArg","slice","_padLength","shift","_","intPart","decimalPart","delimiter","xs","from","isRight","replicate","n","chars","Some","opt","defaultValue","binder","Helpers_allocateArrayFromCons","target","targetIndex","start","fill","source","initializer","folder","state","array","delegateArg0","delegateArg1","foldBack2","array1","array2","acc","differentLengths","foldBackIndexed2","_arg1","head","tail","super","xs_1_mut","ys_1_mut","loop","xs_1","ys_1","matchValue","xt","yt","i_mut","h_mut","_key","c","ListEnumerator$1","it","__","FSharpList_get_Empty","FSharpList_Cons_305B8EAC","FSharpList__get_IsEmpty","FSharpList__get_Length","FSharpList__get_Head","FSharpList__get_Tail","action","unitVar0","tail_1","xs_3","root","node","enumerator","xs_5","t_2","ys","acc_mut","FSharpList__get_Item_Z524259A4","arr","projection","Compare","adder","Add","GetZero","setPrototypeOf","ctx","cancelToken","isCancelled","onCancel","trampoline","incrementAndCheck","hijack","err","onError","Bind","computation","onSuccess","ex","Combine","computation1","computation2","Delay","generator","For","sequence","body","While","Return","ReturnFrom","TryFinally","compensation","TryWith","catchHandler","ex2","Using","resource","guard","Zero","FSharpChoice$3","dispatch","cmd","call","g","cmds","lists","forEach","xs_6","task","ofSuccess","ofError","e1","e2","cancelled","_id","_cancelled","_listeners","Map","cancel","listener","addListener","removeListener","delete","register","$","Enumerator_notStarted","Enumerator_alreadyFinished","Enumerator_Seq","Enumerator_FromFunctions$1","dispose","Enumerator_noReset","Enumerator_FromFunctions$1_$ctor_58C54629","Enumerator_generateWhileSome","openf","compute","closef","curr","started","x_1","finish","matchValue_1","mkSeq","Enumerator_Seq_$ctor_673A07F2","argName","Operators_NullArg","sources","outerOpt","innerOpt","finished","inner","outer","copyOfStruct","inner_1","outer_1","Enumerator_concat","ar","generate","create","generateIndexed","chooser","e_1","found","predicate","Enumerator_enumerateThenFinally","BigNat","bound","BigNatModule_FFT_pow32","x_mut","n_mut","BigNatModule_bound","BigNatModule_coeff","BigNatModule_coeff64","BigNatModule_setCoeff","BigNatModule_pow64","BigNatModule_pow32","BigNatModule_FFT_maxTwoPower","Int32Array","BigNatModule_baseN","BigNatModule_baseNi64","BigNatModule_baseMaski64","BigNatModule_createN","b","BigNatModule_normN","na_mut","na","findLeastBound","BigNatModule_embed","r","r_1","BigNatModule_eval32","BigNatModule_zero","BigNatModule_degree","BigNatModule_lt","q","pa_mut","qa_mut","pa","qa","check","BigNatModule_compare","BigNatModule_mulSchoolBookCarry","r_mut","c_mut","k_mut","rak","BigNatModule_mulSchoolBookOneSmall","bp","q_1","BigNatModule_encoding","bigL","twoToBigL","bigK","bigN","splits","BigNatModule_mkEncoding","BigNatModule_table","pSmall","qSmall","BigNatModule_mulSchoolBookBothSmall","ra","pai","qaj","BigNatModule_mulSchoolBookNeitherSmall","BigNatModule_mulSchoolBook","BigNatModule_scaleSubInPlace","a","patternInput","patternInput_1","ad","a_1","f_1","z","zLo","zHi","BigNatModule_scaleAddInPlace","BigNatModule_removeFactor","degx","dega","xa","aa","pn","qai","copy","BigNatModule_copyN","Invariant","tupledArg","BigNatModule_ofInt32","BigNatModule_toString","degn","collect","isLeading_mut","digits_mut","n_1_mut","_arg1_mut","isLeading","n_1","n_2","prior_1","nL","nH","digits_4","prior_mut","ten2k_mut","prior","ten2k","route","BigNatModule_getSmall","P","_this","MAX_DP","NAME","INVALID","INVALID_DP","DIV_BY_ZERO","UNDEFINED","NUMERIC","nl","charAt","search","Big","DP","RM","rm","more","xc","findIndex","xci","unshift","pop","stringify","doExponential","isNonzero","isneg","yc","l","bl","bt","ri","bz","ai","al","rl","qc","qi","gt","gte","lt","lte","minus","sub","xlty","plus","xe","ye","reverse","mod","ygtx","times","add","one","prec","round","sqrt","NE","PE","toNumber","strict","valueOf","_Big_","normalize","TypeError","setInt32Bits","hexDigits","bits","mid","scale","bitSize","decDigits","hex","dec","decCount","carry","hexToDecimal","big","signInt","BigInteger__get_SignInt","BigInteger__get_V","BigNatModule_hash","pattern_matching_result","nn","BigInteger_$ctor_Z2BE94A1","BigInteger_nat_Z67CCE57D","smallLim","smallPosTab","rem_u","rem_s","BigNatModule_embed64","zero","integralRangeStep","step","stop","stepFn","stepComparedWithZero","stepGreaterThanZero","comparedWithLast","makeRangeStepFunction","st_1","Enumerator_unfold","two","wix","rix","items","rix'","program","init","model","rb","reentered","syncDispatch","msg","item","wix'","ix","nextMsg","update","model'","subscribe","props","hmrCount","window","nextProps","_nextState","currentHmrCount","_prevState","_props","dashify","separator","caseRule","definedCaseRule","fail","kvPair","assign","changeCase","dict","caseStrategy","fieldName","replacement","limit","tmp","arguments","withGroups","pLast","groups","_s","sub1","sub2","guidRegex","guidRegexNoHyphen","guidRegexHex","hyphenateGuid","wsTrimAndLowered","newGuid","random","DateTimeOffset","checkOffsetInRange","offsetMatch","signedRound","ms","ticks","firstDot","firstColon","MapTreeLeaf$2","MapTreeLeaf$2_$ctor_5BDDA1","MapTreeLeaf$2__get_Key","MapTreeLeaf$2__get_Value","MapTreeNode$2","left","right","MapTreeNode$2_$ctor_499A11FD","MapTreeNode$2__get_Left","MapTreeNode$2__get_Right","MapTreeNode$2__get_Height","MapTreeModule_sizeAux","m_mut","m2","MapTreeModule_size","MapTreeModule_mk","hl","hr","m2_1","m_2","MapTreeModule_rebalance","m2_2","m_3","m2_3","t1h","t2h","matchValue_2","matchValue_3","MapTreeModule_add","MapTreeModule_empty","MapTreeModule_tryFind","comparer_mut","MapTreeModule_spliceOutSuccessor","MapTreeModule_remove","MapTreeModule_iterOpt","f_mut","MapTreeModule_iter","MapTreeModule_mapiOpt","l2","r2","MapTreeModule_mapi","MapTreeModule_foldOpt","MapTreeModule_fold","MapTreeModule_ofSeq","forLoopVar","MapTreeModule_ofArray","MapTreeModule_ofList","ie","e_mut","MapTreeModule_mkFromEnumerator","MapTreeModule_MapIterator$2","stack","MapTreeModule_collapseLHS","stack_mut","rest","MapTreeModule_mkIterator","MapTreeModule_current","MapTreeModule_alreadyFinished","MapTreeModule_notStarted","MapTreeModule_mkIEnumerator","MapTreeModule_moveNext","FSharpMap","tree","this$","combineHash","activePatternResult5329","FSharpMap__ComputeHashCode","that","m1","e1c","e2c","toStringTag","b1","b2","kvp1","kvp2","FSharpMap__ContainsKey","FSharpMap__get_Item","MapTreeModule_copyToArray","FSharpMap__get_Count","clear","thisArg","FSharpMap_$ctor","FSharpMap_Create","MapTreeModule_find","MapTreeModule_mem","table","FSharpMap__Add","FSharpMap__TryFind","FSharpMap__Remove","kvp","elements","empty","SetTreeLeaf$1","SetTreeLeaf$1_$ctor_2B595","SetTreeLeaf$1__get_Key","SetTreeNode$1","SetTreeNode$1_$ctor_Z6E7BE5F7","SetTreeNode$1__get_Left","SetTreeNode$1__get_Right","SetTreeNode$1__get_Height","SetTreeModule_countAux","t_mut","SetTreeModule_count","SetTreeModule_mk","t2_1","SetTreeModule_rebalance","t2_3","t_3","t2_4","t2_2","SetTreeModule_add","c_1","SetTreeModule_empty","SetTreeModule_mem","SetTreeModule_iter","SetTreeModule_SetIterator$1","SetTreeModule_collapseLHS","x2","SetTreeModule_mkIterator","SetTreeModule_current","SetTreeModule_alreadyFinished","SetTreeModule_notStarted","SetTreeModule_mkIEnumerator","SetTreeModule_moveNext","SetTreeModule_compare","l1_mut","l2_mut","SetTreeModule_compareStacks","l1","x1_3","x2_3","t1_6","x1_4","t2_6","x2_4","matchValue_4","pattern_matching_result_1","t1_7","x1_5","t2_7","x2_5","c_3","c_2","matchValue_5","pattern_matching_result_2","t1_8","x1_6","t2_8","x2_6","pattern_matching_result_3","t1_2","x1","x2_1","pattern_matching_result_4","t1_4","x1_2","x2_2","SetTreeModule_copyToArray","SetTreeModule_ofSeq","SetTreeModule_ofArray","SetTreeModule_ofList","SetTreeModule_mkFromEnumerator","FSharpSet","FSharpSet__ComputeHashCode","FSharpSet__get_Comparer","FSharpSet__get_Tree","FSharpSet__get_Count","set$","FSharpSet_$ctor","newLine","path","decoder","reason","genericMsg","errorToString","outArg","requestedIndex","currentPath","vArray","list","tokens","cb","ctor","d1","prop","keyValuePairs","decoder1","decoder2","andThen","( arg10@ )","( arg20@ )","decoders","arg30","arg10","extra","find","mixedArray","fi","autoDecoder","isOptional","decoderRef","_t","decoderInfos","reduceRight","autoObject","message","enumType","enumValue","clo2","arg20","clo3","arg0","keyDecoder","valueDecoder","autoObject2","tuple2","oneOf","runner","errors","autoDecodeRecordsAndUnions","bool","unit","string","sbyte","byte","int16","uint16","int","uint32","float32","datetime","datetimeOffset","timespan","guid","_arg2","makeExtra","space","skipNullField","encoderRef","encoder","setters","targetKey","encode","autoEncoder","case_","fieldTypes","encoders","keyType","valueEncoder","activePatternResult6369","keyEncoder","clo4","arg40","activePatternResult6373","autoEncodeRecordsAndUnions","days","hours","seconds","milliseconds","lengthLeft","lengthRight","padLeftAndRightWithZeros","arrays","arrays_1","totalIdx","totalLength","idx_1","arr_2","activePatternResult6571","activePatternResult6592","xopt","resolve","reject","xhr","Method","Url","Headers","status","response","statusText","Body","useProxy","url","fetchHerokuProxy","clo1","qs","case","screen","level","option","display","typ","amount","direction","parser","baseClass","baseProps","cl","modifiers","cls","el","children","Classes","className","suffix","ofOffset","places","num","activePatternResult63308","activePatternResult63309","aft","formatNumber","title","ev","fModel","fMsg","baseElement","opts","std","Icon","Size","Border","Pull","Rotation","Flip","CustomClass","StackSize","booleans","FixedWidth","IsLi","HavePulse","HaveSpin","IsInverse","complete","Props","addedClasses","onChange","parse","getTargetValue","active","emptyLabel","Name","Placeholder","Title","Active","Children","onClick","stdTabs","tabs","names","mode","jv","headers","isFolded","element","fa","faOptions","ofType","valueOrDefault","Prop","label","Screen","lia","inputColumn","inputType","getEvValue","apiButton","Msg","Uuid","Key","attr","SkyblockProfile","link","activePatternResult8315","activePatternResult8316","u","getUrl","ApiReqType","activePatternResult8317","activePatternResult8318","activePatternResult8319","lbl","adds","plainSuffix","plainsuffix","blockname","category","catName","emult","Category","inputRecord","makeStandardMining","crv","hashMap","HashSet__Add_2B595","HashSet__Clear","HashSet__Contains_2B595","arrayIndex","HashSet__get_Count","HashSet__Remove_2B595","HashSet__TryFindIndex_2B595","v_1","pairs","pair","Dictionary__Add_5BDDA1","Dictionary__Clear","Dictionary__TryFind_2B595","Dictionary__get_Count","Dictionary__Remove_2B595","Dictionary__ContainsKey_2B595","Dictionary__get_Item_2B595","Dictionary__set_Item_5BDDA1","Dictionary__TryFindIndex_2B595","distinct","hashSet","except","itemsToExclude","groupBy","key_1","overrideOpt","forms","Selected","getKeyValue","vk","Values","formTypes","cat","pre","Table","addedHeaders","form","Label","Asterisk","NumberInput","nv","Div","Vend","bazaarCount","Mode","isBazaar","vdiv","xdiv","effCount","sCount","BazaarMode","Diagnostic","DiagnosticMode","isVanilla","lvl1source","isDebuff","bases","IsDebuff","activePatternResult7123","pot","potions","getBases","tpot","showDebuffs","ss","tpotname","lvl","Lvl","Source","bselect","unselectedTitle","fProp","sorted","TBase","allBases","LMod","_arg3","modifier","mods","Mod","ModType","Mat","rarity","collection","slvl","FoldMaster","Folded","OnToggle","FoldTarget","isChecked","activePatternResult8773","special","stdNo","makeHeadless","armorSet_0","armorSet_1","checkedParts","armorSet","tit","_arg1_0","_arg1_1","folded","FoldedRarity","setView","armor_0","armor_1","onToggle","armor","_arg6","tuple","Checked","FoldedArmor","foldyListItem","_arg8","findBase","UpgradedForm","getForms","obt","nameBase","r1","o1","o2","r3","o3","tali","ring","noUpgrade","threeChain","ds","maps","numberRow","Stats","CombatLevel","MaxHealth","wt","activePatternResult7176","initOverride","CustomCharacter","Enemy","Enchants","WeaponComponent","selectedFormName","selectedRarity","actualAcc","nextOwned","Reforge","OwnedAccessories","oa","oi","Character","AccessoryModel","stats","clv","getCombatLevelValue","weaponType","maxHealth","mobMaxHealth","mobCurrentHealth","CurrentHealth","mobtype","Type","enchants","eLevel","getExecuteBonus","gkLevel","getGiantKillerRaw","getGiantKillerBonus","addValues","Damage","strength","wb","getMult","cd","normal","crit","bd","mult","armorbonus","critdmg","getTotalCritDamage","cc","Select","WeaponType","dispatchInt","SelectOpt","arg00","tab","Theme","rarityCounts","countRarity","ownedInfo","baseAcc","FormName","Rarity","rfg","accForm","SubMsg","customview","TabContainer","sm","Submenu","tlvl","vt","isRec","minTblLvl","meTbl","clc","isRecommended","cBase","arg50","arg60","arg70","cEnchant","colorRec","struck","et","E","sucMods","suc","ColorRec","isStruck","Struck","bcls","theme","dt","now","numberInput","dv","bdSpan","fDt","spanTimeDisplay","columns","Days","Hours","Minutes","si","prod","hfield","productionPerHrPerMinion","reqHours","SelectedItem","Count","reqDays","HField","_cls","Production","BazaarPlain","productionPerHr","bazaarPlain","unfueledCoins","durationHr","asterisk","fuelproduces","fuelCoinOverage","breakeven","fuelPercentDisplay","targetItems","selectedItemOpt","onSelected","Resource","activePatternResult9657","lvls","LevelMode","CountMode","cmd1","allRarities","EnemyEnchantClassification","EnchantType","defaultLevelMode","defaultCountMode","app","cs","Preconfigured","Bazaar","valueOpt","serial","lensTPot","fSet","TPot","prev","Brewing","toggleListValue","toggleMapListValue","ArmorState","mapUpdate","WeaponsState","cUpdate","ComponentStates","Collections","ColorRecommendations","Enchanting","EventCalc","changeItem","ti","Prod","CState","Mins","Pets","Loading","activePatternResult8286","activePatternResult8287","activePatternResult8284","activePatternResult8285","activePatternResult8283","Api","at","merchants","Subtab","reference","modifications","ShowDebuffs","makeTab","checkedItems","strikes","useColor","enchants_0","enchants_1","CMsg","PetType","currentXp","getLvlXp","xpTo100","formatInt","titleColumn","createTable","xpformatting","candyValue","getXp","fullValue","fmt","xp","data","hmrState","lazyView2With","placeholderId","setState","view","document","getElementById","equal","text","lensState","AppState","updateC","ShowTextMenus","ActiveTab","tabSelector","savedHmrState","mapInit","mapView","mapSetState","mapSubscribe","newModel"],"sourceRoot":""}